import{_ as t,P as c,a2 as l,U as n,a3 as a,V as e,a8 as o,D as s}from"./framework-9df6ff52.js";const p={},r=o(`<h1 id="_01-初识-python" tabindex="-1"><a class="header-anchor" href="#_01-初识-python" aria-hidden="true">#</a> 01.初识 Python</h1><h2 id="安装-python-解析器" tabindex="-1"><a class="header-anchor" href="#安装-python-解析器" aria-hidden="true">#</a> 安装 Python 解析器</h2><p>以下以 centos 为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装所需依赖</span>
yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel

<span class="token comment"># 下载源代码并解压</span>
<span class="token function">wget</span> https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz
xz <span class="token parameter variable">-d</span> Python-3.7.6.tar.xz
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> Python-3.7.6.tar

<span class="token comment"># 编译安装</span>
<span class="token builtin class-name">cd</span> Python-3.7.6
./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python37 --enable-optimizations
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看-python-版本" tabindex="-1"><a class="header-anchor" href="#查看-python-版本" aria-hidden="true">#</a> 查看 Python 版本</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">--version</span>
<span class="token comment"># 或</span>
python3 <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Unix 系统中，为了不与同时安装的 Python 2.x 冲突，Python 3.x 解释器默认安装的执行文件名不是 python。</p></div><p>可以进入 python 交互环境查看版本号：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys

<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>version_info<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>version<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调用参数" tabindex="-1"><a class="header-anchor" href="#调用参数" aria-hidden="true">#</a> 调用参数</h2><p>解释器读取命令行参数，把脚本名与其他参数转换为字符串列表，存到 <code>sys</code> 模块的 <code>argv</code> 变量中。 执行 <code>import sys</code>, 可以导入这个模块，并访问该列表。 该列表至少有一个元素，未指定参数时，<code>sys.argv[0]</code> 是一个空字符串。 给定脚本名是 <code>-</code> 时，<code>sys.argv[0]</code> 是 <code>-</code>。 使用 <code>-c command</code> 时，<code>sys.argv[0]</code> 是 <code>-c</code>。 如果使用选项 <code>-m module</code> 时，<code>sys.argv[0]</code> 就是包含目录的模块全名。</p><p>解释器不处理 <code>-c command</code> 或 <code>-m module</code> 之后的选项，而是直接留在 <code>sys.argv</code> 中，由命令或模块来处理。</p><h3 id="c-command" tabindex="-1"><a class="header-anchor" href="#c-command" aria-hidden="true">#</a> <code>-c command</code></h3><p>执行 <em>command</em> 中的 Python 代码。<em>command</em> 可以是一条语句，也可以是用换行符分割的多条语句。</p><p>使用此项时，<code>sys.argv</code> 的首个元素为 <code>-c</code>，并会把当前目录加入至 <code>sys.path</code> 开头。</p><h3 id="m-module-name" tabindex="-1"><a class="header-anchor" href="#m-module-name" aria-hidden="true">#</a> <code>-m module-name</code></h3><p>在 <code>sys.path</code> 中搜索指定的模块，并以 <code>__main__</code> 模块执行其内容。</p><p>该参数是 <em>模块名</em>，请勿输入文件扩展名（<code>.py</code>）。模块名应为有效的绝对 Python 模块名。</p><p>如果给出此选项，<code>sys.argv</code> 的首个元素将为模块文件的完整路径 (在定位模块文件期间，首个元素将设为 &quot;-m&quot;)。 与 <code>-c</code> 选项一样，当前目录将被加入 <code>sys.path</code>的开头。</p><h2 id="编写-python-源代码" tabindex="-1"><a class="header-anchor" href="#编写-python-源代码" aria-hidden="true">#</a> 编写 Python 源代码</h2><p>编写 python 源代码，并使用 <code>.py</code> 作为文件后缀。</p><p>例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># hello.py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="源文件的字符编码" tabindex="-1"><a class="header-anchor" href="#源文件的字符编码" aria-hidden="true">#</a> 源文件的字符编码</h2><p>默认情况下，Python 源码文件的编码是 UTF-8。</p><p>如果不使用默认编码时，则要声明文件的编码，文件的 <em>第一行</em> 要写成特殊的注释，如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: encoding -*-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<em>encoding</em> 就是 Python 支持的编码，比如：<code>gb2313</code>。</p><p>第一行也有例外，源代码以 <code>shebang</code> 开头时，编码声明则要写在第二行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token comment"># -*- coding: gb2313 -*-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,30),u={href:"https://docs.python.org/zh-cn/3/tutorial/interpreter.html#source-code-encoding",target:"_blank",rel:"noopener noreferrer"},h=o(`<h2 id="运行-python" tabindex="-1"><a class="header-anchor" href="#运行-python" aria-hidden="true">#</a> 运行 Python</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python hello.py
<span class="token comment"># 或</span>
python3 hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释" aria-hidden="true">#</a> 代码注释</h2><ol><li>单行注释 以#和空格开头的部分</li><li>多行注释 3 个引号开头，3 个引号结尾</li></ol><p>例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
这里可以写多行注释
这是第二行注释
&quot;&quot;&quot;</span>
<span class="token comment"># 这是单行注释</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="开发工具" tabindex="-1"><a class="header-anchor" href="#开发工具" aria-hidden="true">#</a> 开发工具</h2><ul><li>PyCharm</li><li>VS Code</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
这里可以写多行注释，比如：
Version: 0.1
Author: zhaobc
&quot;&quot;&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world!&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;goodbye, world&#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python day-01-15/day-01/hello.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12);function v(m,b){const i=s("ExternalLinkIcon"),d=s("Replit");return c(),l("div",null,[r,n("p",null,[a("详情："),n("a",u,[a("源文件的字符编码"),e(i)])]),h,e(d,{link:"https://replit.com/@FuckDoctors/python-100-days#day-01-15/day-01/hello.py"})])}const k=t(p,[["render",v],["__file","01.初识Python.html.vue"]]);export{k as default};
