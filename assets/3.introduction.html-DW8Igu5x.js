import{_ as h,c as n,a as s,h as t,f as l,o as k}from"./app-DuI-aTBd.js";const p={};function e(d,i){const a=l("PythonPlayground");return k(),n("div",null,[i[0]||(i[0]=s(`<h1 id="_3-速览" tabindex="-1"><a class="header-anchor" href="#_3-速览"><span>3. 速览</span></a></h1><h2 id="_3-1-python-用作计算器" tabindex="-1"><a class="header-anchor" href="#_3-1-python-用作计算器"><span>3.1 Python 用作计算器</span></a></h2><h3 id="_3-1-1-数字" tabindex="-1"><a class="header-anchor" href="#_3-1-1-数字"><span>3.1.1 数字</span></a></h3><p>除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。</p><h3 id="_3-1-2-字符串" tabindex="-1"><a class="header-anchor" href="#_3-1-2-字符串"><span>3.1.2 字符串</span></a></h3><p>用单引号（&#39;……&#39;）或双引号（&quot;……&quot;）标注的结果相同，可交替使用，例 <code>&quot;doesn&#39;t&quot;</code>，<code>&#39;&quot;Yes,&quot; they said.&#39;</code>。<br> 反斜杠 <code>\\</code> 用于转义，例 <code>&#39;doesn\\&#39;t&#39;</code>。</p><p>字符串字面值可以包含多行。 一种实现方式是使用三重引号：<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>。 字符串中将自动包括行结束符，但也可以在换行的地方添加一个 <code>\\</code> 来避免此情况（避免换行，就是加 <code>\\</code> 后不换行）。 参见以下示例：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">\\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Usage: thingy [OPTIONS]</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    -h                      Display this usage message</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    -H                      Hostname to connect to</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>输出如下（请注意开始的换行符没有被包括在内）：</p><div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>Usage: thingy [OPTIONS]</span></span>
<span class="line"><span>    -h                      Display this usage message</span></span>
<span class="line"><span>    -H                      Hostname to connect to</span></span></code></pre></div><p>字符串可以用 <code>+</code> 拼接，也可以用 <code>*</code> 重复，相邻的两个或多个 字符串字面值 （引号标注的字符）会自动合并。<br> 拼接分隔开的长字符串时，这个功能特别实用。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;un&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;ium&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;unununium&#39;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Py&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;thon&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;Python&#39;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Put several strings within parentheses &#39;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &#39;to have them joined together.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>字符串支持 索引 （下标访问），第一个字符的索引是 0。单字符没有专用的类型，就是长度为一的字符串。<br> 索引还支持负数，用负数索引时，从右边开始计数，注意，-0 和 0 一样，因此，负数索引从 -1 开始。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">word </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;python&quot;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># p</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># n</span></span></code></pre></div><p>除了索引，字符串还支持 切片。索引可以提取单个字符，切片 则提取子字符串，<em>前闭后开</em>。<br> 切片索引的默认值很有用；省略开始索引时，默认值为 0，省略结束索引时，默认为到字符串的结尾。<br> 负数代表从右边开始数。<br> 输出结果包含切片开始，但不包含切片结束。因此，<code>s[:i] + s[i:]</code> 总是等于 <code>s</code>。<br> 索引越界会报错，但是，切片会自动处理越界索引。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># py</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># tho</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># py</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:])     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># on</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:])    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># on</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># IndexError: string index out of range</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># on</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:])    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;&#39;</span></span></code></pre></div><p>Python 字符串不能修改，是 immutable 的。因此，为字符串中某个索引位置赋值会报错。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;J&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # TypeError: &#39;str&#39; object does not support item assignment</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">word[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;py&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # TypeError: &#39;str&#39; object does not support item assignment</span></span></code></pre></div><p>其他补充：</p><ul><li><p><code>len()</code> 返回字符串长度</p></li><li><p><code>str.format()</code> 格式化字符串</p><p>示例：<code>&quot;The sum of 1 + 2 is {0}&quot;.format(1+2)</code>，详情。<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.format" target="_blank" rel="noopener noreferrer">str.format()</a></p></li><li><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#old-string-formatting" target="_blank" rel="noopener noreferrer">printf 风格的字符串格式化</a></p></li></ul><p>试一试：</p>`,21)),t(a,{title:"%E5%AD%97%E7%AC%A6%E4%B8%B2",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoicHJpbnQoXCJcIlwiXFxcblVzYWdlOiB0aGluZ3kgW09QVElPTlNdXG4gICAgLWggICAgICAgICAgICAgICAgICAgICAgRGlzcGxheSB0aGlzIHVzYWdlIG1lc3NhZ2VcbiAgICAtSCAgICAgICAgICAgICAgICAgICAgICBIb3N0bmFtZSB0byBjb25uZWN0IHRvXG5cIlwiXCIpXG5cbnByaW50KDMgKiAndW4nICsgJ2l1bScpICMgJ3VudW51bml1bSdcbnByaW50KCdQeScgJ3Rob24nKSAjICdQeXRob24nXG5wcmludCgnUHV0IHNldmVyYWwgc3RyaW5ncyB3aXRoaW4gcGFyZW50aGVzZXMgJ1xuICAgICAgJ3RvIGhhdmUgdGhlbSBqb2luZWQgdG9nZXRoZXIuJylcblxud29yZCA9IFwicHl0aG9uXCJcbnByaW50KHdvcmRbMF0pICAgICMgcFxucHJpbnQod29yZFstMV0pICAgIyBuXG5cbnByaW50KHdvcmRbMDoyXSkgICAgIyBweVxucHJpbnQod29yZFsyOjVdKSAgICAjIHRob1xucHJpbnQod29yZFs6Ml0pICAgICAjIHB5XG5wcmludCh3b3JkWzQ6XSkgICAgICMgb25cbnByaW50KHdvcmRbLTI6XSkgICAgIyBvblxuI3ByaW50KHdvcmRbNDJdKSAgICAgIyBJbmRleEVycm9yOiBzdHJpbmcgaW5kZXggb3V0IG9mIHJhbmdlXG5wcmludCh3b3JkWzQ6NDJdKSAgICMgb25cbnByaW50KHdvcmRbNDI6XSkgICAgIyAnJ1xuIn0%3D",allow:"cross-origin-isolated"}),i[1]||(i[1]=s(`<h3 id="_3-1-3-列表" tabindex="-1"><a class="header-anchor" href="#_3-1-3-列表"><span>3.1.3 列表</span></a></h3><p>列表 ，是用方括号标注，逗号分隔的一组值。列表 可以包含不同类型的元素，但一般情况下，各个元素的类型相同。<br> 和字符串（及其他内置 sequence 类型）一样，列表也支持索引和切片。<br> 切片操作返回包含请求元素的新列表。<br> 列表还支持合并操作。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">squares </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(squares[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(squares[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 25</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(squares[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:])     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [9, 16, 25] 返回新的列表</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(squares[:])       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [1, 4, 9, 16, 25] 返回列表的浅拷贝</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(squares </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">36</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">49</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [1, 4, 9, 16, 25, 36, 49, 64]</span></span></code></pre></div><p>与 immutable 字符串不同, 列表是 mutable 类型，其内容可以改变。<br><code>append()</code> 方法 可以在列表结尾添加新元素。<br> 为切片赋值可以改变列表大小，甚至清空整个列表。<br> 内置函数 <code>len()</code> 也支持列表。<br> 还可以嵌套列表（创建包含其他列表的列表）。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cubes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">27</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">65</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">125</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># something&#39;s wrong here</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cubes[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 64</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cubes.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> **</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cubes)          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [1, 8, 27, 64, 125, 216]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">letters </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;b&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;c&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;d&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;e&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;f&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">letters[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;C&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;D&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;E&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(letters)        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [&#39;a&#39;, &#39;b&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;f&#39;]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">letters[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []     </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 删除 2:5</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(letters)        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [&#39;a&#39;, &#39;b&#39;, &#39;f&#39;]</span></span></code></pre></div><p>试一试：</p>`,6)),t(a,{title:"%E5%88%97%E8%A1%A8",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoiY3ViZXMgPSBbMSwgOCwgMjcsIDY1LCAxMjVdICAjIHNvbWV0aGluZydzIHdyb25nIGhlcmVcbmN1YmVzWzNdID0gNjRcbmN1YmVzLmFwcGVuZCg2ICoqIDMpXG5wcmludChjdWJlcykgICAgICAgICAgIyBbMSwgOCwgMjcsIDY0LCAxMjUsIDIxNl1cblxubGV0dGVycyA9IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnXVxubGV0dGVyc1syOjVdID0gWydDJywgJ0QnLCAnRSddXG5wcmludChsZXR0ZXJzKSAgICAgICAgIyBbJ2EnLCAnYicsICdDJywgJ0QnLCAnRScsICdmJ11cbmxldHRlcnNbMjo1XSA9IFtdICAgICAjIOWIoOmZpCAyOjVcbnByaW50KGxldHRlcnMpICAgICAgICAjIFsnYScsICdiJywgJ2YnXVxuIn0%3D",allow:"cross-origin-isolated"}),i[2]||(i[2]=s(`<h2 id="_3-2-走向编程的第一步" tabindex="-1"><a class="header-anchor" href="#_3-2-走向编程的第一步"><span>3.2 走向编程的第一步</span></a></h2><p>打印斐波那契数列：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Fibonacci series</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # print(a)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">sep</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;, &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># print 默认带换回，使用 end 改用自己指定的字符</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b, a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b</span></span></code></pre></div><p>试一试：</p>`,4)),t(a,{title:"%E6%89%93%E5%8D%B0%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoiXCJcIlwiXG5GaWJvbmFjY2kgc2VyaWVzXG5cIlwiXCJcblxuYSwgYiA9IDAsIDFcbndoaWxlIGEgPCAxMDpcbiAgIyBwcmludChhKVxuICBwcmludChhLCBzZXAgPSAnLCAnLCBlbmQgPSAnXFxuJykgICAjIHByaW50IOm7mOiupOW4puaNouWbnu%2B8jOS9v%2BeUqCBlbmQg5pS555So6Ieq5bex5oyH5a6a55qE5a2X56ymXG4gIGEsIGIgPSBiLCBhICsgYlxuIn0%3D",allow:"cross-origin-isolated"}),i[3]||(i[3]=s("<p>本例引入的新功能：</p><ul><li>第一行中的 <em>多重赋值</em>：变量 <code>a</code> 和 <code>b</code> 同时获得新值 <code>0</code> 和 <code>1</code>，最后一行又用了一次多重赋值。</li><li><code>while</code> 循环，循环体缩进。</li></ul>",2))])}const g=h(p,[["render",e]]),A=JSON.parse(`{"path":"/notes/backend/python/tutorial/3.introduction.html","title":"3. 速览","lang":"zh-CN","frontmatter":{"category":["笔记","backend"],"tag":["python"],"description":"3. 速览 3.1 Python 用作计算器 3.1.1 数字 除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。 3.1.2 字符串 用单引号（'……'）或双引号（\\"……\\"）标注的结果相同，可交替使用，例 \\"doesn't\\"，'\\"Yes,\\" they said.'。 反斜杠 \\\\ 用于转义，例 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 速览\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-08T13:29:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"],["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/backend/python/tutorial/3.introduction.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"3. 速览"}],["meta",{"property":"og:description","content":"3. 速览 3.1 Python 用作计算器 3.1.1 数字 除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。 3.1.2 字符串 用单引号（'……'）或双引号（\\"……\\"）标注的结果相同，可交替使用，例 \\"doesn't\\"，'\\"Yes,\\" they said.'。 反斜杠 \\\\ 用于转义，例 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-08T13:29:02.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2025-07-08T13:29:02.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.zhaobc.site/rss.xml","title":"赵斌的小站 RSS Feed"}]]},"git":{"createdTime":1677148137000,"updatedTime":1751981342000,"contributors":[{"name":"Zhao Bin","username":"","email":"413853119@qq.com","commits":6}]},"readingTime":{"minutes":4.29,"words":1286},"filePathRelative":"notes/backend/python/tutorial/3.introduction.md","excerpt":"\\n<h2>3.1 Python 用作计算器</h2>\\n<h3>3.1.1 数字</h3>\\n<p>除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。</p>\\n<h3>3.1.2 字符串</h3>\\n<p>用单引号（'……'）或双引号（\\"……\\"）标注的结果相同，可交替使用，例 <code>\\"doesn't\\"</code>，<code>'\\"Yes,\\" they said.'</code>。<br>\\n反斜杠 <code>\\\\</code> 用于转义，例 <code>'doesn\\\\'t'</code>。</p>\\n<p>字符串字面值可以包含多行。 一种实现方式是使用三重引号：<code>\\"\\"\\"...\\"\\"\\"</code> 或 <code>'''...'''</code>。 字符串中将自动包括行结束符，但也可以在换行的地方添加一个 <code>\\\\</code> 来避免此情况（避免换行，就是加 <code>\\\\</code> 后不换行）。 参见以下示例：</p>","autoDesc":true}`);export{g as comp,A as data};
