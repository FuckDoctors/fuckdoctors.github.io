import{_ as t,r as e,c as p,h as a,d as n,o}from"./app-DBcij3H7.js";const c={},i=n(`<h1 id="_3-速览" tabindex="-1"><a class="header-anchor" href="#_3-速览"><span>3. 速览</span></a></h1><h2 id="_3-1-python-用作计算器" tabindex="-1"><a class="header-anchor" href="#_3-1-python-用作计算器"><span>3.1 Python 用作计算器</span></a></h2><h3 id="_3-1-1-数字" tabindex="-1"><a class="header-anchor" href="#_3-1-1-数字"><span>3.1.1 数字</span></a></h3><p>除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。</p><h3 id="_3-1-2-字符串" tabindex="-1"><a class="header-anchor" href="#_3-1-2-字符串"><span>3.1.2 字符串</span></a></h3><p>用单引号（&#39;……&#39;）或双引号（&quot;……&quot;）标注的结果相同，可交替使用，例 <code>&quot;doesn&#39;t&quot;</code>，<code>&#39;&quot;Yes,&quot; they said.&#39;</code>。<br> 反斜杠 <code>\\</code> 用于转义，例 <code>&#39;doesn\\&#39;t&#39;</code>。</p><p>字符串字面值可以包含多行。 一种实现方式是使用三重引号：<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>。 字符串中将自动包括行结束符，但也可以在换行的地方添加一个 <code>\\</code> 来避免此情况（避免换行，就是加 <code>\\</code> 后不换行）。 参见以下示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;\\
Usage: thingy [OPTIONS]
    -h                      Display this usage message
    -H                      Hostname to connect to
&quot;&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下（请注意开始的换行符没有被包括在内）：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>Usage: thingy [OPTIONS]
    -h                      Display this usage message
    -H                      Hostname to connect to
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串可以用 <code>+</code> 拼接，也可以用 <code>*</code> 重复，相邻的两个或多个 字符串字面值 （引号标注的字符）会自动合并。<br> 拼接分隔开的长字符串时，这个功能特别实用。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token string">&#39;un&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;ium&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &#39;unununium&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Py&#39;</span> <span class="token string">&#39;thon&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &#39;Python&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Put several strings within parentheses &#39;</span>
      <span class="token string">&#39;to have them joined together.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串支持 索引 （下标访问），第一个字符的索引是 0。单字符没有专用的类型，就是长度为一的字符串。<br> 索引还支持负数，用负数索引时，从右边开始计数，注意，-0 和 0 一样，因此，负数索引从 -1 开始。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>word <span class="token operator">=</span> <span class="token string">&quot;python&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># p</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了索引，字符串还支持 切片。索引可以提取单个字符，切片 则提取子字符串，<em>前闭后开</em>。<br> 切片索引的默认值很有用；省略开始索引时，默认值为 0，省略结束索引时，默认为到字符串的结尾。<br> 负数代表从右边开始数。<br> 输出结果包含切片开始，但不包含切片结束。因此，<code>s[:i] + s[i:]</code> 总是等于 <code>s</code>。<br> 索引越界会报错，但是，切片会自动处理越界索引。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># tho</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># on</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># on</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># IndexError: string index out of range</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># on</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># &#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 字符串不能修改，是 immutable 的。因此，为字符串中某个索引位置赋值会报错。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;J&#39;</span>       <span class="token comment"># TypeError: &#39;str&#39; object does not support item assignment</span>
word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;py&#39;</span>     <span class="token comment"># TypeError: &#39;str&#39; object does not support item assignment</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其他补充：</p><ul><li><p><code>len()</code> 返回字符串长度</p></li><li><p><code>str.format()</code> 格式化字符串</p><p>示例：<code>&quot;The sum of 1 + 2 is {0}&quot;.format(1+2)</code>，详情。<a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#str.format" target="_blank" rel="noopener noreferrer">str.format()</a></p></li><li><p><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#old-string-formatting" target="_blank" rel="noopener noreferrer">printf 风格的字符串格式化</a></p></li></ul><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">3.1</span>/str-demo.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),l=n(`<h3 id="_3-1-3-列表" tabindex="-1"><a class="header-anchor" href="#_3-1-3-列表"><span>3.1.3 列表</span></a></h3><p>列表 ，是用方括号标注，逗号分隔的一组值。列表 可以包含不同类型的元素，但一般情况下，各个元素的类型相同。<br> 和字符串（及其他内置 sequence 类型）一样，列表也支持索引和切片。<br> 切片操作返回包含请求元素的新列表。<br> 列表还支持合并操作。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 25</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># [9, 16, 25] 返回新的列表</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># [1, 4, 9, 16, 25] 返回列表的浅拷贝</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squares <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># [1, 4, 9, 16, 25, 36, 49, 64]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 immutable 字符串不同, 列表是 mutable 类型，其内容可以改变。<br><code>append()</code> 方法 可以在列表结尾添加新元素。<br> 为切片赋值可以改变列表大小，甚至清空整个列表。<br> 内置函数 <code>len()</code> 也支持列表。<br> 还可以嵌套列表（创建包含其他列表的列表）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>cubes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">]</span>  <span class="token comment"># something&#39;s wrong here</span>
cubes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span>
cubes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cubes<span class="token punctuation">)</span>          <span class="token comment"># [1, 8, 27, 64, 125, 216]</span>

letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span>
letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span>        <span class="token comment"># [&#39;a&#39;, &#39;b&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;f&#39;]</span>
letters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment"># 删除 2:5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span>        <span class="token comment"># [&#39;a&#39;, &#39;b&#39;, &#39;f&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">3.1</span>/list-demo.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),u=n(`<h2 id="_3-2-走向编程的第一步" tabindex="-1"><a class="header-anchor" href="#_3-2-走向编程的第一步"><span>3.2 走向编程的第一步</span></a></h2><p>打印斐波那契数列：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
Fibonacci series
&quot;&quot;&quot;</span>

a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
<span class="token keyword">while</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
  <span class="token comment"># print(a)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">&#39;, &#39;</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>   <span class="token comment"># print 默认带换回，使用 end 改用自己指定的字符</span>
  a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">3.2</span>/fibonacci.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),r=n("<p>本例引入的新功能：</p><ul><li>第一行中的 <em>多重赋值</em>：变量 <code>a</code> 和 <code>b</code> 同时获得新值 <code>0</code> 和 <code>1</code>，最后一行又用了一次多重赋值。</li><li><code>while</code> 循环，循环体缩进。</li></ul>",2);function d(k,m){const s=e("Replit");return o(),p("div",null,[i,a(s,{link:"https://replit.com/@zhaobin/python-tutorial#3.1/str-demo.py"}),l,a(s,{link:"https://replit.com/@zhaobin/python-tutorial#3.1/list-demo.py"}),u,a(s,{link:"https://replit.com/@zhaobin/python-tutorial#3.2/fibonacci.py"}),r])}const h=t(c,[["render",d],["__file","3.introduction.html.vue"]]),v=JSON.parse(`{"path":"/notes/backend/python/tutorial/3.introduction.html","title":"3. 速览","lang":"zh-CN","frontmatter":{"category":["笔记","backend"],"tag":["python"],"description":"3. 速览 3.1 Python 用作计算器 3.1.1 数字 除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。 3.1.2 字符串 用单引号（'……'）或双引号（\\"……\\"）标注的结果相同，可交替使用，例 \\"doesn't\\"，'\\"Yes,\\" they said.'。 反斜杠 \\\\ 用于转义，例 ...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/backend/python/tutorial/3.introduction.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"3. 速览"}],["meta",{"property":"og:description","content":"3. 速览 3.1 Python 用作计算器 3.1.1 数字 除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。 3.1.2 字符串 用单引号（'……'）或双引号（\\"……\\"）标注的结果相同，可交替使用，例 \\"doesn't\\"，'\\"Yes,\\" they said.'。 反斜杠 \\\\ 用于转义，例 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-24T10:25:41.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2023-08-24T10:25:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 速览\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-24T10:25:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"3.1 Python 用作计算器","slug":"_3-1-python-用作计算器","link":"#_3-1-python-用作计算器","children":[{"level":3,"title":"3.1.1 数字","slug":"_3-1-1-数字","link":"#_3-1-1-数字","children":[]},{"level":3,"title":"3.1.2 字符串","slug":"_3-1-2-字符串","link":"#_3-1-2-字符串","children":[]},{"level":3,"title":"3.1.3 列表","slug":"_3-1-3-列表","link":"#_3-1-3-列表","children":[]}]},{"level":2,"title":"3.2 走向编程的第一步","slug":"_3-2-走向编程的第一步","link":"#_3-2-走向编程的第一步","children":[]}],"git":{"createdTime":1677148137000,"updatedTime":1692872741000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":4}]},"readingTime":{"minutes":3.68,"words":1105},"filePathRelative":"notes/backend/python/tutorial/3.introduction.md","localizedDate":"2023年2月23日","excerpt":"\\n<h2>3.1 Python 用作计算器</h2>\\n<h3>3.1.1 数字</h3>\\n<p>除了 int 和 float，Python 还支持其他数字类型，例如 Decimal 或 Fraction。</p>\\n<h3>3.1.2 字符串</h3>\\n<p>用单引号（'……'）或双引号（\\"……\\"）标注的结果相同，可交替使用，例 <code>\\"doesn't\\"</code>，<code>'\\"Yes,\\" they said.'</code>。<br>\\n反斜杠 <code>\\\\</code> 用于转义，例 <code>'doesn\\\\'t'</code>。</p>\\n<p>字符串字面值可以包含多行。 一种实现方式是使用三重引号：<code>\\"\\"\\"...\\"\\"\\"</code> 或 <code>'''...'''</code>。 字符串中将自动包括行结束符，但也可以在换行的地方添加一个 <code>\\\\</code> 来避免此情况（避免换行，就是加 <code>\\\\</code> 后不换行）。 参见以下示例：</p>","autoDesc":true}`);export{h as comp,v as data};
