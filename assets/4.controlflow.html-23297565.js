import{_ as e,r as p,o as t,c as o,d as s,h as a}from"./app-2160562e.js";const c={},i=a(`<h1 id="_4-流程控制" tabindex="-1"><a class="header-anchor" href="#_4-流程控制" aria-hidden="true">#</a> 4. 流程控制</h1><h2 id="_4-1-if-语句" tabindex="-1"><a class="header-anchor" href="#_4-1-if-语句" aria-hidden="true">#</a> 4.1 if 语句</h2><p><code>if</code> 语句包含零个或多个 <code>elif</code> 子句及可选的 <code>else</code> 子句。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;Please enter an integer: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
  x <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Negative changed to zero&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Zero&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Single&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;More&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要把一个值与多个常量进行比较，或者检查特定类型或属性，<code>match</code> 语句更实用。</p><h2 id="_4-2-for-语句" tabindex="-1"><a class="header-anchor" href="#_4-2-for-语句" aria-hidden="true">#</a> 4.2 for 语句</h2><p>Python 的 for 语句不迭代算术递增数值，或是给予用户定义迭代步骤和暂停条件的能力（如 C），而是迭代列表或字符串等任意序列，元素的迭代顺序与在序列中出现的顺序一致。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历集合时修改集合的内容，会很容易生成错误的结果。因此不能直接进行循环，而是应遍历该集合的副本或创建新的集合：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Hans&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;inactive&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赵斌&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">&#39;inactive&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">del</span> users<span class="token punctuation">[</span>user<span class="token punctuation">]</span>

active_users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">:</span>
    active_users<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> status

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\nactive users:&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> user <span class="token keyword">in</span> active_users<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试一试:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token number">4.2</span>/for.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),l=a(`<h2 id="_4-3-range-函数" tabindex="-1"><a class="header-anchor" href="#_4-3-range-函数" aria-hidden="true">#</a> 4.3 range 函数</h2><p>内置函数 <code>range()</code> 常用于遍历数字序列。<br> range 可以不从 0 开始，还可以按指定幅度递增（递增幅度称为 &#39;步进&#39;，支持负数）</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 0 + 1 + 2 + 3 + 4</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [5, 6, 7, 8, 9]</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [0, 3, 6, 9]</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [-10, -40, -70]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>range()</code> 和 <code>len()</code> 组合在一起，可以按索引迭代序列：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Mary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;had&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;little&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lamb&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-循环中的-break、continue-语句及-else-子句" tabindex="-1"><a class="header-anchor" href="#_4-4-循环中的-break、continue-语句及-else-子句" aria-hidden="true">#</a> 4.4 循环中的 break、continue 语句及 else 子句</h2><p>break 语句和 C 中的类似，用于跳出最近的 for 或 while 循环。</p><p>循环语句支持 else 子句；for 循环中，可迭代对象中的元素全部循环完毕，或 while 循环的条件为假时，执行该子句；break 语句终止循环时，不执行该子句。</p><p>请看下面这个查找素数的循环示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">&#39;equals&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> n <span class="token operator">//</span> x<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># loop fell through without finding a factor</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">&#39;is a prime number&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（没错，这段代码就是这么写。仔细看：else 子句属于 for 循环，不属于 if 语句。）</p><p>与 <code>if</code> 语句相比，循环的 <code>else</code> 子句更像 <code>try</code> 的 <code>else</code> 子句： <code>try</code> 的 <code>else</code> 子句在未触发异常时执行，循环的 <code>else</code> 子句则在未运行 <code>break</code> 时执行。<code>try</code> 语句和异常详见 异常的处理。</p><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token number">4.4</span>/else.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14);function u(r,d){const n=p("Replit");return t(),o("div",null,[i,s(n,{link:"https://replit.com/@FuckDoctors/python-tutorial#4.2/for.py"}),l,s(n,{link:"https://replit.com/@FuckDoctors/python-tutorial#4.4/else.py"})])}const v=e(c,[["render",u],["__file","4.controlflow.html.vue"]]);export{v as default};
