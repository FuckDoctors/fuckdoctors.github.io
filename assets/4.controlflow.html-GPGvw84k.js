import{_ as c,r as o,o as i,c as l,d as s,a as t,b as a,h as n}from"./app-CFtgncbC.js";const u={},r=n(`<h1 id="_4-流程控制" tabindex="-1"><a class="header-anchor" href="#_4-流程控制"><span>4. 流程控制</span></a></h1><h2 id="_4-1-if-语句" tabindex="-1"><a class="header-anchor" href="#_4-1-if-语句"><span>4.1 if 语句</span></a></h2><p><code>if</code> 语句包含零个或多个 <code>elif</code> 子句及可选的 <code>else</code> 子句。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;Please enter an integer: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
  x <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Negative changed to zero&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Zero&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Single&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;More&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要把一个值与多个常量进行比较，或者检查特定类型或属性，<code>match</code> 语句更实用。</p><h2 id="_4-2-for-语句" tabindex="-1"><a class="header-anchor" href="#_4-2-for-语句"><span>4.2 for 语句</span></a></h2><p>Python 的 for 语句不迭代算术递增数值，或是给予用户定义迭代步骤和暂停条件的能力（如 C），而是迭代列表或字符串等任意序列，元素的迭代顺序与在序列中出现的顺序一致。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>遍历集合时修改集合的内容，会很容易生成错误的结果。因此不能直接进行循环，而是应遍历该集合的副本或创建新的集合：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Hans&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;inactive&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赵斌&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">}</span>

<span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">&#39;inactive&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">del</span> users<span class="token punctuation">[</span>user<span class="token punctuation">]</span>

active_users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> user<span class="token punctuation">,</span> status <span class="token keyword">in</span> users<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> status <span class="token operator">==</span> <span class="token string">&#39;active&#39;</span><span class="token punctuation">:</span>
    active_users<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> status

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\nactive users:&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> user <span class="token keyword">in</span> active_users<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试一试:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">4.2</span>/for.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),d=n(`<h2 id="_4-3-range-函数" tabindex="-1"><a class="header-anchor" href="#_4-3-range-函数"><span>4.3 range 函数</span></a></h2><p>内置函数 <code>range()</code> 常用于遍历数字序列。<br> range 可以不从 0 开始，还可以按指定幅度递增（递增幅度称为 &#39;步进&#39;，支持负数）</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 0 + 1 + 2 + 3 + 4</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [5, 6, 7, 8, 9]</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [0, 3, 6, 9]</span>

<span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># [-10, -40, -70]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>range()</code> 和 <code>len()</code> 组合在一起，可以按索引迭代序列：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Mary&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;had&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;little&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lamb&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-4-循环中的-break、continue-语句及-else-子句" tabindex="-1"><a class="header-anchor" href="#_4-4-循环中的-break、continue-语句及-else-子句"><span>4.4 循环中的 break、continue 语句及 else 子句</span></a></h2><p>break 语句和 C 中的类似，用于跳出最近的 for 或 while 循环。</p><p>循环语句支持 else 子句；for 循环中，可迭代对象中的元素全部循环完毕，或 while 循环的条件为假时，执行该子句；break 语句终止循环时，不执行该子句。</p><p>请看下面这个查找素数的循环示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">&#39;equals&#39;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> n <span class="token operator">//</span> x<span class="token punctuation">)</span>
      <span class="token keyword">break</span>
  <span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># loop fell through without finding a factor</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">&#39;is a prime number&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（没错，这段代码就是这么写。仔细看：else 子句属于 for 循环，不属于 if 语句。）</p><p>与 <code>if</code> 语句相比，循环的 <code>else</code> 子句更像 <code>try</code> 的 <code>else</code> 子句： <code>try</code> 的 <code>else</code> 子句在未触发异常时执行，循环的 <code>else</code> 子句则在未运行 <code>break</code> 时执行。<code>try</code> 语句和异常详见 异常的处理。</p><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">4.4</span>/else.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,14),k=n(`<h2 id="_4-5-pass" tabindex="-1"><a class="header-anchor" href="#_4-5-pass"><span>4.5 pass</span></a></h2><p>pass 语句不执行任何动作。语法上需要一个语句，但程序毋需执行任何动作时，可以使用该语句。</p><p>这常用于创建一个最小的类：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyEmptyClass</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>pass 还可用作函数或条件语句体的占位符，让你保持在更抽象的层次进行思考。pass 会被默默地忽略：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">initlog</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>  <span class="token comment"># Remember to implement this!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-6-match-语句" tabindex="-1"><a class="header-anchor" href="#_4-6-match-语句"><span>4.6 match 语句</span></a></h2><p><code>match</code> 语句接受一个表达式并把它的值与一个或多个 <code>case</code> 块给出的一系列模式进行比较。<br> 这表面上像 C、Java 或 JavaScript（以及许多其他程序设计语言）中的 switch 语句，但其实它更像 Rust 或 Haskell 中的模式匹配。<br><strong>只有第一个匹配的模式会被执行</strong>，并且它还可以提取值的组成部分（序列的元素或对象的属性）赋给变量。</p><p>最简单的形式是将一个主语值与一个或多个字面值进行比较：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">http_error</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">match</span> status<span class="token punctuation">:</span>
    <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Bad request&quot;</span>
    <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Not found&quot;</span>
    <span class="token keyword">case</span> <span class="token number">418</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token string">&quot;I&#39;m a teapot&quot;</span>
    <span class="token keyword">case</span> <span class="token number">401</span> <span class="token operator">|</span> <span class="token number">403</span><span class="token punctuation">:</span> <span class="token comment"># 你可以使用 | （“ or ”）在一个模式中组合几个字面值:</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Not allowed&quot;</span>
    <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token string">&quot;Something&#39;s wrong with the internet&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意最后一个代码块：“变量名” <code>_</code> 被作为 <em>通配符</em> 并必定会匹配成功。如果没有 case 匹配成功，则不会执行任何分支。</p><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">4.6</span>/match-http-error.py <span class="token number">400</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),v=n(`<p>形如解包赋值的模式，可用于绑定变量：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># point is an (x, y) tuple</span>
<span class="token keyword">match</span> point<span class="token punctuation">:</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Origin&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Y=</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;X=</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;X=</span><span class="token interpolation"><span class="token punctuation">{</span>x<span class="token punctuation">}</span></span><span class="token string">, Y=</span><span class="token interpolation"><span class="token punctuation">{</span>y<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;Not a point&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum
<span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
  RED <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>
  GREEN <span class="token operator">=</span> <span class="token string">&#39;green&#39;</span>
  BLUE <span class="token operator">=</span> <span class="token string">&#39;blue&#39;</span>

color <span class="token operator">=</span> COLOR<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Enter your choice of &#39;red&#39;, &#39;green&#39; or &#39;blue&#39;: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">match</span> color<span class="token punctuation">:</span>
  <span class="token keyword">case</span> COLOR<span class="token punctuation">.</span>RED<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I see red!&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> COLOR<span class="token punctuation">.</span>GREEN<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Grass is green.&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">case</span> COLOR<span class="token punctuation">.</span>BLUE<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m feeling the blues :(&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python <span class="token number">4.6</span>/match-point.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),m=n(`<h2 id="_4-7-定义函数" tabindex="-1"><a class="header-anchor" href="#_4-7-定义函数"><span>4.7 定义函数</span></a></h2><p>下列代码创建一个可以输出限定数值内的斐波那契数列函数：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># write Fibonacci series up to n</span>
  <span class="token triple-quoted-string string">&quot;&quot;&quot;Print a Fibonacci series up to n.&quot;&quot;&quot;</span>
  a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
  <span class="token keyword">while</span> a <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
    a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Now call the function we just defined:</span>
fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>定义</em> 函数使用关键字 <code>def</code>，后跟函数名与括号内的形参列表。函数语句从下一行开始，并且必须缩进。</p>`,4),b={href:"https://docs.python.org/zh-cn/3/tutorial/controlflow.html#tut-docstrings",target:"_blank",rel:"noopener noreferrer"},h=n(`<p><code>fib</code> 不返回值，因此，其他语言不把它当作函数，而是当作过程。事实上，没有 return 语句的函数也返回值，只不过这个值比较是 <code>None</code> （是一个内置名称）。一般来说，解释器不会输出单独的返回值 None ，如需查看该值，可以使用 <code>print()</code>：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>fib<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-8-函数详解" tabindex="-1"><a class="header-anchor" href="#_4-8-函数详解"><span>4.8 函数详解</span></a></h2><p>函数定义支持可变数量的参数。这里列出三种可以组合使用的形式。</p><h3 id="_4-8-1-默认参数" tabindex="-1"><a class="header-anchor" href="#_4-8-1-默认参数"><span>4.8.1 默认参数</span></a></h3><p>为参数指定默认值是非常有用的方式。调用函数时，可以使用比定义时更少的参数，例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">ask_ok</span><span class="token punctuation">(</span>prompt<span class="token punctuation">,</span> retries<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> reminder<span class="token operator">=</span><span class="token string">&quot;Please try again!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    ok <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
    <span class="token keyword">if</span> ok <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ye&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">if</span> ok <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&quot;N&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;no&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nop&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nope&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token keyword">return</span> <span class="token boolean">False</span>
    retries <span class="token operator">=</span> retries <span class="token operator">-</span> <span class="token number">1</span>
    <span class="token keyword">if</span> retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
      <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;invalid user response&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>reminder<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数可以用以下方式调用：</p><ul><li>只给出必选参数<br><code>ask_ok(&#39;Do you really want to quit?&#39;)</code></li><li>给出一个可选参数<br><code>ask_ok(&#39;OK to overwrite the file?&#39;, 2)</code></li><li>给出所有参数<br><code>ask_ok(&#39;OK to overwrite the file?&#39;, 2, &#39;Come on, only yes or no!&#39;)</code></li></ul><p>本例还使用了关键字 <code>in</code> ，用于确认序列中是否包含某个值。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>重要警告： 默认值只计算一次。默认值为列表、字典或类实例等可变对象时，会产生与该规则不同的结果。</p></div><p>例如，下面的函数会累积后续调用时传递的参数：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">5</span>

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>

i <span class="token operator">=</span> <span class="token number">6</span>
f<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 输出： 5</span>

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token keyword">return</span> L

<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 输出结果：</span>
<span class="token comment"># [1]</span>
<span class="token comment"># [1, 2]</span>
<span class="token comment"># [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不想在后续调用之间共享默认值时，应以如下方式编写函数：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> L <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token keyword">return</span> L
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-2-关键字参数" tabindex="-1"><a class="header-anchor" href="#_4-8-2-关键字参数"><span>4.8.2 关键字参数</span></a></h3>`,16),g=t("code",null,"kwarh=value",-1),y={href:"https://docs.python.org/zh-cn/3/glossary.html#term-keyword-argument",target:"_blank",rel:"noopener noreferrer"},w=n(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">parrot</span><span class="token punctuation">(</span>voltage<span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">&#39;a stiff&#39;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;voom&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">&#39;Norwegian Blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- This parrot wouldn&#39;t&quot;</span><span class="token punctuation">,</span> action<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;if you put&quot;</span><span class="token punctuation">,</span> voltage<span class="token punctuation">,</span> <span class="token string">&quot;volts through it.&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- Lovely plumage, the&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-- It&#39;s&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数接受一个必选参数（voltage）和三个可选参数（state, action 和 type）。该函数可用下列方式调用：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>parrot<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>                                          <span class="token comment"># 1 positional argument （位置参数）</span>
parrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>                                  <span class="token comment"># 1 keyword argument （关键字参数）</span>
parrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;VOOOOOM&#39;</span><span class="token punctuation">)</span>             <span class="token comment"># 2 keyword arguments （关键字参数）</span>
parrot<span class="token punctuation">(</span>action<span class="token operator">=</span><span class="token string">&#39;VOOOOOM&#39;</span><span class="token punctuation">,</span> voltage<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">)</span>             <span class="token comment"># 2 keyword arguments （关键字参数）</span>
parrot<span class="token punctuation">(</span><span class="token string">&#39;a million&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bereft of life&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jump&#39;</span><span class="token punctuation">)</span>         <span class="token comment"># 3 positional arguments （位置参数）</span>
parrot<span class="token punctuation">(</span><span class="token string">&#39;a thousand&#39;</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">&#39;pushing up the daisies&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 1 positional, 1 keyword （位置参数，关键字参数）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下调用函数的方式都无效：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>parrot<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment"># required argument missing</span>
parrot<span class="token punctuation">(</span>voltage<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token string">&#39;dead&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># non-keyword argument after a keyword argument</span>
parrot<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> voltage<span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">)</span>     <span class="token comment"># duplicate value for the same argument</span>
parrot<span class="token punctuation">(</span>actor<span class="token operator">=</span><span class="token string">&#39;John Cleese&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># unknown keyword argument</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>函数调用时，关键字参数必须跟在位置参数后面。</li><li>所有传递的关键字参数都必须匹配一个函数接受的参数，关键字参数的顺序并不重要。</li></ul><h3 id="_4-8-3-特殊参数" tabindex="-1"><a class="header-anchor" href="#_4-8-3-特殊参数"><span>4.8.3 特殊参数</span></a></h3><p>默认情况下，参数可以按位置或显式关键字传递给 Python 函数。为了让代码易读、高效，最好限制参数的传递方式，这样，开发者只需查看函数定义，即可确定参数项是仅按位置、按位置或关键字，还是仅按关键字传递。</p><p>函数定义如下：</p><div class="language-txt line-numbers-mode" data-ext="txt" data-title="txt"><pre class="language-txt"><code>def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
      -----------    ----------     ----------
        |             |                  |
        |        Positional or keyword   |
        |                                - Keyword only
         -- Positional only
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/</code> 和 <code>*</code> 是可选的。这些符号表明形参如何把参数值传递给函数：位置、位置或关键字、关键字。关键字形参也叫作命名形参。</p><h4 id="_4-8-3-1-位置或关键字参数" tabindex="-1"><a class="header-anchor" href="#_4-8-3-1-位置或关键字参数"><span>4.8.3.1 位置或关键字参数</span></a></h4><p>函数定义中未使用 <code>/</code> 和 <code>*</code> 时，参数可以按位置或关键字传递给函数。</p><h4 id="_4-8-3-2-仅位置参数" tabindex="-1"><a class="header-anchor" href="#_4-8-3-2-仅位置参数"><span>4.8.3.2 仅位置参数</span></a></h4><p>此处再介绍一些细节，特定形参可以标记为 仅限位置。仅限位置 时，形参的顺序很重要，且这些形参不能用关键字传递。仅限位置形参应放在 <code>/</code> （正斜杠）前。<code>/</code> 用于在逻辑上分割仅限位置形参与其它形参。如果函数定义中没有 /，则表示没有仅限位置形参。</p><p>/ 后可以是 位置或关键字 或 仅限关键字 形参。</p><h4 id="_4-8-3-3-仅限关键字参数" tabindex="-1"><a class="header-anchor" href="#_4-8-3-3-仅限关键字参数"><span>4.8.3.3 仅限关键字参数</span></a></h4><p>把形参标记为 仅限关键字，表明必须以关键字参数形式传递该形参，应在参数列表中第一个 仅限关键字 形参前添加 <code>*</code>。</p><h3 id="_4-8-4-任意实参列表" tabindex="-1"><a class="header-anchor" href="#_4-8-4-任意实参列表"><span>4.8.4 任意实参列表</span></a></h3><p>调用函数时，使用任意数量的实参是最少见的选项。这些实参包含在元组中（详见 元组和序列 ）。在可变数量的实参之前，可能有若干个普通参数：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">write_multiple_items</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> separator<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>separator<span class="token punctuation">.</span>join<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>variadic 参数用于采集传递给函数的所有剩余参数，因此，它们通常在形参列表的末尾。<code>*args</code> 形参后的任何形式参数只能是仅限关键字参数，即只能用作关键字参数，不能用作位置参数：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> sep<span class="token punctuation">.</span>join<span class="token punctuation">(</span>args<span class="token punctuation">)</span>

concat<span class="token punctuation">(</span><span class="token string">&quot;earth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mars&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;venus&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;earth/mars/venus&#39;</span>
concat<span class="token punctuation">(</span><span class="token string">&quot;earth&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mars&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;venus&quot;</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;earth.mars.venus&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function f(_,q){const e=o("Replit"),p=o("ExternalLinkIcon");return i(),l("div",null,[r,s(e,{link:"https://replit.com/@zhaobin/python-tutorial#4.2/for.py"}),d,s(e,{link:"https://replit.com/@zhaobin/python-tutorial#4.4/else.py"}),k,s(e,{link:"https://replit.com/@zhaobin/python-tutorial#4.6/match-http-error.py"}),v,s(e,{link:"https://replit.com/@zhaobin/python-tutorial#4.6/match-point.py"}),m,t("p",null,[a("函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 docstring，详见 "),t("a",b,[a("文档字符串"),s(p)]),a("。")]),h,t("p",null,[g,a(" 形式的"),t("a",y,[a("关键字参数"),s(p)]),a("也可以用于调用参数。函数示例如下：")]),w])}const N=c(u,[["render",f],["__file","4.controlflow.html.vue"]]),O=JSON.parse(`{"path":"/notes/backend/python/tutorial/4.controlflow.html","title":"4. 流程控制","lang":"zh-CN","frontmatter":{"category":["笔记","backend"],"tag":["python"],"description":"4. 流程控制 4.1 if 语句 if 语句包含零个或多个 elif 子句及可选的 else 子句。 如果要把一个值与多个常量进行比较，或者检查特定类型或属性，match 语句更实用。 4.2 for 语句 Python 的 for 语句不迭代算术递增数值，或是给予用户定义迭代步骤和暂停条件的能力（如 C），而是迭代列表或字符串等任意序列，元素的迭代...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/backend/python/tutorial/4.controlflow.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"4. 流程控制"}],["meta",{"property":"og:description","content":"4. 流程控制 4.1 if 语句 if 语句包含零个或多个 elif 子句及可选的 else 子句。 如果要把一个值与多个常量进行比较，或者检查特定类型或属性，match 语句更实用。 4.2 for 语句 Python 的 for 语句不迭代算术递增数值，或是给予用户定义迭代步骤和暂停条件的能力（如 C），而是迭代列表或字符串等任意序列，元素的迭代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T14:41:24.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2024-03-23T14:41:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. 流程控制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-23T14:41:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"4.1 if 语句","slug":"_4-1-if-语句","link":"#_4-1-if-语句","children":[]},{"level":2,"title":"4.2 for 语句","slug":"_4-2-for-语句","link":"#_4-2-for-语句","children":[]},{"level":2,"title":"4.3 range 函数","slug":"_4-3-range-函数","link":"#_4-3-range-函数","children":[]},{"level":2,"title":"4.4 循环中的 break、continue 语句及 else 子句","slug":"_4-4-循环中的-break、continue-语句及-else-子句","link":"#_4-4-循环中的-break、continue-语句及-else-子句","children":[]},{"level":2,"title":"4.5 pass","slug":"_4-5-pass","link":"#_4-5-pass","children":[]},{"level":2,"title":"4.6 match 语句","slug":"_4-6-match-语句","link":"#_4-6-match-语句","children":[]},{"level":2,"title":"4.7 定义函数","slug":"_4-7-定义函数","link":"#_4-7-定义函数","children":[]},{"level":2,"title":"4.8 函数详解","slug":"_4-8-函数详解","link":"#_4-8-函数详解","children":[{"level":3,"title":"4.8.1 默认参数","slug":"_4-8-1-默认参数","link":"#_4-8-1-默认参数","children":[]},{"level":3,"title":"4.8.2 关键字参数","slug":"_4-8-2-关键字参数","link":"#_4-8-2-关键字参数","children":[]},{"level":3,"title":"4.8.3 特殊参数","slug":"_4-8-3-特殊参数","link":"#_4-8-3-特殊参数","children":[]},{"level":3,"title":"4.8.4 任意实参列表","slug":"_4-8-4-任意实参列表","link":"#_4-8-4-任意实参列表","children":[]}]}],"git":{"createdTime":1711204884000,"updatedTime":1711204884000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":8.64,"words":2592},"filePathRelative":"notes/backend/python/tutorial/4.controlflow.md","localizedDate":"2024年3月23日","excerpt":"\\n<h2>4.1 if 语句</h2>\\n<p><code>if</code> 语句包含零个或多个 <code>elif</code> 子句及可选的 <code>else</code> 子句。</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code>x <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">int</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">input</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Please enter an integer: '</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">if</span> x <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n  x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span>\\n  <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Negative changed to zero'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">elif</span> x <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Zero'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">elif</span> x <span class=\\"token operator\\">==</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Single'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n  <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'More'</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{N as comp,O as data};
