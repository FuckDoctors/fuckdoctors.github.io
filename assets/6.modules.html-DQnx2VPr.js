import{_ as n,c as h,a as i,h as t,f as e,o as l}from"./app-poPtaMJY.js";const p={};function k(r,s){const a=e("PythonPlayground");return l(),h("div",null,[s[0]||(s[0]=i(`<h1 id="_6-模块" tabindex="-1"><a class="header-anchor" href="#_6-模块"><span>6. 模块</span></a></h1><p>模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 <code>.py</code> 。在模块内部，通过全局变量 <code>__name__</code> 可以获取模块名（即字符串）。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="fibo.py"><span>fibo.py</span></div><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 斐波那契数列模块</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;&quot;&quot;Write Fibonacci series up to n.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b, a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;&quot;&quot;Return Fibonacci series up to n.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    result.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b, a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result</span></span></code></pre></div></div><p>现在，进入 Python 解释器，用以下命令导入该模块：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo</span></span></code></pre></div><p>此操作不会直接把 <code>fibo</code> 中定义的函数名称添加到当前 <a href="https://docs.python.org/zh-cn/3.13/glossary.html#term-namespace" target="_blank" rel="noopener noreferrer">namespace</a> 中（请参阅 Python <a href="https://docs.python.org/zh-cn/3.13/tutorial/classes.html#tut-scopes" target="_blank" rel="noopener noreferrer">作用域和命名空间</a> 了解详情）；<br> 它只是将模块名称 fibo 添加到那里。</p><p>使用该模块名称你可以访问其中的函数:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fibo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fibo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fibo.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__name__</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;fibo&#39;</span></span></code></pre></div><p>如果经常使用某个函数，可以把它赋值给局部变量：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fib </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.fib</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377</span></span></code></pre></div><p>试一试：</p>`,11)),t(a,{title:"%E6%A8%A1%E5%9D%97%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoiaW1wb3J0IGZpYm9cblxuZmliby5maWIoMTAwMClcblxucHJpbnQoZmliby5maWIyKDEwMCkpXG5cbnByaW50KGZpYm8uX19uYW1lX18pXG4iLCJmaWJvLnB5IjoiIyDmlpDms6LpgqPlpZHmlbDliJfmqKHlnZdcblxuZGVmIGZpYihuKTpcbiAgXCJcIlwiV3JpdGUgRmlib25hY2NpIHNlcmllcyB1cCB0byBuLlwiXCJcIlxuICBhLCBiID0gMCwgMVxuICB3aGlsZSBhIDwgbjpcbiAgICBwcmludChhLCBlbmQ9JyAnKVxuICAgIGEsIGIgPSBiLCBhICsgYlxuICBwcmludCgpXG5cbmRlZiBmaWIyKG4pOlxuICBcIlwiXCJSZXR1cm4gRmlib25hY2NpIHNlcmllcyB1cCB0byBuLlwiXCJcIlxuICByZXN1bHQgPSBbXVxuICBhLCBiID0gMCwgMVxuICB3aGlsZSBhIDwgbjpcbiAgICByZXN1bHQuYXBwZW5kKGEpXG4gICAgYSwgYiA9IGIsIGEgKyBiXG4gIHJldHVybiByZXN1bHRcbiJ9",allow:"cross-origin-isolated"}),s[1]||(s[1]=i(`<h2 id="_6-1-模块详解" tabindex="-1"><a class="header-anchor" href="#_6-1-模块详解"><span>6.1. 模块详解</span></a></h2><p>模块包含可执行语句及函数定义。这些语句用于初始化模块，且仅在 <code>import</code> 语句 第一次 遇到模块名时执行。<br> 文件作为脚本运行时，也会执行这些语句。</p><p>每个模块都有自己的私有命名空间，它会被用作模块中定义的所有函数的全局命名空间。<br> 因此，模块作者可以在模块内使用全局变量而不必担心与用户的全局变量发生意外冲突。<br> 另一方面，如果您知道自己在做什么，您可以使用与引用模块函数相同的语法去访问一个模块的全局变量，即 <code>modname.itemname</code> 。</p><p>模块可以导入其他模块。根据惯例可以将所有 <code>import</code> 语句都放在模块（或者也可以说是脚本）的开头但这并非强制要求。<br> 如果被放置于一个模块的最高层级，则被导入的模块名称会被添加到该模块的全局命名空间。</p><p>还有一种 import 语句的变化形式可以将来自某个模块的名称直接导入到导入方模块的命名空间中。例如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib, fib2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377</span></span></code></pre></div><p>这条语句不会将所导入的模块的名称引入到局部命名空间中（因此在本示例中，<code>fibo</code> 将是未定义的名称）。</p><p>模块名后使用 <code>as</code> 时，直接把 <code>as</code> 后的名称与导入模块绑定。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fib.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377</span></span></code></pre></div><p><code>from</code> 中也可以使用这种方式，效果类似：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibonacci</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">fibonacci</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>为了保证运行效率，每次解释器会话只导入一次模块。<br> 如果更改了模块内容，必须重启解释器；<br> 仅交互测试一个模块时，也可以使用 <a href="https://docs.python.org/zh-cn/3.13/library/importlib.html#importlib.reload" target="_blank" rel="noopener noreferrer"><code>importlib.reload()</code></a>，例如 <code>import importlib; importlib.reload(modulename)</code>。</p></div><h3 id="_6-1-1-以脚本方式执行模块" tabindex="-1"><a class="header-anchor" href="#_6-1-1-以脚本方式执行模块"><span>6.1.1. 以脚本方式执行模块</span></a></h3><p>可以用以下方式运行 Python 模块：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fibo.py</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">argument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;</span></span></code></pre></div><p>这项操作将执行模块里的代码，和导入模块一样，但会把 <code>__name__</code> 赋值为 <code>&quot;__main__&quot;</code>。</p><p>也就是把下列代码添加到模块末尾：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;__main__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">  fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys.argv[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]))</span></span></code></pre></div><p>这个文件既能被用作脚本，又能被用作一个可供导入的模块，因为解析命令行参数的那两行代码只有在模块作为“main”文件执行时才会运行：</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fibo.py</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 50</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0 1 1 2 3 5 8 13 21 34</span></span></code></pre></div><p>当这个模块被导入到其它模块时，那两行代码不运行。</p><p>这常用于为模块提供一个便捷的用户接口，或用于测试（把模块作为执行测试套件的脚本运行）。</p><h3 id="_6-1-2-模块搜索路径" tabindex="-1"><a class="header-anchor" href="#_6-1-2-模块搜索路径"><span>6.1.2. 模块搜索路径</span></a></h3><p>当导入一个名为 <code>spam</code> 的模块时，解释器首先会搜索具有该名称的内置模块。这些模块的名称在 <a href="https://docs.python.org/zh-cn/3.13/library/sys.html#sys.builtin_module_names" target="_blank" rel="noopener noreferrer">sys.builtin_module_names</a> 中列出。<br> 如果未找到，它将在变量 <a href="https://docs.python.org/zh-cn/3.13/library/sys.html#sys.path" target="_blank" rel="noopener noreferrer">sys.path</a> 所给出的目录列表中搜索名为 <code>spam.py</code> 的文件。<br><a href="https://docs.python.org/zh-cn/3.13/library/sys.html#sys.path" target="_blank" rel="noopener noreferrer">sys.path</a> 是从这些位置初始化的:</p><ul><li>被命令行直接运行的脚本所在的目录（或未指定文件时的当前目录）。</li><li><a href="https://docs.python.org/zh-cn/3.13/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener noreferrer">PYTHONPATH</a> （目录列表，与 <code>shell</code> 变量 <code>PATH</code> 的语法一样）。</li><li>依赖安装的默认值（按照惯例包括一个 <code>site-packages</code> 目录，由 <code>site</code> 模块处理）。</li></ul><p>更多细节请参阅 <a href="https://docs.python.org/zh-cn/3.13/library/sys_path_init.html#sys-path-init" target="_blank" rel="noopener noreferrer"><code>sys.path</code> 模块搜索路径的初始化</a>。</p><p>初始化后，Python 程序可以更改 <code>sys.path</code>。脚本所在的目录先于标准库所在的路径被搜索。<br> 这意味着，脚本所在的目录如果有和标准库同名的文件，那么加载的是该目录里的，而不是标准库的。<br> 这一般是一个错误，除非这样的替换是你有意为之。详见 <a href="https://docs.python.org/zh-cn/3.13/tutorial/modules.html#tut-standardmodules" target="_blank" rel="noopener noreferrer">标准模块</a>。</p><h3 id="_6-1-3-已编译的-python-文件" tabindex="-1"><a class="header-anchor" href="#_6-1-3-已编译的-python-文件"><span>6.1.3. 已编译的 Python 文件</span></a></h3><p>为了快速加载模块，Python 把模块的编译版本缓存在 <code>__pycache__</code> 目录中，文件名为 <code>module.version.pyc</code>，<code>version</code> 对编译文件格式进行编码，一般是 Python 的版本号。<br> 例如，CPython 的 3.3 发行版中，<code>spam.py</code> 的编译版本缓存为 <code>__pycache__/spam.cpython-33.pyc</code>。这种命名惯例让不同 Python 版本编译的模块可以共存。</p><p>Python 在两种情况下不检查缓存。</p><ol><li>从命令行直接载入的模块，每次都会重新编译，且不储存编译结果；</li><li>没有源模块，就不会检查缓存。</li></ol><p>为了让一个库能以隐藏源代码的形式分发（通过将所有源代码变为编译后的版本），编译后的模块必须放在源目录而非缓存目录中，并且源目录绝不能包含同名的未编译的源模块。</p><p>给专业人士的一些小建议：</p><ul><li>在 Python 命令中使用 <a href="https://docs.python.org/zh-cn/3.13/using/cmdline.html#cmdoption-O" target="_blank" rel="noopener noreferrer"><code>-O</code></a> 或 <a href="https://docs.python.org/zh-cn/3.13/using/cmdline.html#cmdoption-OO" target="_blank" rel="noopener noreferrer"><code>-OO</code></a> 开关，可以减小编译模块的大小。<code>-O</code> 去除断言语句，<code>-OO</code> 去除断言语句和 <code>__doc__</code> 字符串。<br> 有些程序可能依赖于这些内容，因此，没有十足的把握，不要使用这两个选项。“优化过的”模块带有 <code>opt-</code> 标签，并且文件通常会一小些。将来的发行版或许会改进优化的效果。</li><li>从 <code>.pyc</code> 文件读取的程序不比从 <code>.py</code> 读取的执行速度快，<code>.pyc</code> 文件只是加载速度更快。</li><li><a href="https://docs.python.org/zh-cn/3.13/library/compileall.html#module-compileall" target="_blank" rel="noopener noreferrer"><code>compileall</code></a> 模块可以为一个目录下的所有模块创建 <code>.pyc</code> 文件。</li></ul><h2 id="_6-2-标准模块" tabindex="-1"><a class="header-anchor" href="#_6-2-标准模块"><span>6.2. 标准模块</span></a></h2><p>Python 自带一个标准模块的库，它在 Python 库参考（此处以下称为&quot;库参考&quot; ）里另外描述。<br> 一些模块是内嵌到解释器里面的， 它们给一些虽并非语言核心但却内嵌的操作提供接口，要么是为了效率，要么是给操作系统基础操作例如系统调入提供接口。<br> 一个特别值得注意的模块 <a href="https://docs.python.org/zh-cn/3.13/library/sys.html#module-sys" target="_blank" rel="noopener noreferrer"><code>sys</code></a>，它被内嵌到每一个 Python 解释器中。<code>sys.ps1</code> 和 <code>sys.ps2</code> 变量定义了一些字符，它们可以用作主提示符和辅助提示符:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.ps1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;&gt;&gt;&gt; &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.ps2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &#39;... &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.ps1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;C&gt; &#39;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># C&gt; print(&#39;Yuck!&#39;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Yuck!</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># C&gt;</span></span></code></pre></div><p>只有解释器用于交互模式时，才定义这两个变量。</p><p>变量 <code>sys.path</code> 是字符串列表，用于确定解释器的模块搜索路径。该变量以环境变量 <code>PYTHONPATH</code> 提取的默认路径进行初始化，如未设置 <code>PYTHONPATH</code>，则使用内置的默认路径。<br> 可以用标准列表操作修改该变量：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;/ufs/guido/lib/python&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><h2 id="_6-3-dir-函数" tabindex="-1"><a class="header-anchor" href="#_6-3-dir-函数"><span>6.3. <code>dir()</code> 函数</span></a></h2><p>内置函数 <a href="https://docs.python.org/zh-cn/3.13/library/functions.html#dir" target="_blank" rel="noopener noreferrer"><code>dir()</code></a> 用于查找模块定义的名称。返回结果是经过排序的字符串列表：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo, sys</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fibo)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [&#39;__name__&#39;, &#39;fib&#39;, &#39;fib2&#39;]</span></span></code></pre></div><p>没有参数时，<code>dir()</code> 列出当前已定义的名称：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">fib </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo.fib</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [&#39;__builtins__&#39;, &#39;__name__&#39;, &#39;a&#39;, &#39;fib&#39;, &#39;fibo&#39;, &#39;sys&#39;]</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [&#39;__breakpointhook__&#39;, &#39;__displayhook__&#39;, &#39;__doc__&#39;, &#39;__excepthook__&#39;, ...]</span></span></code></pre></div><p>注意它列出所有类型的名称：变量，模块，函数，……。</p><p><code>dir()</code> 不会列出内置函数和变量的名称。这些内容的定义在标准模块 <a href="https://docs.python.org/zh-cn/3.13/library/builtins.html#module-builtins" target="_blank" rel="noopener noreferrer"><code>builtins</code></a> 中：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> builtins</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(builtins)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;, &#39;BaseException&#39;, ...]</span></span></code></pre></div><h2 id="_6-4-包" tabindex="-1"><a class="header-anchor" href="#_6-4-包"><span>6.4. 包</span></a></h2><p>包是通过使用“带点号模块名”来构造 Python 模块命名空间的一种方式。<br> 例如，模块名 <code>A.B</code> 表示名为 <code>A</code> 的包中名为 <code>B</code> 的子模块。<br> 就像使用模块可以让不同模块的作者不必担心彼此的全局变量名一样，使用带点号模块名也可以让 NumPy 或 Pillow 等多模块包的作者也不必担心彼此的模块名冲突。</p><p>假设要为统一处理声音文件与声音数据设计一个模块集（“包”）。<br> 声音文件的格式很多（通常以扩展名来识别，例如：<code>.wav</code>，<code>.aiff</code>，<code>.au</code>），因此，为了不同文件格式之间的转换，需要创建和维护一个不断增长的模块集合。<br> 为了实现对声音数据的不同处理（例如，混声、添加回声、均衡器功能、创造人工立体声效果），还要编写无穷无尽的模块流。<br> 下面这个分级文件树展示了这个包的架构：</p><div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>sound/                          最高层级的包</span></span>
<span class="line"><span>      __init__.py               初始化 sound 包</span></span>
<span class="line"><span>      formats/                  用于文件格式转换的子包</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              wavread.py</span></span>
<span class="line"><span>              wavwrite.py</span></span>
<span class="line"><span>              aiffread.py</span></span>
<span class="line"><span>              aiffwrite.py</span></span>
<span class="line"><span>              auread.py</span></span>
<span class="line"><span>              auwrite.py</span></span>
<span class="line"><span>              ...</span></span>
<span class="line"><span>      effects/                  用于音效的子包</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              echo.py</span></span>
<span class="line"><span>              surround.py</span></span>
<span class="line"><span>              reverse.py</span></span>
<span class="line"><span>              ...</span></span>
<span class="line"><span>      filters/                  用于过滤器的子包</span></span>
<span class="line"><span>              __init__.py</span></span>
<span class="line"><span>              equalizer.py</span></span>
<span class="line"><span>              vocoder.py</span></span>
<span class="line"><span>              karaoke.py</span></span>
<span class="line"><span>              ...</span></span></code></pre></div><p>导入包时，Python 搜索 <code>sys.path</code> 里的目录，查找包的子目录。</p><p>需要有 <code>__init__.py</code> 文件才能让 Python 将包含该文件的目录当作包来处理（除非使用 <a href="https://docs.python.org/zh-cn/3.13/glossary.html#term-namespace-package" target="_blank" rel="noopener noreferrer">namespace package</a>，这是一个相对高级的特性）。<br> 这可以防止重名的目录如 <code>string</code> 在无意中屏蔽后继出现在模块搜索路径中的有效模块。<br> 在最简单的情况下，<code>__init__.py</code> 可以只是一个空文件，但它也可以执行包的初始化代码或设置 <code>__all__</code> 变量，这将在稍后详细描述。</p><p>还可以从包中导入单个模块，例如：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo</span></span></code></pre></div><p>这将加载子模块 <code>sound.effects.echo</code>。 它必须通过其全名来引用。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sound.effects.echo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)\\</span></span></code></pre></div><p>另一种导入子模块的方法是 ：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo</span></span></code></pre></div><p>这也会加载子模块 echo，并使其不必加包前缀，因此可按如下方式使用:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">echo.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>Import 语句的另一种变体是直接导入所需的函数或变量：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echofilter</span></span></code></pre></div><p>同样，这将加载子模块 echo，但这使其函数 echofilter() 直接可用:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">echofilter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">atten</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>注意，使用 <code>from package import item</code> 时，<code>item</code> 可以是包的子模块（或子包），也可以是包中定义的函数、类或变量等其他名称。<br><code>import</code> 语句首先测试包中是否定义了 <code>item</code>；如果未在包中定义，则假定 <code>item</code> 是模块，并尝试加载。如果找不到 <code>item</code>，则触发 <code>ImportError</code> 异常。</p><p>相反，使用 <code>import item.subitem.subsubitem</code> 句法时，除最后一项外，每个 <code>item</code> 都必须是包；最后一项可以是模块或包，但不能是上一项中定义的类、函数或变量</p><h3 id="_6-4-1-从包中导入" tabindex="-1"><a class="header-anchor" href="#_6-4-1-从包中导入"><span>6.4.1. 从包中导入 <code>*</code></span></a></h3><p>使用 <code>from sound.effects import *</code> 时会发生什么？你可能希望它会查找并导入包的所有子模块，但事实并非如此。因为这将花费很长的时间，并且可能会产生你不想要的副作用。</p><p>唯一的解决办法是提供包的显式索引。</p><p><code>import</code> 语句使用如下惯例：如果包的 <code>__init__.py</code> 代码定义了列表 <code>__all__</code>，运行 <code>from package import *</code> 时，它就是被导入的模块名列表。<br> 发布包的新版本时，包的作者应更新此列表。<br> 如果包的作者认为没有必要在包中执行导入 <code>*</code> 操作，也可以不提供此列表。<br> 例如，<code>sound/effects/__init__.py</code> 文件可以包含以下代码：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__all__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;echo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;surround&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;reverse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>这意味着 <code>from sound.effects import *</code> 将导入 <code>sound.effects</code> 包的三个命名子模块。</p><p>请注意子模块可能会受到本地定义名称的影响。<br> 例如，如果你在 <code>sound/effects/__init__.py</code> 文件中添加了一个 <code>reverse</code> 函数，<code>from sound.effects import *</code> 将只导入 <code>echo</code> 和 <code>surround</code> 这两个子模块，但 <strong>不会</strong> 导入 <code>reverse</code> 子模块，因为它被本地定义的 <code>reverse</code> 函数所遮挡:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__all__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;echo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,      </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指向 &#39;echo.py&#39; 文件</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;surround&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 指向 &#39;surround.py&#39; 文件</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;reverse&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># !!! 现在指向 &#39;reverse&#39; 函数 !!!</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reverse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># &lt;-- 此名称将覆盖 &#39;reverse.py&#39; 子模块</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> msg[::</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]    </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     针对 &#39;from sound.effects import *&#39; 的情况</span></span></code></pre></div><p>如果没有定义 <code>__all__</code>，<code>from sound.effects import *</code> 语句 <strong>不会</strong> 把包 <code>sound.effects</code> 中的所有子模块都导入到当前命名空间；它只是确保包 <code>sound.effects</code> 已被导入（可能还会运行 <code>__init__.py</code> 中的任何初始化代码），然后再导入包中定义的任何名称。</p><p>虽然，可以把模块设计为用 <code>import *</code> 时只导出遵循指定模式的名称，但仍不提倡在生产代码中使用这种做法。</p><p>记住，使用 <code>from package import specific_submodule</code> 没有任何问题！ 实际上，除了导入模块使用不同包的同名子模块之外，这种方式是推荐用法。</p><h3 id="_6-4-2-相对导入" tabindex="-1"><a class="header-anchor" href="#_6-4-2-相对导入"><span>6.4.2. 相对导入</span></a></h3><p>当包由多个子包构成（如示例中的 <code>sound</code> 包）时，可以使用绝对导入来引用同级包的子模块。 例如，如果 <code>sound.filters.vocoder</code> 模块需要使用 <code>sound.effects</code> 包中的 <code>echo</code> 模块，它可以使用 <code>from sound.effects import echo</code>。</p><p>你还可以编写相对导入代码，即使用 <code>from module import name</code> 形式的 <code>import</code> 语句。<br> 这些导入使用前导点号来表示相对导入所涉及的当前包和上级包。 例如对于 <code>surround</code> 模块，可以使用:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> . </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> .. </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> formats</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ..filters </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> equalizer</span></span></code></pre></div><p>Note that relative imports are based on the name of the current module&#39;s package.<br> Since the main module does not have a package, modules intended for use as the main module of a Python application must always use absolute imports.</p><h3 id="_6-4-3-多目录中的包" tabindex="-1"><a class="header-anchor" href="#_6-4-3-多目录中的包"><span>6.4.3. 多目录中的包</span></a></h3><p>包还支持一个特殊的属性，<a href="https://docs.python.org/zh-cn/3.13/reference/datamodel.html#module.__path__" target="_blank" rel="noopener noreferrer"><code>__path__</code></a> 。<br> 在执行该文件中的代码之前，它被初始化为字符串的 <a href="https://docs.python.org/zh-cn/3.13/glossary.html#term-sequence" target="_blank" rel="noopener noreferrer">sequence</a>，其中包含包的 <code>__init__.py</code> 的目录名称。<br> 这个变量可以修改；修改后会影响今后对模块和包中包含的子包的搜索。</p><p>这个功能虽然不常用，但可用于扩展包中的模块集。</p>`,87))])}const o=n(p,[["render",k]]),c=JSON.parse(`{"path":"/notes/backend/python/tutorial/6.modules.html","title":"6. 模块","lang":"zh-CN","frontmatter":{"category":["笔记","backend"],"tag":["python"],"description":"6. 模块 模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 .py 。在模块内部，通过全局变量 __name__ 可以获取模块名（即字符串）。 fibo.py 现在，进入 Python 解释器，用以下命令导入该模块： 此操作不会直接把 fibo 中定义的函数名称添加到当前 namespace 中（请参阅 Python 作用域和命名...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. 模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-30T09:30:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"],["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/backend/python/tutorial/6.modules.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"6. 模块"}],["meta",{"property":"og:description","content":"6. 模块 模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 .py 。在模块内部，通过全局变量 __name__ 可以获取模块名（即字符串）。 fibo.py 现在，进入 Python 解释器，用以下命令导入该模块： 此操作不会直接把 fibo 中定义的函数名称添加到当前 namespace 中（请参阅 Python 作用域和命名..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-30T09:30:14.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2025-07-30T09:30:14.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.zhaobc.site/rss.xml","title":"赵斌的小站 RSS Feed"}]]},"git":{"createdTime":1753867814000,"updatedTime":1753867814000,"contributors":[{"name":"Zhao Bin","username":"","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":12.74,"words":3821},"filePathRelative":"notes/backend/python/tutorial/6.modules.md","excerpt":"\\n<p>模块是包含 Python 定义和语句的文件。其文件名是模块名加后缀名 <code>.py</code> 。在模块内部，通过全局变量 <code>__name__</code> 可以获取模块名（即字符串）。</p>\\n<div class=\\"code-block-with-title\\">\\n  <div class=\\"code-block-title-bar\\" data-title=\\"fibo.py\\">\\n    <span>fibo.py</span>\\n  </div>\\n  <div class=\\"language-python\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-python\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># 斐波那契数列模块</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">def</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> fib</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\">n</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">  \\"\\"\\"Write Fibonacci series up to n.\\"\\"\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  a, b </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  while</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> a </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> n:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">    print</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(a, </span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">end</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">' '</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    a, b </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> b, a </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">  print</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">def</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> fib2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic\\">n</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">):</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">  \\"\\"\\"Return Fibonacci series up to n.\\"\\"\\"</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  result </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> []</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">  a, b </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 0</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  while</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> a </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> n:</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    result.</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#61AFEF\\">append</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(a)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    a, b </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> b, a </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">+</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  return</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> result</span></span></code></pre>\\n</div>\\n</div>","autoDesc":true}`);export{o as comp,c as data};
