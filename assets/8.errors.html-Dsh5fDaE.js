import{_ as t,c as l,a as i,h as n,f as e,o as h}from"./app-BARUYhtD.js";const p={};function k(r,s){const a=e("PythonPlayground");return h(),l("div",null,[s[0]||(s[0]=i('<h1 id="_8-错误和异常" tabindex="-1"><a class="header-anchor" href="#_8-错误和异常"><span>8. 错误和异常</span></a></h1><h2 id="_8-1-语法错误" tabindex="-1"><a class="header-anchor" href="#_8-1-语法错误"><span>8.1. 语法错误</span></a></h2><p>语法错误又称解析错误。</p><p>解析器会重复出错的行并显示指向检测到错误的位置的小箭头。<br> 请注意这并不一定是需要被修复的位置。</p><h2 id="_8-2-异常" tabindex="-1"><a class="header-anchor" href="#_8-2-异常"><span>8.2. 异常</span></a></h2><p>即使语句或表达式使用了正确的语法，执行时仍可能触发错误。执行时检测到的错误称为 <em>异常</em> 。</p><p><a href="https://docs.python.org/zh-cn/3.13/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener noreferrer">内置异常</a> 列出了内置异常及其含义。</p><h2 id="_8-3-异常的处理" tabindex="-1"><a class="header-anchor" href="#_8-3-异常的处理"><span>8.3. 异常的处理</span></a></h2><p>可以编写程序处理选定的异常。下例会要求用户一直输入内容，直到输入有效的整数，但允许用户中断程序（使用 Control-C 或操作系统支持的其他操作）；<br> 注意，用户中断程序会触发 <a href="https://docs.python.org/zh-cn/3.13/library/exceptions.html#KeyboardInterrupt" target="_blank" rel="noopener noreferrer"><code>KeyboardInterrupt</code></a> 异常。</p>',9)),n(a,{title:"%E8%BE%93%E5%85%A5%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5Ijoid2hpbGUgVHJ1ZTpcbiAgdHJ5OlxuICAgIHggPSBpbnQoaW5wdXQoXCJQbGVhc2UgZW50ZXIgYSBudW1iZXI6IFwiKSlcbiAgICBicmVha1xuICBleGNlcHQgVmFsdWVFcnJvcjpcbiAgICBwcmludChcIk9vcHMhIFRoYXQgd2FzIG5vIHZhbGlkIG51bWJlci4gVHJ5IGFnYWluLi4uXCIpXG4ifQ%3D%3D",allow:"cross-origin-isolated"}),s[1]||(s[1]=i(`<p><a href="https://docs.python.org/zh-cn/3.13/reference/compound_stmts.html#try" target="_blank" rel="noopener noreferrer"><code>try</code></a> 语句的工作原理如下：</p><ul><li>首先，执行 <code>try</code> 子句 （<code>try</code> 和 <a href="https://docs.python.org/zh-cn/3.13/reference/compound_stmts.html#except" target="_blank" rel="noopener noreferrer"><code>except</code></a> 关键字之间的（多行）语句）。</li><li>如果没有触发异常，则跳过 <code>except</code> 子句，<code>try</code> 语句执行完毕。</li><li>如果在执行 <code>try</code> 子句时发生了异常，则跳过该子句中剩下的部分。<br> 如果异常的类型与 <code>except</code> 关键字后指定的异常相匹配，则会执行 <code>except</code> 子句，然后跳到 <code>try/except</code> 代码块之后继续执行。</li><li>如果发生的异常与 <code>except</code> 子句 中指定的异常不匹配，则它会被传递到外层的 <code>try</code> 语句中；如果没有找到处理器，则它是一个 未处理异常 且执行将停止并输出一条错误消息。</li></ul><p><code>try</code> 语句可以有多个 <code>except</code> 子句 来为不同的异常指定处理程序。但最多只有一个处理程序会被执行。</p><p>处理程序只处理对应的 <code>try</code> 子句 中发生的异常，而不处理同一 <code>try</code> 语句内其他处理程序中的异常。<br><code>except</code> 子句 可以用带圆括号的元组来指定多个异常，例如:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">RuntimeError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">TypeError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">NameError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    pass</span></span></code></pre></div><p>一个 <code>except</code> 子句中的类匹配的异常将是该类本身的实例或其所派生的类的实例（但反过来则不可以 --- 列出派生类的 <code>except</code> 子句 不会匹配其基类的实例）。</p><p>例如，下面的代码将依次打印 B, C, D:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> B</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">Exception</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> C</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">B</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> D</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">C</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [B, C, D]:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    raise</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> D:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> C:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;C&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> B:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;B&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>请注意如果颠倒 <code>except</code> 子句 的顺序（把 <code>except B</code> 放在最前），则会输出 <code>B</code>, <code>B</code>, <code>B</code> --- 即触发了第一个匹配的 <code>except</code> 子句。</p><p>发生异常时，它可能具有关联值，即异常 <em>参数</em> 。是否需要参数，以及参数的类型取决于异常的类型。</p><p><code>except</code> 子句可能会在异常名称后面指定一个变量。 这个变量将被绑定到异常实例，该实例通常会有一个存储参数的 <code>args</code> 属性。<br> 为了方便起见，内置异常类型定义了 <a href="https://docs.python.org/zh-cn/3.13/reference/datamodel.html#object.__str__" target="_blank" rel="noopener noreferrer"><code>__str__()</code></a> 来打印所有参数而不必显式地访问 <code>.args</code>。</p>`,11)),n(a,{title:"%E5%BC%82%E5%B8%B8%E5%8F%82%E6%95%B0",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoidHJ5OlxuICByYWlzZSBFeGNlcHRpb24oJ3NwYW0nLCAnZWdncycpXG5leGNlcHQgRXhjZXB0aW9uIGFzIGluc3Q6XG4gIHByaW50KHR5cGUoaW5zdCkpICAgICAgICMg5byC5bi455qE57G75Z6LXG4gIHByaW50KGluc3QuYXJncykgICAgICAgICMg5Y%2BC5pWw5L%2Bd5a2Y5ZyoIC5hcmdzIOS4rVxuICBwcmludChpbnN0KSAgICAgICAgICAgICAjIF9fc3RyX18g5YWB6K64IGFyZ3Mg6KKr55u05o6l5omT5Y2wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICMg5L2G5Y%2Bv6IO95Zyo5byC5bi45a2Q57G75Lit6KKr6KaG55uWXG4gIHgsIHkgPSBpbnN0IC5hcmdzICAgICAgICMg6Kej5YyFIGFyZ3NcbiAgcHJpbnQoJ3ggPSAnLCB4KVxuICBwcmludCgneSA9ICcsIHkpXG4jIDxjbGFzcyAnRXhjZXB0aW9uJz5cbiMgKCdzcGFtJywgJ2VnZ3MnKVxuIyAoJ3NwYW0nLCAnZWdncycpXG4jIHggPSBzcGFtXG4jIHkgPSBlZ2dzXG4ifQ%3D%3D",allow:"cross-origin-isolated"}),s[2]||(s[2]=i('<p>未处理异常的 <code>__str__()</code> 输出会被打印为该异常消息的最后部分 (&#39;detail&#39;)。</p><p><a href="https://docs.python.org/zh-cn/3.13/library/exceptions.html#BaseException" target="_blank" rel="noopener noreferrer">BaseException</a> 是所有异常的共同基类。它的一个子类， <a href="https://docs.python.org/zh-cn/3.13/library/exceptions.html#Exception" target="_blank" rel="noopener noreferrer">Exception</a> ，是所有非致命异常的基类。<br> 不是 <code>Exception</code> 的子类的异常通常不被处理，因为它们被用来指示程序应该终止。<br> 它们包括由 <code>sys.exit()</code> 引发的 <code>SystemExit</code> ，以及当用户希望中断程序时引发的 <code>KeyboardInterrupt</code> 。</p><p><code>Exception</code> 可以被用作通配符，捕获（几乎）一切。然而，好的做法是，尽可能具体地说明我们打算处理的异常类型，并允许任何意外的异常传播下去。</p><p>处理 <code>Exception</code> 最常见的模式是打印或记录异常，然后重新提出（允许调用者也处理异常）:</p>',4)),n(a,{title:"%E9%87%8D%E6%96%B0%E6%8F%90%E5%87%BA%E5%BC%82%E5%B8%B8",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoiaW1wb3J0IHN5c1xuXG50cnk6XG4gIGYgPSBvcGVuKCdteWZpbGUudHh0JylcbiAgcyA9IGYucmVhZGxpbmUoKVxuICBpID0gaW50KHMuc3RyaXAoKSlcbmV4Y2VwdCBPU0Vycm9yIGFzIGVycjpcbiAgcHJpbnQoXCJPUyBlcnJvcjogXCIsIGVycilcbmV4Y2VwdCBWYWx1ZUVycm9yOlxuICBwcmludChcIkNvdWxkIG5vdCBjb252ZXJ0IGRhdGEgdG8gYW4gaW50ZWdlci5cIilcbmV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyOlxuICBwcmludChmXCJVbmV4cGVjdGVkIHtlcnI9fSwge3R5cGUoZXJyKT19XCIpXG4gIHJhaXNlXG4iLCJteWZpbGUudHh0IjoiIHRlc3RcbiJ9",allow:"cross-origin-isolated"}),s[3]||(s[3]=i(`<p><code>try</code> ... <code>except</code> 语句具有可选的 <code>else</code> 子句，该子句如果存在，它必须放在所有 <code>except</code> 子句 之后。<br> 它适用于 <code>try</code> 子句 没有引发异常但又必须要执行的代码。例如:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> arg </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys.argv[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:]:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arg, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;r&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  except</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> OSError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cannot open&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, arg)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arg, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;has&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">readlines</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;lines&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre></div><p>使用 <code>else</code> 子句比向 <code>try</code> 子句添加额外的代码要好，可以避免意外捕获非 <code>try</code> ... <code>except</code> 语句保护的代码触发的异常。</p><h2 id="_8-4-触发异常" tabindex="-1"><a class="header-anchor" href="#_8-4-触发异常"><span>8.4. 触发异常</span></a></h2><p><code>raise</code> 语句支持强制触发指定的异常。</p><p><code>raise</code> 唯一的参数就是要触发的异常。这个参数必须是异常实例或异常类（派生自 <code>BaseException</code> 类，例如 <code>Exception</code> 或其子类）。<br> 如果传递的是异常类，将通过调用没有参数的构造函数来隐式实例化。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> NameError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hi There&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> ValueError</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # raise Value() 的简化</span></span></code></pre></div><h2 id="_8-5-异常链" tabindex="-1"><a class="header-anchor" href="#_8-5-异常链"><span>8.5. 异常链</span></a></h2><p>如果一个未处理的异常发生在 <code>except</code> 部分内，它将会有被处理的异常附加到它上面，并包括在错误信息中。</p><p>为了表明一个异常是另一个异常的直接后果， raise 语句允许一个可选的 from 子句:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># exc 必须为异常类实例或 None</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> RuntimeError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exc</span></span></code></pre></div><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> ConnectionError</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">  func</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> ConnectionError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exc:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> RuntimeError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Failed to open database&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> exc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     func()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     ~~~~^^</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   File &quot;&lt;stdin&gt;&quot;, line 2, in func</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ConnectionError</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># The above exception was the direct cause of the following exception:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   File &quot;&lt;stdin&gt;&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     raise RuntimeError(&#39;Failed to open database&#39;) from exc</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RuntimeError: Failed to open database</span></span></code></pre></div><p><code>from None</code> 表达禁用自动异常链。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;database.sqlite&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> OSError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> RuntimeError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   File &quot;&lt;stdin&gt;&quot;, line 4, in &lt;module&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     raise RuntimeError from None</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RuntimeError</span></span></code></pre></div><p>异常链机制详见 <a href="https://docs.python.org/zh-cn/3.13/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener noreferrer">内置异常</a>。</p><h2 id="_8-6-用户自定义异常" tabindex="-1"><a class="header-anchor" href="#_8-6-用户自定义异常"><span>8.6. 用户自定义异常</span></a></h2><p>程序可以通过创建新的异常类命名自己的异常（Python 类的内容详见 类）。不论是以直接还是间接的方式，异常都应从 <code>Exception</code> 类派生。</p><p>大多数异常命名都以 “Error” 结尾，类似标准异常的命名。</p><h2 id="_8-7-定义清理操作" tabindex="-1"><a class="header-anchor" href="#_8-7-定义清理操作"><span>8.7. 定义清理操作</span></a></h2><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> KeyboardInterrupt</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Goodbye, world!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>如果存在 <code>finally</code> 子句，则 <code>finally</code> 子句是 <code>try</code> 语句结束前执行的最后一项任务。不论 <code>try</code> 语句是否触发异常，都会执行 <code>finally</code> 子句。</p><ul><li>如果执行 <code>try</code> 子句期间触发了某个异常，则某个 <code>except</code> 子句应处理该异常。如果该异常没有 <code>except</code> 子句处理，在 <code>finally</code> 子句执行后会被重新触发。</li><li><code>except</code> 或 <code>else</code> 子句执行期间也会触发异常。同样，该异常会在 <code>finally</code> 子句执行之后被重新触发。</li><li>如果 <code>finally</code> 子句中包含 <code>break</code>、<code>continue</code> 或 <code>return</code> 等语句，异常将不会被重新引发。</li><li>如果执行 <code>try</code> 语句时遇到 <code>break</code>,、<code>continue</code> 或 <code>return</code> 语句，则 <code>finally</code> 子句在执行 <code>break</code>、<code>continue</code> 或 <code>return</code> 语句之前执行。</li><li>如果 <code>finally</code> 子句中包含 <code>return</code> 语句，则返回值来自 <code>finally</code> 子句的某个 <code>return</code> 语句的返回值，而不是来自 <code>try</code> 子句的 <code>return</code> 语句的返回值。</li></ul><h2 id="_8-8-预定义的清理操作" tabindex="-1"><a class="header-anchor" href="#_8-8-预定义的清理操作"><span>8.8. 预定义的清理操作</span></a></h2><p>某些对象定义了不需要该对象时要执行的标准清理操作。无论使用该对象的操作是否成功，都会执行清理操作。<br><a href="https://docs.python.org/zh-cn/3.13/reference/compound_stmts.html#with" target="_blank" rel="noopener noreferrer"><code>with</code></a> 语句支持以及时、正确的清理的方式使用文件对象：</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;myfile.txt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(line, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>语句执行完毕后，即使在处理行时遇到问题，都会关闭文件 <code>f</code>。</p><h2 id="_8-9-引发和处理多个不相关的异常" tabindex="-1"><a class="header-anchor" href="#_8-9-引发和处理多个不相关的异常"><span>8.9. 引发和处理多个不相关的异常</span></a></h2><p>在有些情况下，有必要报告几个已经发生的异常。这通常是在并发框架中当几个任务并行失败时的情况，但也有其他的用例，有时需要是继续执行并收集多个错误而不是引发第一个异常。</p><p>内置的 <a href="https://docs.python.org/zh-cn/3.13/library/exceptions.html#ExceptionGroup" target="_blank" rel="noopener noreferrer"><code>ExceptionGroup</code></a> 打包了一个异常实例的列表，这样它们就可以一起被引发。它本身就是一个异常，所以它可以像其他异常一样被捕获。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  excs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">OSError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;error 1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">SystemError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;error 2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ExceptionGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;there were problems&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, excs)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  + Exception Group Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  |   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  |     f()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  |     ~^^</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  |   File &quot;&lt;stdin&gt;&quot;, line 3, in f</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  |     raise ExceptionGroup(&#39;there were problems&#39;, excs)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  | ExceptionGroup: there were problems (2 sub-exceptions)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#  +-+---------------- 1 ----------------</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#    | OSError: error 1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#    +---------------- 2 ----------------</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#    | SystemError: error 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#    +------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">  f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> Exception</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;caught </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e)</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">: e&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># caught &lt;class &#39;ExceptionGroup&#39;&gt;: e</span></span></code></pre></div><p>通过使用 <code>except*</code> 代替 <code>except</code> ，我们可以有选择地只处理组中符合某种类型的异常。<br> 在下面的例子中，显示了一个嵌套的异常组，每个 <code>except*</code> 子句都从组中提取了某种类型的异常，而让所有其他的异常传播到其他子句，并最终被重新引发。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    raise</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ExceptionGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;group1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        [</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">            OSError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">            SystemError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">            ExceptionGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                &quot;group2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                [</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">                    OSError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">                    RecursionError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> OSError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;There were OSErrors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> SystemError</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;There were SystemErrors&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># There were OSErrors</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># There were SystemErrors</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   + Exception Group Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |   File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |     f()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |     ~^^</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |   File &quot;&lt;stdin&gt;&quot;, line 2, in f</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |     raise ExceptionGroup(</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |     ...&lt;12 lines&gt;...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   |     )</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   | ExceptionGroup: group1 (1 sub-exception)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   +-+---------------- 1 ----------------</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     | ExceptionGroup: group2 (1 sub-exception)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     +-+---------------- 1 ----------------</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       | RecursionError: 4</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#       +------------------------------------</span></span></code></pre></div><p>注意，嵌套在一个异常组中的异常必须是实例，而不是类型。这是因为在实践中，这些异常通常是那些已经被程序提出并捕获的异常，其模式如下:</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">excs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tests:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    test.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  except</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> Exception</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    excs.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(e)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> excs:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> ExceptionGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Test Failures&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, excs)</span></span></code></pre></div><h2 id="_8-10-用注释细化异常情况" tabindex="-1"><a class="header-anchor" href="#_8-10-用注释细化异常情况"><span>8.10. 用注释细化异常情况</span></a></h2><p>当一个异常被创建以引发时，它通常被初始化为描述所发生错误的信息。在有些情况下，在异常被捕获后添加信息是很有用的。<br> 为了这个目的，异常有一个 <code>add_note(note)</code> 方法接受一个字符串，并将其添加到异常的注释列表。<br> 标准的回溯在异常之后按照它们被添加的顺序呈现包括所有的注释。</p><div class="language-python" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> TypeError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bad type&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;"> Exception</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  e.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">add_note</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Add some information&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  e.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">add_note</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Add some more information&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  raise</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Traceback (most recent call last):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#   File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#     raise TypeError(&#39;bad type&#39;)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># TypeError: bad type</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Add some information</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Add some more information</span></span></code></pre></div>`,37))])}const o=t(p,[["render",k]]),c=JSON.parse('{"path":"/notes/backend/python/tutorial/8.errors.html","title":"8. 错误和异常","lang":"zh-CN","frontmatter":{"category":["笔记","backend"],"tag":["python"],"description":"8. 错误和异常 8.1. 语法错误 语法错误又称解析错误。 解析器会重复出错的行并显示指向检测到错误的位置的小箭头。 请注意这并不一定是需要被修复的位置。 8.2. 异常 即使语句或表达式使用了正确的语法，执行时仍可能触发错误。执行时检测到的错误称为 异常 。 内置异常 列出了内置异常及其含义。 8.3. 异常的处理 可以编写程序处理选定的异常。下例...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8. 错误和异常\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-31T08:03:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"],["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/backend/python/tutorial/8.errors.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"8. 错误和异常"}],["meta",{"property":"og:description","content":"8. 错误和异常 8.1. 语法错误 语法错误又称解析错误。 解析器会重复出错的行并显示指向检测到错误的位置的小箭头。 请注意这并不一定是需要被修复的位置。 8.2. 异常 即使语句或表达式使用了正确的语法，执行时仍可能触发错误。执行时检测到的错误称为 异常 。 内置异常 列出了内置异常及其含义。 8.3. 异常的处理 可以编写程序处理选定的异常。下例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-31T08:03:55.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:modified_time","content":"2025-07-31T08:03:55.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.zhaobc.site/rss.xml","title":"赵斌的小站 RSS Feed"}]]},"git":{"createdTime":1753949035000,"updatedTime":1753949035000,"contributors":[{"name":"Zhao Bin","username":"","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":9.02,"words":2707},"filePathRelative":"notes/backend/python/tutorial/8.errors.md","excerpt":"\\n<h2>8.1. 语法错误</h2>\\n<p>语法错误又称解析错误。</p>\\n<p>解析器会重复出错的行并显示指向检测到错误的位置的小箭头。<br>\\n请注意这并不一定是需要被修复的位置。</p>\\n<h2>8.2. 异常</h2>\\n<p>即使语句或表达式使用了正确的语法，执行时仍可能触发错误。执行时检测到的错误称为 <em>异常</em> 。</p>\\n<p><a href=\\"https://docs.python.org/zh-cn/3.13/library/exceptions.html#bltin-exceptions\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">内置异常</a> 列出了内置异常及其含义。</p>","autoDesc":true}');export{o as comp,c as data};
