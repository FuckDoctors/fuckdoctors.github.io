import{_ as n,o as s,c as a,h as t}from"./app-BOAI8os0.js";const e={},o=t(`<h1 id="actions" tabindex="-1"><a class="header-anchor" href="#actions"><span>Actions</span></a></h1><p>Actions are the equivalent of methods in components.<br> They can be defined with the actions property in <code>defineStore()</code> and they are perfect to define <strong>business logic</strong>.</p><p>Like getters, actions get access to the whole store instance through <code>this</code> with full typing (and autocompletion ✨) support.<br> Unlike getters, <code>actions</code> <strong>can be asynchronous</strong>, you can await inside of actions any API call or even other actions!</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> mande <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;mande&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> useAuthStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./auth-store&#39;</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">mande</span><span class="token punctuation">(</span><span class="token string">&#39;/api/users&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useUsers <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">userData</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">preferences</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// async</span>
    <span class="token keyword">async</span> <span class="token function">registerUser</span><span class="token punctuation">(</span><span class="token parameter">login<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>userData <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span> login<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">async</span> <span class="token function">fetchUserPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// use another store</span>
      <span class="token keyword">const</span> auth <span class="token operator">=</span> <span class="token function">useAuthStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>auth<span class="token punctuation">.</span>isAuthenticated<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>preferences <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchPreferences</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you would prefer not to use Composition API at all, you can use the <code>mapActions()</code> helper to map actions properties as methods in your component:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../stores/counterStore&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.increment() inside the component</span>
    <span class="token comment">// same as calling from store.increment()</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">// same as above but registers it as this.myOwnName()</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">myOwnName</span><span class="token operator">:</span> <span class="token string">&#39;doubleCounter&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="subscribing-to-actions" tabindex="-1"><a class="header-anchor" href="#subscribing-to-actions"><span>Subscribing to actions</span></a></h2><p>It is possible to observe actions and their outcome with <code>store.$onAction()</code>.</p><p>The callback passed to it is executed <strong>before</strong> the action itself.<br><code>after</code> handle promises and allows you to execute a function after the action resolves.<br> In a similar way, onError allows you execute a function if the action throws or rejects.</p><p>Here is an example that logs before running actions and after they resolve/reject.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> someStore<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token punctuation">,</span> <span class="token comment">// name of the action</span>
    store<span class="token punctuation">,</span> <span class="token comment">// store instance, same as &#39;someStore&#39;</span>
    args<span class="token punctuation">,</span> <span class="token comment">// array of parameters passed to the action</span>
    after<span class="token punctuation">,</span> <span class="token comment">// hook after the action returns or resolves</span>
    onError<span class="token punctuation">,</span> <span class="token comment">// hook if the action throws or reject</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// a shared variable for this specific action call</span>
    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// this will trigger before an action on \`store\` is executed</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Start &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; with params [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">].</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

    <span class="token comment">// this will trigger if the action succeeds and after it has fully run.</span>
    <span class="token comment">// it waits for any returned promised</span>
    <span class="token function">after</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Finished &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.\\nResult: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">// this will trigger if the action throws or returns a promise that rejects</span>
    <span class="token function">onError</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.\\nError: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>error<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment">// manually remove the listener</span>
<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, action subscriptions are bound to the component where they are added (if the store is inside a component&#39;s <code>setup()</code>).<br> Meaning, they will be automatically removed when the component is unmounted.<br> If you want to keep them after the component is unmounted,<br> pass <code>true</code> as the second argument to detach the action subscription from the current component:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> someStore <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// this subscription will be kept after the component is unmounted</span>
    someStore<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[o];function i(c,l){return s(),a("div",null,p)}const r=n(e,[["render",i],["__file","actions.html.vue"]]),d=JSON.parse('{"path":"/notes/frontend/vue/pinia/core-concepts/actions.html","title":"Actions","lang":"zh-CN","frontmatter":{"order":40,"category":["笔记","frontend","pinia"],"tag":["pinia"],"description":"Actions Actions are the equivalent of methods in components. They can be defined with the actions property in defineStore() and they are perfect to define business logic. Like g...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/pinia/core-concepts/actions.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"Actions"}],["meta",{"property":"og:description","content":"Actions Actions are the equivalent of methods in components. They can be defined with the actions property in defineStore() and they are perfect to define business logic. Like g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-13T13:38:33.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"pinia"}],["meta",{"property":"article:modified_time","content":"2024-05-13T13:38:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Actions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-13T13:38:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"Subscribing to actions","slug":"subscribing-to-actions","link":"#subscribing-to-actions","children":[]}],"git":{"createdTime":1715607513000,"updatedTime":1715607513000,"contributors":[{"name":"ZhaoBin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"notes/frontend/vue/pinia/core-concepts/actions.md","localizedDate":"2024年5月13日","excerpt":"\\n<p>Actions are the equivalent of methods in components.<br>\\nThey can be defined with the actions property in <code>defineStore()</code> and they are perfect to define <strong>business logic</strong>.</p>\\n<p>Like getters, actions get access to the whole store instance through <code>this</code> with full typing (and autocompletion ✨) support.<br>\\nUnlike getters, <code>actions</code> <strong>can be asynchronous</strong>, you can await inside of actions any API call or even other actions!</p>","autoDesc":true}');export{r as comp,d as data};
