import{_ as l,c as o,d as a,a as s,b as t,e,h,w as d,f as r,o as p}from"./app-Bn99AUij.js";const c="/assets/1-4.figure01-Bu_L0Pai.png",k={},g={class:"hint-container warning"};function y(u,i){const n=r("CodeDemo");return p(),o("div",null,[a(" markdownlint-disable MD051 "),i[2]||(i[2]=s(`<h1 id="第-1-章-数据类型" tabindex="-1"><a class="header-anchor" href="#第-1-章-数据类型"><span>第 1 章 数据类型</span></a></h1><h2 id="_1-1-深入浅出课程介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-深入浅出课程介绍"><span>1-1 深入浅出课程介绍</span></a></h2><p>略</p><h2 id="_1-2-六种数据类型" tabindex="-1"><a class="header-anchor" href="#_1-2-六种数据类型"><span>1-2 六种数据类型</span></a></h2><p>原始类型（基本类型）：</p><ul><li><code>number</code></li><li><code>string</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><p>除此之外，JavaScript 还有一种对象类型（复合类型）<code>object</code>。</p><p><code>object</code> 包含以下类型：</p><ul><li><code>Function</code></li><li><code>Array</code></li><li><code>Date</code></li><li>...</li></ul><h2 id="_1-3-隐式转换" tabindex="-1"><a class="header-anchor" href="#_1-3-隐式转换"><span>1-3 隐式转换</span></a></h2><p>关于<code>+</code>和<code>-</code>：<br><code>+</code>隐式转为字符串，<code>-</code>隐式转换为数字。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;37&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 30</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;37&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 377</span></span></code></pre></div><p>因此可以巧用<code>+</code>和<code>-</code>转换数据类型，比如使用<code>- 0</code>（减 0），转换为数字，使用<code>+ &#39;&#39;</code>（加空字符串）转换为字符串。</p><p>因此可以巧用<code>+</code>和<code>-</code>转换数据类型，比如使用<code>- 0</code>（减 0），转换为数字，使用<code>+ &#39;&#39;</code>（加空字符串）转换为字符串。</p><h2 id="_1-4-包装对象" tabindex="-1"><a class="header-anchor" href="#_1-4-包装对象"><span>1-4 包装对象</span></a></h2>`,15)),a(" hash是会自动生成一个 id 为标题名的 a 标签，但是 id 命名不能是数字开头，所以加了下划线。 "),i[3]||(i[3]=t("p",null,[t("a",{href:"#_1-2-%E5%85%AD%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"},"1-2 六种数据类型"),e(" 中介绍的 5 种基本类型和一种对象类型，其中 5 中基本类型都有其对应的包装类型。")],-1)),i[4]||(i[4]=t("p",null,"当把一个基本类型作为对象使用时，JavaScript 会尝试将基本类型转换为包装对象，想定于 new 了一个临时对象，对象的值为基本类型的值。",-1)),i[5]||(i[5]=t("p",null,"使用基本对象访问对象的方法后，这个临时对象会被销毁掉，所以再次访问对象的方法时就会变成 undefined。",-1)),i[6]||(i[6]=t("p",null,[e("如下图："),t("br"),t("img",{src:c,alt:"图片1",loading:"lazy"})],-1)),t("div",g,[i[1]||(i[1]=s('<p class="hint-container-title">注意</p><p>图片名中不能出现<code>#</code>，否则会会有问题：</p><ol><li>Markdown 插入图片的方式，不能显示图片</li><li>HTML 插入图片的方式会报错。<br> :::</li></ol><h2 id="_1-5-类型检查" tabindex="-1"><a class="header-anchor" href="#_1-5-类型检查"><span>1-5 类型检查</span></a></h2><p>JavaScript 中检查类型的方法有很多，比如：</p><ul><li><p><code>typeof</code></p></li><li><p><code>instanceof</code></p></li><li><p><code>Object.prototype.toString</code></p></li><li><p><code>constructor</code></p><p>注意：使用 textlint 时，报<code>TypeError: entry.split is not a function</code>，所以上面加了引号。</p></li><li><p>duck type</p></li></ul><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span><code>typeof</code></span></a></h3><p><code>typeof</code>返回一个字符串，它非常适合函数对象和基本类型的判断。</p><p>比如：</p><table><thead><tr><th style="text-align:right;">命令</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:right;">typeof 100</td><td style="text-align:left;">&quot;number&quot;</td></tr><tr><td style="text-align:right;">typeof true</td><td style="text-align:left;">&quot;boolean&quot;</td></tr><tr><td style="text-align:right;">typeof function() {}</td><td style="text-align:left;">&quot;function&quot;</td></tr><tr><td style="text-align:right;">typeof Function</td><td style="text-align:left;">&quot;function&quot;</td></tr><tr><td style="text-align:right;">typeof undefined</td><td style="text-align:left;">&quot;undefined&quot;</td></tr><tr><td style="text-align:right;">typeof null</td><td style="text-align:left;">&quot;object&quot;</td></tr><tr><td style="text-align:right;">typeof new Object()</td><td style="text-align:left;">&quot;object&quot;</td></tr><tr><td style="text-align:right;">typeof [1, 2]</td><td style="text-align:left;">&quot;object&quot;</td></tr><tr><td style="text-align:right;">typeof NaN</td><td style="text-align:left;">&quot;number&quot;</td></tr></tbody></table><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof"><span><code>instanceof</code></span></a></h3><p><code>instanceof</code>常用于对象类型的判断，它是基于<code>原型链</code>的形式去判断的操作符。</p><p>它期望左操作树是一个对象，如果不是对象而是基本类型的话，直接返回 false。</p><table><thead><tr><th style="text-align:right;">命令</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:right;">1 instanceof Number</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:right;">true instanceof Boolean</td><td style="text-align:left;">false</td></tr></tbody></table><p>它期望右操作树是一个函数对象，或函数构造器，如果不是的话就会跑出一个 TypeError 异常。</p><table><thead><tr><th style="text-align:right;">命令</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:right;">[1, 2] instanceof Array</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:right;">new Object() instanceof Array</td><td style="text-align:left;">false</td></tr></tbody></table><p><code>instanceof</code>的大概原理就是它会判断左边的操作树的对象的原型链上，是否有右边的构造函数的 prototype 属性。</p><p>例子：</p>',18)),h(n,{id:"code-demo-325",type:"normal",title:"instanceof%20%E7%A4%BA%E4%BE%8B",code:"eJx9jkEKwjAQRa8SsqqbHEDwDoLbbGqcSqX8KclEkdK7m2iMBUuXM/Penz/pW9B73UU46RnqSD4wmp2aZou6PUm8EKSsy2RGz8LyHEkdFOhR3RXCOEYQH52wT3S5W9xbr84cUBLqH4ss8EBm4GvzJvoU0MIRd18sUdln/BdY2vm+kD9QYjap34utIjVLzy+I5XpP"},{default:d(()=>i[0]||(i[0]=[t("div",{class:"language-js","data-highlighter":"shiki","data-ext":"js",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[t("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[t("code",{class:"language-js"},[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"function"),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Person"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"() {}")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"function"),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Student"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"() {}")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"Student"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prototype"),t("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," ="),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Person"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}},"Student"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"prototype"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"constructor"),t("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," ="),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," Student")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"var"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," bosn"),t("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," ="),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Student"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E5C07B"}},"console"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"log"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"bosn"),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," instanceof"),t("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Student"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}},"var"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}}," one"),t("span",{style:{"--shiki-light":"#0184BC","--shiki-dark":"#56B6C2"}}," ="),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," new"),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}}," Person"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"()")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E5C07B"}},"console"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"log"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"one"),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," instanceof"),t("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Person"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),e(`
`),t("span",{class:"line"}),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E5C07B"}},"console"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"log"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"one"),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," instanceof"),t("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Student"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")]),e(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E5C07B"}},"console"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"."),t("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"log"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#E06C75"}},"bosn"),t("span",{style:{"--shiki-light":"#A626A4","--shiki-dark":"#C678DD"}}," instanceof"),t("span",{style:{"--shiki-light":"#C18401","--shiki-dark":"#E5C07B"}}," Person"),t("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")])])])],-1)])),_:1,__:[0]})]),i[7]||(i[7]=s('<p>打开开发者工具看结果，或者打开 Codepen 在线调试。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Caution!<br> 不同 window 或 iframe 间的对象类型检查不能使用 instanceof!</p></div><h3 id="object-prototype-tostring" tabindex="-1"><a class="header-anchor" href="#object-prototype-tostring"><span><code>Object.prototype.toString</code></span></a></h3><table><thead><tr><th style="text-align:right;">命令</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:right;">Object.prototype.toString.apply([])</td><td style="text-align:left;">&quot;[object Array]&quot;</td></tr><tr><td style="text-align:right;">Object.prototype.toString.apply(function(){})</td><td style="text-align:left;">&quot;[object Function]&quot;</td></tr><tr><td style="text-align:right;">Object.prototype.toString.apply(null)</td><td style="text-align:left;">&quot;[object Null]&quot;</td></tr><tr><td style="text-align:right;">Object.prototype.toString.apply(undefined)</td><td style="text-align:left;">&quot;[object Undefined]&quot;</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>IE6/7/8 Object.prototype.toString.apply(null)返回&quot;[object Object]&quot;</p></div><h3 id="类型检查小结" tabindex="-1"><a class="header-anchor" href="#类型检查小结"><span>类型检查小结</span></a></h3><ul><li><code>typeof</code><br> 适合基本类型及 function 检测，遇到 null 失效。</li><li><code>Object.prototype.toString</code><br> 通过 Object.prototype.toString 拿到，适合内置对象和基本类型，遇到 null 和 undefined 失效（IE6/7/8 等返回[object Object]）。</li><li><code>instanceof</code><br> 适合自定义对象，也可以用来检测原生对象，在不同 iframe 和 window 间检测时失效。</li></ul>',7))])}const A=l(k,[["render",y]]),b=JSON.parse('{"path":"/notes/frontend/js/bosn/chapter01.html","title":"第 1 章 数据类型","lang":"zh-CN","frontmatter":{"order":1,"category":["笔记","frontend"],"tag":["js","javascript"],"description":"第 1 章 数据类型 1-1 深入浅出课程介绍 略 1-2 六种数据类型 原始类型（基本类型）： number string boolean null undefined 除此之外，JavaScript 还有一种对象类型（复合类型）object。 object 包含以下类型： Function Array Date ... 1-3 隐式转换 关于+和-...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 1 章 数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-16T13:45:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"],["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/js/bosn/chapter01.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"第 1 章 数据类型"}],["meta",{"property":"og:description","content":"第 1 章 数据类型 1-1 深入浅出课程介绍 略 1-2 六种数据类型 原始类型（基本类型）： number string boolean null undefined 除此之外，JavaScript 还有一种对象类型（复合类型）object。 object 包含以下类型： Function Array Date ... 1-3 隐式转换 关于+和-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-02-16T13:45:47.000Z"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:modified_time","content":"2023-02-16T13:45:47.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://www.zhaobc.site/en/notes/frontend/js/bosn/chapter01.html"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.zhaobc.site/rss.xml","title":"赵斌的小站 RSS Feed"}]]},"git":{"createdTime":1648921112000,"updatedTime":1676555147000,"contributors":[{"name":"FuckDoctors","username":"FuckDoctors","email":"zhbchwin@163.com","commits":3,"url":"https://github.com/FuckDoctors"},{"name":"Zhao Bin","username":"","email":"zhbchwin@163.com","commits":6}]},"readingTime":{"minutes":2.96,"words":888},"filePathRelative":"notes/frontend/js/bosn/chapter01.md","excerpt":"<!-- markdownlint-disable MD051 -->\\n<h1>第 1 章 数据类型</h1>\\n<h2>1-1 深入浅出课程介绍</h2>\\n<p>略</p>\\n<h2>1-2 六种数据类型</h2>\\n<p>原始类型（基本类型）：</p>\\n<ul>\\n<li><code>number</code></li>\\n<li><code>string</code></li>\\n<li><code>boolean</code></li>\\n<li><code>null</code></li>\\n<li><code>undefined</code></li>\\n</ul>\\n<p>除此之外，JavaScript 还有一种对象类型（复合类型）<code>object</code>。</p>","autoDesc":true}');export{A as comp,b as data};
