import{_ as c,O as l,a1 as i,U as a,Q as u,S as n,a2 as s,a7 as e,B as t}from"./framework-aea42fb6.js";const r={},d=e(`<h1 id="第-1-章-权衡的艺术" tabindex="-1"><a class="header-anchor" href="#第-1-章-权衡的艺术" aria-hidden="true">#</a> 第 1 章 权衡的艺术</h1><h2 id="_1-1-命令式和声明式" tabindex="-1"><a class="header-anchor" href="#_1-1-命令式和声明式" aria-hidden="true">#</a> 1.1 命令式和声明式</h2><p>从范式上来看，视图层框架通常分为命令式和声明式。</p><ul><li>命令式<strong>关注过程</strong></li><li>声明式<strong>关注结果</strong></li></ul><p>早年流行的 jQuery 是典型的命令式框架，Vue.js 是声明式框架。</p><p>例如，我们把下面的这段话翻译成对应的代码：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>- 获取 id 为 app 的 div 标签
- 它的文本内容为 hello world
- 为其绑定点击事件
- 当点击时弹出提示：ok
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jQuery 代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原生 JavaScript 代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>
div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码本身是在描述“做事的过程”。</p><p>Vue.js 代码：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
    () =&gt; {
      alert(&#39;ok&#39;)
    }
  <span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，我们提供的是一个“结果”，至于如何实现这个“结果”，我们并不关心。实现这个“结果”，是 Vue.js 帮我们实现的，它内部是<strong>命令式</strong>的，而暴露给用户的却更加<strong>声明式</strong>。</p><h2 id="_1-2-性能与可维护性的权衡" tabindex="-1"><a class="header-anchor" href="#_1-2-性能与可维护性的权衡" aria-hidden="true">#</a> 1.2 性能与可维护性的权衡</h2><p>命令式和声明式各有优缺点，在框架设计方面，则体现在性能与可维护性的权衡。这里先抛出一个结论：<strong>声明式代码的性能不优于命令式代码的性能</strong>。</p><p><strong>毕竟框架本省就是封装了命令式代码才实现了面向用户的声明式</strong>。</p><h2 id="_1-3-虚拟-dom-的性能到底如何" tabindex="-1"><a class="header-anchor" href="#_1-3-虚拟-dom-的性能到底如何" aria-hidden="true">#</a> 1.3 虚拟 DOM 的性能到底如何</h2><p>性能：<strong>声明式代码的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</strong></p><p>如果我们能够<strong>最小化找出差异的性能消耗</strong>，就可以让声明式代码的性能无限接近命令式的性能。</p><p>涉及 DOM 的运算要远比 JavaScript 层面的计算性能差。</p><p>虚拟 DOM 在创建页面时的性能：<strong>创建 JavaScript 对象的计算量 + 创建真实 DOM 的计算量</strong></p><p>虚拟 DOM 在更新页面时的性能：<strong>创建新的 JavaScript 对象 + Diff + 渲染 HTML 字符串</strong></p><h2 id="_1-4-运行时和编译时" tabindex="-1"><a class="header-anchor" href="#_1-4-运行时和编译时" aria-hidden="true">#</a> 1.4 运行时和编译时</h2><p>设计框架的三种选择：</p><ul><li>纯运行时</li><li>运行时 + 编译时</li><li>编译时</li></ul><p>设计一个运行时框架，为它提供一个 Render 函数，Render 函数根据用户提供的树形结构的数据对象，渲染成 DOM 元素。</p><p>规定树形结构的数据对象如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;span&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个对象有两个属性：</p><ul><li>tag 代表标签名称</li><li>children 即可以是一个数据组（代表子节点），也可以直接是一个文本（代表文本节点）</li></ul><p>Render 函数如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Render</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span>
    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数组，递归调用Render，使用el作为root参数</span>
    obj<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token function">Render</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//  将元素添加到root</span>
  root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Render</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">下面内容为代码演示结果</p><div id="code-demo-render-basic"></div></div>`,37),k=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("code-demo-render-basic"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"tag"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'div'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token literal-property property"},"tag"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'span'"),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token literal-property property"},"children"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"Render"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("obj"),n("span",{class:"token punctuation"},","),s(" root")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" el "),n("span",{class:"token operator"},"="),s(" window"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createElement"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"."),s("tag"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" obj"),n("span",{class:"token punctuation"},"."),s("children "),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'string'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" text "),n("span",{class:"token operator"},"="),s(" window"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createTextNode"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"."),s("children"),n("span",{class:"token punctuation"},")"),s(`
    el`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"appendChild"),n("span",{class:"token punctuation"},"("),s("text"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"."),s("children"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 数组，递归调用Render，使用el作为root参数"),s(`
    obj`),n("span",{class:"token punctuation"},"."),s("children"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"child"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"Render"),n("span",{class:"token punctuation"},"("),s("child"),n("span",{class:"token punctuation"},","),s(" el"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`

  `),n("span",{class:"token comment"},"//  将元素添加到root"),s(`
  root`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"appendChild"),n("span",{class:"token punctuation"},"("),s("el"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token function"},"Render"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(" window"),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'#code-demo-render-basic'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=e('<div class="hint-container warning"><p class="hint-container-title">注意</p><p>本主题的代码演示采用了 <code>ShadowRoot</code> 方式，将代码演示和文档的主 DOM 树分开渲染。 所以，代码中的 <code>document</code> 会被定义为 演示代码块的一个 <code>ShadowRoot</code> <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>， <code>document.createElement</code> 会报错，没法直接显示代码演示的结果。</p><p>本例直接使用了 <code>window.document</code> 来强制使用文档的主 DOM ， 为了能看到输出结果，在代码演示的外面，加了一个 id 为 <code>code-demo-render-basic</code> 的 <code>div</code>。</p></div><p>上面的 Render 函数虽然可以根据树形结构数据渲染内容，但是手写树形结构数据太麻烦，而且不直观，能够用 HTML 标签的方式来描述就好了。</p><p>为了满足这个需求，考虑加入编译手段，把 HTML 标签编译成树形结构就可以继续使用 Render 函数了。</p><p>于是，可以考虑写一个 Compiler 函数，配合 Render 函数使用。这样我们的框架就编程了<strong>运行时 + 编译时</strong>。</p><h2 id="_1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-5-总结" aria-hidden="true">#</a> 1.5 总结</h2><ul><li>讨论了声明式和命令式的区别</li><li>讨论了虚拟 DOM 的性能 声明式的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</li><li>介绍了运行时和编译时，并且可以看出 Vue.js 3 是一个编译时 + 运行时的框架</li></ul><hr class="footnotes-sep">',7),b={class:"footnotes"},h={class:"footnotes-list"},g={id:"footnote1",class:"footnote-item"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/ShadowRoot",target:"_blank",rel:"noopener noreferrer"},y=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function j(w,_){const o=t("CodeDemo"),p=t("ExternalLinkIcon");return l(),i("div",null,[d,a(o,{id:"code-demo-129",type:"normal",title:"%E8%BF%90%E8%A1%8C%E6%97%B6%20Render%20%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B",code:"eJx1kr9OwzAQxl/lFIakUpvuFemCWBmAjTAE+0qDXLs4LgWhSoh/QggJCcHGwMjYAQkEVLxMQ2HiFTg7RFAEHmKd7777fj5n12ubjvAa3ixPtyDlUewxxbHGsaNqGiVHXVtLspTFXnO2TjXNWHpVbyMjCVMyM6DWNiCC3VgCmGS9AT4V+VUbsnYqOPVowIoNoSiyqyjMuoksKu36rvbbKISCvtKCl/mB21fpO4hlLFs9yUyqJCw6xIAgqqCVMpXCpEBDQWT9VHLVD7livQ5KEzKNicF5gTaywpBoKlaUtiAwO11ULXupsASCKIoI1uhUrvtf/UsHg9vmX49lSi7QMJ1J2c05AaGFSbdL8HP2PLB9XGZAmQwdypSqtK3X4fVqOHk6/Hg+e9+7yEcXb8ODyeVtMQc6HI9eKEQxHl2PHx7tSPLzfZIU8p89w5bS8wlrB+4AomY5TBdXCaRSINmBO2fIh8f50cHk7ub1/ik/vclPhtbAZu0+dSNSf73Vzyf6PajNHuqdJRTIjNKBP/P3v+dbEG/wCUfy/PI="},{default:u(()=>[k,v]),_:1}),m,n("section",b,[n("ol",h,[n("li",g,[n("p",null,[s("Shadow DOM API 的 "),n("a",f,[s("ShadowRoot"),a(p)]),s(" 接口是一个 DOM 子树的根节点, 它与文档的主 DOM 树分开渲染。 "),y])])])])])}const S=c(r,[["render",j],["__file","chapter01.html.vue"]]);export{S as default};
