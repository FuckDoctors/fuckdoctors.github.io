import{_ as n,Z as s,$ as a,a5 as p}from"./framework-f53d5b48.js";const e={},t=p(`<h1 id="第-2-章-框架设计的核心要素" tabindex="-1"><a class="header-anchor" href="#第-2-章-框架设计的核心要素" aria-hidden="true">#</a> 第 2 章 框架设计的核心要素</h1><h2 id="_2-1-提升用户的开发体验" tabindex="-1"><a class="header-anchor" href="#_2-1-提升用户的开发体验" aria-hidden="true">#</a> 2.1 提升用户的开发体验</h2><p>在框架设计和开发过程中，提供友好的警告信息至关重要。</p><p>Vue.js 3 中为了方便的在控制台输出 <code>ref</code> 数据，提供了自定义的 formatter，在 <code>initCustomFormatter</code> 函数中。</p><p>在 Chrome 中，打开 DevTools 的设置，勾选 &quot;Console&quot; -&gt; &quot;Enable custom formatters&quot; 开启。</p><h2 id="_2-2-控制框架代码的体积" tabindex="-1"><a class="header-anchor" href="#_2-2-控制框架代码的体积" aria-hidden="true">#</a> 2.2 控制框架代码的体积</h2><p>框架的大小也是衡量框架的标准之一。</p><p>Vue.js 3 的源代码中，每个 <code>warn</code> 函数的调用都会配合 <code>__DEV__</code> 常量的检查，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">warn</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to mount app: mount target selector &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>container<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span> returned <span class="token keyword">null</span><span class="token punctuation">.</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue.js 使用 rollup.js 对项目进行构建，这里的 <code>__DEV__</code> 常量实际上是通过 rollup.js 的插件配置来预定义的，其功能类似于 webpack 中的 DefinePlugin 插件。</p><p>针对不同的环境，比如开发环境和生产环境，把 <code>__DEV__</code> 替换成 <code>true</code> 和 <code>false</code> 来控制这块代码的执行与否。 当 <code>__DEV__</code> 为 <code>false</code> 时，这段代码永远都不会执行，被认为是 dead code, 它不会出现在最终产物中，在构建资源的时候就会被移除。</p><p>这样，我们就做到了<strong>在开发环境中为用户提供友好的警告信息的同时，不会增加生产环境代码的体积。</strong>。</p><h2 id="_2-3-框架要做到良好的-tree-shaking" tabindex="-1"><a class="header-anchor" href="#_2-3-框架要做到良好的-tree-shaking" aria-hidden="true">#</a> 2.3 框架要做到良好的 Tree-Shaking</h2><p>简单来说，Tree-Shaking 指的是消除那些永远不会执行的代码，也就是排除 dead code。</p><p>想要实现 Tree-Shaking ，必须满足一个条件，即模块必须是 ESM(ES Module) ，因为 Tree-Shaking 依赖 ESM 的静态结构。</p><p>使用 rollup 打包 esm:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npx rollup input<span class="token punctuation">.</span>js <span class="token operator">-</span>f esm <span class="token operator">-</span>o bundle<span class="token punctuation">.</span>js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这句命令的意思是，以 input.js 文件为入口，输出 ESM，输出的文件叫 bundle.js。</p><p>Tree-Shaking 的第二个关键点 —— 副作用。如果一个函数调用会产生副作用，那么就不能将其移除。</p><p>简单地说，副作用就是，当调用函数的时候会对外部产生影响，例如修改了全局变量。</p><p>而到底会不会产生副作用，只有代码真正运行的时候才会知道。</p><p>JavaScript 本身是动态语言，静态地分析 JavaScript 代码很困难， 因此，像 rollup.js 这类的工具会提供一个机制，让我们能明确的告诉 rollup.js： “放心吧，这段代码不会产生副作用，你可以移除它。”</p><p>如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>
<span class="token comment">/*#__PURE__*/</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意注释代码 <code>/*#__PURE__*/</code>，其作用就是告诉 rollup.js，对应 foo 函数的调用不会产生副作用，你可以放心地对其进行 Tree-Shaking。</p><p>因此，在编写框架时，合理使用<code>/*#__PURE__*/</code>注释，可以做到更好的 Tree-Shaking，Vue.js 3 中大量使用了该注释。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> isHTMLTag <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">makeMap</span><span class="token punctuation">(</span><span class="token constant">HTML_TAGS</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样编写代码也不会造成很大的心智负担，因为通常产生副作用的代码都是模块内的顶级调用。</p><p>什么是顶级调用？如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 顶级调用</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 函数内调用</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要 bar 没有被调用，自然不会产生副作用。</p><h2 id="_2-4-框架应该输出怎样的构建产物" tabindex="-1"><a class="header-anchor" href="#_2-4-框架应该输出怎样的构建产物" aria-hidden="true">#</a> 2.4 框架应该输出怎样的构建产物</h2><p>在 HTML 中直接使用时，需要输出一种叫 IIFE 格式的资源。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token operator">=</span> Vue
    <span class="token comment">// ...</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IIFE 的全称是 Immediately Invoked Function Expression，即“立即调用的函数表达式”，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上，vue.global.js 文件就是 IIFE 格式的资源，它的代码结构如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Vue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  exports<span class="token punctuation">.</span>createApp <span class="token operator">=</span> createApp
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> exports
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样当我们使用 &lt;script&gt; 标签直接引入 vue.global.js 文件后，全局变量 Vue 就是可用的了。</p><p>现在主流浏览器对原生 ESM 支持也都不错，所以，可以直接用&lt;script type=&quot;module&quot;&gt;标签引入 ESM 资源。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;/path/to/vue.esm-browser.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了可以直接使用&lt;script&gt;标签引入外，还可以在 Node.js 中通过 require 语句引用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-5-特性开关" tabindex="-1"><a class="header-anchor" href="#_2-5-特性开关" aria-hidden="true">#</a> 2.5 特性开关</h2><p>在设计框架时，框架会给用户提供诸多特性或功能。 比如，我们提供了 A, B, C 三个特性给用户，同时还提供了 a, b, c 三个对应的特性开关， 用户可以通过设置 a, b, c 为 true 或 false 来开启或关闭对应的特性。</p><p>这样会带来很多好处：</p><ul><li>对于用户关闭的特性，利用 Tree-Shaking 减小打包体积</li><li>该机制为框架设计带来了灵活性，通过特性开关任意为框架添加新的特性，而不担心资源体积变大。 同时，当框架升级时，也可以通过特性开关来支持遗留 API 。</li></ul><p>怎么实现特性开关呢？原理和上文提到的<code>__DEV__</code>常量一样，本质上是利用 rollup.js 的预定义常量插件来实现。</p><h2 id="_2-6-错误处理" tabindex="-1"><a class="header-anchor" href="#_2-6-错误处理" aria-hidden="true">#</a> 2.6 错误处理</h2><p>框架错误处理机制的好坏，直接决定了用户应用程序的健壮性，还决定了用户开发时处理错误的心智负担。</p><p>异常处理，可以通过 <code>try...catch</code> 来让用户自己处理，但这样会增加用户的负担，那么我们可以做统一异常处理。</p><p>例如下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的每个函数都加了 <code>try...catch</code> ,实际上，我们可以更进一步将错误处理封装为一个函数，假设叫它 callWithErrorHandling:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，代码变得简洁多了。但简洁不是目的，这么做真正的好处是，我们能为用户提供统一的错误处理接口，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> handleError <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 用户可以调用改函数注册统一的错误处理函数</span>
  <span class="token function">registerErrorHandler</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    handleError <span class="token operator">=</span> fn
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    fn <span class="token operator">&amp;&amp;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将捕获的错误传递给用户的错误处理程序</span>
    <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们提供了 registerErrorHandler 函数，用户可以用它来注册错误处理程序。</p><p>这样用户侧的代码就会变的非常简洁且健壮：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">&#39;utils&#39;</span>
<span class="token comment">// 注册错误处理程序</span>
utils<span class="token punctuation">.</span><span class="token function">registerErrorHandler</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
utils<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
utils<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，错误处理的能力完全由用户控制，用户可以选择忽略错误，也可以调用上报程序，将错误上报给监控系统。</p><p>实际上，这就是 Vue.js 的原理，可以在源码中搜索到 callWithErrorHandling 函数。 另外，在 Vue.js 中，我们也可以注册统一的错误处理函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;App.vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 错误处理程序</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-7-良好的-typescript-类型支持" tabindex="-1"><a class="header-anchor" href="#_2-7-良好的-typescript-类型支持" aria-hidden="true">#</a> 2.7 良好的 TypeScript 类型支持</h2><p>框架使用 TS 编写，不等于对 TS 类型友好，其实这是两件完全不同的事。示例如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val
<span class="token punctuation">}</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用 foo 函数时，如果传递了参数&#39;str&#39;，按照之前的分析，得到的结果 res 也应该是字符串类型，然而并不是。 为了达到理想状态，我们只需要对 foo 函数做简单的修改即可：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">foo</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在写框架时，为了做到完善的 TS 类型支持很不容易，许岙付出相当大的努力。</p><h2 id="_2-8-总结" tabindex="-1"><a class="header-anchor" href="#_2-8-总结" aria-hidden="true">#</a> 2.8 总结</h2><ul><li>框架设计需要提供友好的警告信息至关重要</li><li>利用 Tree-Shaking 和 构建工具预定义常量的能力，实现代码体积的可控性</li><li>可以利用 <code>/*#__PURE__*/</code>来辅助构建工具进行 Tree-Shaking</li><li>框架需要提供多种输出产物 <ul><li>IIFE 格式 立即执行的函数表达式</li><li>ESM 格式 <ul><li>esm-browser.js 用于浏览器</li><li>esm-bundler.js 用于打包工具</li></ul></li></ul></li><li>框架会提供多种能力或功能，处于灵活性和兼容性的考虑，可以通过特性开关来实现</li><li>框架需要为用户提供统一的错误处理接口</li><li>做到完事的类型支持，需要花费很多的时间和精力</li></ul>`,72),c=[t];function o(i,l){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","chapter02.html.vue"]]);export{r as default};
