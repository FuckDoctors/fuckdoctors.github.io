import{_ as e,c as t,o as p,d as s,a as n,e as a}from"./app-EMofQacS.js";const o="/assets/2-2.figure01-B5F66TL4.png",c={},l=s('<h1 id="第-2-章-表达式和运算符" tabindex="-1"><a class="header-anchor" href="#第-2-章-表达式和运算符"><span>第 2 章 表达式和运算符</span></a></h1><h2 id="_2-1-表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-表达式"><span>2-1 表达式</span></a></h2><h3 id="原始表达式" tabindex="-1"><a class="header-anchor" href="#原始表达式"><span>原始表达式</span></a></h3><ul><li>常量、直接量</li><li>关键字</li><li>变量</li></ul><p>原始表达式和原始表达式可以复合成复合表达式，比如<code>10 * 20</code>就是两个原始表达式通过运算符构成了复合表达式。</p><h3 id="数组、对象的初始化表达式" tabindex="-1"><a class="header-anchor" href="#数组、对象的初始化表达式"><span>数组、对象的初始化表达式</span></a></h3><p>比如：</p>',7),i=n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"right"}},"表达式"),n("th",{style:{"text-align":"left"}},"等价表达式")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"right"}},"[1, 2]"),n("td",{style:{"text-align":"left"}},"new Array(1, 2)")]),n("tr",null,[n("td",{style:{"text-align":"right"}},"[1, , , 4]"),n("td",{style:{"text-align":"left"}},"[1, undefined, undefined, 4]")]),n("tr",null,[n("td",{style:{"text-align":"right"},"x:":"","1,":"","y:":"",2:""}),n("td",{style:{"text-align":"left"}},[a("var o = new Object();"),n("br"),a("o.x = 1; o.y = 2;")])])])],-1),d=s(`<h3 id="函数表达式" tabindex="-1"><a class="header-anchor" href="#函数表达式"><span>函数表达式</span></a></h3><p>把函数赋给一个变量，或者，把函数用括号阔起来直接调用,这样的就是函数表达式。</p><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性访问表达式" tabindex="-1"><a class="header-anchor" href="#属性访问表达式"><span>属性访问表达式</span></a></h3><p>如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
o<span class="token punctuation">.</span>x
o<span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调用表达式" tabindex="-1"><a class="header-anchor" href="#调用表达式"><span>调用表达式</span></a></h3><p>比如：<code>func();</code>。</p><h3 id="对象创建表达式" tabindex="-1"><a class="header-anchor" href="#对象创建表达式"><span>对象创建表达式</span></a></h3><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 无参数时，括号可以省略。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-运算符" tabindex="-1"><a class="header-anchor" href="#_2-2-运算符"><span>2-2 运算符</span></a></h2><h3 id="常见的运算符" tabindex="-1"><a class="header-anchor" href="#常见的运算符"><span>常见的运算符</span></a></h3><ul><li><p>一元运算符</p><p>比如：<code>+num</code>，<code>+</code>可以将字符串转换成数字，<code>-</code>可以将字符串转换成数字；也可以正数变负数，负数变正数。</p></li><li><p>二元运算符</p><p>比如：<code>a + b</code></p></li><li><p>三元运算符</p><p>比如：<code>c ? a : b</code>，它会将<code>c</code>强制转换为布尔型去比较。</p></li></ul><p>除此之外，还有其他运算符：</p><p><img src="`+o+`" alt="运算符" loading="lazy"></p><h3 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符<code>,</code></span></a></h3><p><code>var val = (1, 2, 3); // val = 3</code></p><p>逗号运算符是从左往右依次计算表达式的值，最后取最右边的值。</p><h3 id="delete运算符" tabindex="-1"><a class="header-anchor" href="#delete运算符"><span><code>delete</code>运算符</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>x <span class="token comment">// 1</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>x
obj<span class="token punctuation">.</span>x <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后来新增了一个<code>Object.defineProperty</code>，可以给对象新增属性，或者修改已经存在的属性，并返回改对象。但不是说有的属性都能<code>delete</code>，只有定义的时候，<code>configurable: true</code>的才可以<code>delete</code>。</p><p>例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>x <span class="token comment">// false</span>
obj<span class="token punctuation">.</span>x <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in运算符" tabindex="-1"><a class="header-anchor" href="#in运算符"><span><code>in</code>运算符</span></a></h3><p>使用<code>in</code>运算符来判断一个对象里有没有特定的<code>key</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token string">&#39;x&#39;</span> <span class="token keyword">in</span> window <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof-typeof-运算符" tabindex="-1"><a class="header-anchor" href="#instanceof-typeof-运算符"><span>instanceof, typeof 运算符</span></a></h3><p><code>instanceof</code>判断对象的类型，基于原型链判断。</p><p><code>typeof</code>返回一个字符串，一般用来判断原始类型或者函数对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">typeof</span> <span class="token number">100</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="new运算符" tabindex="-1"><a class="header-anchor" href="#new运算符"><span><code>new</code>运算符</span></a></h3><p>可以通过<code>new</code>来创建一个构造器的实例。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>x <span class="token comment">// 1</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过<code>hasOwnProperty</code>来判断一个属性到底属于这个对象上的，还是这个对象原型链上的。</p><p>可以通过<code>__proto__</code>拿到这个对象的原型。</p><h3 id="this运算符" tabindex="-1"><a class="header-anchor" href="#this运算符"><span><code>this</code>运算符</span></a></h3><p><code>this</code>比较复杂，后面会详细再说。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">this</span> <span class="token comment">// window（浏览器）</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// obj</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：上面的<code>obj.func</code>，在 chrome 78.0.3904.108 中，返回<code>obj.func</code>对象。</p><p>注：可以使用<code>apply</code>改变<code>this</code>指向。</p><h3 id="void运算符" tabindex="-1"><a class="header-anchor" href="#void运算符"><span><code>void</code>运算符</span></a></h3><p>无论<code>void</code>后面是多少，都会返回<code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">void</span> <span class="token number">0</span> <span class="token comment">// undefined</span>
<span class="token keyword">void</span> <span class="token number">0</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,45),r=[l,i,d];function u(k,h){return p(),t("div",null,r)}const m=e(c,[["render",u],["__file","chapter02.html.vue"]]),b=JSON.parse(`{"path":"/en/notes/frontend/js/bosn/chapter02.html","title":"第 2 章 表达式和运算符","lang":"en-US","frontmatter":{"order":2,"category":["notes","frontend"],"tag":["js","javascript"],"description":"第 2 章 表达式和运算符 2-1 表达式 原始表达式 常量、直接量 关键字 变量 原始表达式和原始表达式可以复合成复合表达式，比如10 * 20就是两个原始表达式通过运算符构成了复合表达式。 数组、对象的初始化表达式 比如： 函数表达式 把函数赋给一个变量，或者，把函数用括号阔起来直接调用,这样的就是函数表达式。 比如： 属性访问表达式 如下： 调用...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://www.zhaobc.site/notes/frontend/js/bosn/chapter02.html"}],["meta",{"property":"og:url","content":"https://www.zhaobc.site/en/notes/frontend/js/bosn/chapter02.html"}],["meta",{"property":"og:site_name","content":"ZhaoBin's site"}],["meta",{"property":"og:title","content":"第 2 章 表达式和运算符"}],["meta",{"property":"og:description","content":"第 2 章 表达式和运算符 2-1 表达式 原始表达式 常量、直接量 关键字 变量 原始表达式和原始表达式可以复合成复合表达式，比如10 * 20就是两个原始表达式通过运算符构成了复合表达式。 数组、对象的初始化表达式 比如： 函数表达式 把函数赋给一个变量，或者，把函数用括号阔起来直接调用,这样的就是函数表达式。 比如： 属性访问表达式 如下： 调用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-04T16:32:46.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:modified_time","content":"2023-02-04T16:32:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 2 章 表达式和运算符\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-04T16:32:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"2-1 表达式","slug":"_2-1-表达式","link":"#_2-1-表达式","children":[{"level":3,"title":"原始表达式","slug":"原始表达式","link":"#原始表达式","children":[]},{"level":3,"title":"数组、对象的初始化表达式","slug":"数组、对象的初始化表达式","link":"#数组、对象的初始化表达式","children":[]},{"level":3,"title":"函数表达式","slug":"函数表达式","link":"#函数表达式","children":[]},{"level":3,"title":"属性访问表达式","slug":"属性访问表达式","link":"#属性访问表达式","children":[]},{"level":3,"title":"调用表达式","slug":"调用表达式","link":"#调用表达式","children":[]},{"level":3,"title":"对象创建表达式","slug":"对象创建表达式","link":"#对象创建表达式","children":[]}]},{"level":2,"title":"2-2 运算符","slug":"_2-2-运算符","link":"#_2-2-运算符","children":[{"level":3,"title":"常见的运算符","slug":"常见的运算符","link":"#常见的运算符","children":[]},{"level":3,"title":"逗号运算符,","slug":"逗号运算符","link":"#逗号运算符","children":[]},{"level":3,"title":"delete运算符","slug":"delete运算符","link":"#delete运算符","children":[]},{"level":3,"title":"in运算符","slug":"in运算符","link":"#in运算符","children":[]},{"level":3,"title":"instanceof, typeof 运算符","slug":"instanceof-typeof-运算符","link":"#instanceof-typeof-运算符","children":[]},{"level":3,"title":"new运算符","slug":"new运算符","link":"#new运算符","children":[]},{"level":3,"title":"this运算符","slug":"this运算符","link":"#this运算符","children":[]},{"level":3,"title":"void运算符","slug":"void运算符","link":"#void运算符","children":[]}]}],"git":{"createdTime":1648921112000,"updatedTime":1675528366000,"contributors":[{"name":"FuckDoctors","email":"zhbchwin@163.com","commits":2},{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":2.43,"words":728},"filePathRelative":"en/notes/frontend/js/bosn/chapter02.md","localizedDate":"April 2, 2022","excerpt":"\\n<h2>2-1 表达式</h2>\\n<h3>原始表达式</h3>\\n<ul>\\n<li>常量、直接量</li>\\n<li>关键字</li>\\n<li>变量</li>\\n</ul>\\n<p>原始表达式和原始表达式可以复合成复合表达式，比如<code>10 * 20</code>就是两个原始表达式通过运算符构成了复合表达式。</p>\\n<h3>数组、对象的初始化表达式</h3>\\n<p>比如：</p>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:right\\">表达式</th>\\n<th style=\\"text-align:left\\">等价表达式</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:right\\">[1, 2]</td>\\n<td style=\\"text-align:left\\">new Array(1, 2)</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:right\\">[1, , , 4]</td>\\n<td style=\\"text-align:left\\">[1, undefined, undefined, 4]</td>\\n</tr>\\n<tr>\\n<td 2=\\"\\" style=\\"text-align:right\\" x:=\\"\\" 1,=\\"\\" y:=\\"\\"></td>\\n<td style=\\"text-align:left\\">var o = new Object();<br>o.x = 1; o.y = 2;</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}`);export{m as comp,b as data};
