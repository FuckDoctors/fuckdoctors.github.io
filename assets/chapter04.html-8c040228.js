import{_ as l,O as u,a1 as i,U as a,Q as e,S as n,a2 as s,a7 as c,B as o}from"./framework-aea42fb6.js";const k={},r=c(`<h1 id="第-4-章-响应系统的作用与实现" tabindex="-1"><a class="header-anchor" href="#第-4-章-响应系统的作用与实现" aria-hidden="true">#</a> 第 4 章 响应系统的作用与实现</h1><p>响应系统是 Vue.js 的重要组成部分，Vue.js 3 采用 Proxy 实现响应式数据。</p><h2 id="_4-1-响应式数据与副作用函数" tabindex="-1"><a class="header-anchor" href="#_4-1-响应式数据与副作用函数" aria-hidden="true">#</a> 4.1 响应式数据与副作用函数</h2><p>副作用函数是指会产生副作用的函数。副作用函数的执行会直接或间接影响其他的变量或其他函数的执行。</p><p>如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>text <span class="token operator">=</span> obj<span class="token punctuation">.</span>text
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>text
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>effect 执行会读取 obj，并设置 state，以及更改 DOM 元素，这个就是副作用。</p><p>但是，obj.text 改了之后，并不会自动执行 effect 函数。</p><h2 id="_4-2-响应式数据的基本实现" tabindex="-1"><a class="header-anchor" href="#_4-2-响应式数据的基本实现" aria-hidden="true">#</a> 4.2 响应式数据的基本实现</h2><p>观察可以看出：</p><ul><li>副作用函数 effect 执行时，会出发 obj.text 的<strong>读取</strong>操作</li><li>修改 obj.text 时，会触发<strong>设置</strong>操作</li></ul><p>如果我们能拦截一个对象的读取和设置操作，那么就能做一些额外的操作。</p><p>在 ES2015 之前只能通过 Object.defineProperty 函数实现，这也是 Vue.js 2 所采用的方式。在 ES2015+ 中，可以使用代理对象 Proxy 来实现，这也是 Vue.js 3 所采用的方式。</p><div class="hint-container note"><p class="hint-container-title">Proxy 示例</p><div id="effect-proxy-demo"></div></div>`,14),d=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("effect-proxy-demo"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onclick"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")]),s("Change Text"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 存储副作用函数的桶"),s(`
`),n("span",{class:"token keyword"},"const"),s(" bucket "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 原始数据"),s(`
`),n("span",{class:"token keyword"},"const"),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"text"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 对原始数据的代理"),s(`
`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 拦截读取操作"),s(`
  `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 将副作用函数 effect 添加到副作用函数桶中"),s(`
    bucket`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("effect"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 返回属性值"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token comment"},"// 拦截设置操作"),s(`
  `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 设置属性值"),s(`
    target`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` newVal
    `),n("span",{class:"token comment"},"// 把副作用函数从桶中取出来并执行"),s(`
    bucket`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 返回 true 代表 设置成功"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 副作用函数"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  window`),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'#effect-proxy-demo'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},"."),s(`text
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 执行副作用函数，触发读取"),s(`
`),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("text "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'hello vue3'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=c('<p>上述示例，可以达到响应式的结果。</p><h2 id="_4-3-设计一个完善的响应式系统" tabindex="-1"><a class="header-anchor" href="#_4-3-设计一个完善的响应式系统" aria-hidden="true">#</a> 4.3 设计一个完善的响应式系统</h2><p>从上一节中看出，一个响应式系统的工作流如下：</p><ul><li>当<strong>读取</strong>操作发生时，将副作用收集到桶中</li><li>当<strong>设置</strong>操作发生时，从桶中取出副作用函数并执行</li></ul><p>上节中的副作用函数 effect 硬编码，不合适，我们要做的是，哪怕副作用是匿名函数也能够被正确的收集。 为了实现这一点，我们需要提供一个用来注册副作用函数的机制，如下所示：</p><div class="hint-container note"><p class="hint-container-title">改进后的示例</p><div id="effect-proxy-demo2"></div></div>',6),f=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("effect-proxy-demo2"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onclick"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")]),s("Change Text"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 用一个全局变量存储被注册的副作用函数"),s(`
`),n("span",{class:"token keyword"},"let"),s(` activeEffect

`),n("span",{class:"token comment"},"// effect 函数用于注册副作用函数"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 当调用 effect 注册副作用函数时，将副作用函数 fn 赋值给 activeEffect"),s(`
  activeEffect `),n("span",{class:"token operator"},"="),s(` fn
  `),n("span",{class:"token comment"},"// 执行副作用函数"),s(`
  `),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 存储副作用函数的桶"),s(`
`),n("span",{class:"token keyword"},"const"),s(" bucket "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 原始数据"),s(`
`),n("span",{class:"token keyword"},"const"),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"text"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// 对原始数据的代理"),s(`
`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 拦截读取操作"),s(`
  `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 将 activeEffect 中存储的副作用函数收集到桶中"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// 新增"),s(`
      bucket`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("activeEffect"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// 返回属性值"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token comment"},"// 拦截设置操作"),s(`
  `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 设置属性值"),s(`
    target`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` newVal
    `),n("span",{class:"token comment"},"// 把副作用函数从桶中取出来并执行"),s(`
    bucket`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 返回 true 代表 设置成功"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 使用 effect 注册副作用函数"),s(`
`),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 匿名副作用函数"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'effect run'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 会打印 2 次，注册时立即执行了一次，后面更改 obj.notExist 时会再执行一次"),s(`
  window`),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'#effect-proxy-demo2'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},"."),s(`text
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("notExist "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'hello vue3'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("p",null,"上面代码可以看出，匿名副作用函数内部读取了 obj.text 的值，于是匿名函数与字段 obj.text 之间建立了响应联系。 但是，点击 change text 时，在匿名副作用内并没有读取 obj.notExist 属性的值，所以，理论上字段 obj.notExist 并没有与副作用建立响应联系。 因此，点击按钮时，不应该出发匿名副作用，这是不正确的，为了解决这个问题，我们应该重新设计桶。",-1),y=n("p",null,[s("在上例中，我们"),n("strong",null,"没有在副作用函数与被操作的目标字段之间建立明确的联系"),s("。当读取属性时，无论读取的是哪一个属性，都会把副作用函数收集到桶中； 当设置属性时，也都会把桶中的副作用函数取出来并执行。解决办法只需要在副作用与被操作的字段直接建立联系。")],-1),h=n("p",null,"Set 类型的桶，不能实现这个目的，需要使用 WeakMap 代替 Set 作为桶的数据结构。",-1),w=n("div",{class:"hint-container note"},[n("p",{class:"hint-container-title"},"WeakMap 类型的桶"),n("div",{id:"effect-proxy-weakmap"})],-1),j=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("effect-proxy-weakmap"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onclick"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")]),s("Change Text"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 元素数据"),s(`
`),n("span",{class:"token keyword"},"const"),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"ok"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"text"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 存储副作用的桶"),s(`
`),n("span",{class:"token keyword"},"const"),s(" bucket "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"WeakMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"let"),s(` activeEffect

`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 拦截读取操作"),s(`
  `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 将副作用函数 添加到桶中"),s(`
    `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 返回属性值"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token comment"},"// 拦截设置操作"),s(`
  `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 设置属性值"),s(`
    target`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` newVal
    `),n("span",{class:"token comment"},"// 把副作用函数从桶中取出并执行"),s(`
    `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 在 get 拦截函数内调用 track 函数追踪变化"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 没有 activeEffect 直接返回"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(`
  `),n("span",{class:"token comment"},"// 根据 target 从桶中取得 depsMap，它也是一个 Map 类型，key: effects"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" depsMap "),n("span",{class:"token operator"},"="),s(" bucket"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// 如果不存在 depsMap，则新建一个 Map 与 target 关联"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("depsMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    bucket`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("depsMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 再根据 key 从 depsMap 中取得 deps，它是一个 Set 类型"),s(`
  `),n("span",{class:"token comment"},"// 里面存储着所有与当前 key 关联的副作用函数：effects"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" deps "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// 如果 deps 不存在，则同样新建一个 Set 与 key 关联"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("deps"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    depsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("deps "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 最后将当前激活的副作用添加到桶中"),s(`
  deps`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("activeEffect"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 在 set 拦截函数内调用 trigger 函数出发变化"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 根据 target 从桶中取得 depsMap，它是 key: effects"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" depsMap "),n("span",{class:"token operator"},"="),s(" bucket"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("depsMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(`
  `),n("span",{class:"token comment"},"// 根据 key 取得所有副作用函数"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" effects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// 执行副作用函数"),s(`
  effects `),n("span",{class:"token operator"},"&&"),s(" effects"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// effect 函数用于注册副作用函数"),s(`
`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 当调用 effect 注册副作用函数时，将副作用函数 fn 赋值给 activeEffect"),s(`
  activeEffect `),n("span",{class:"token operator"},"="),s(` fn
  `),n("span",{class:"token comment"},"// 执行副作用函数"),s(`
  `),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 使用 effect 注册副作用函数"),s(`
`),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 匿名副作用函数"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'effect run - weekmap'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 会打印 2 次，注册时立即执行了一次，后面更改 obj.text 时会再执行一次，obj.notExist 不执行"),s(`
  window`),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'#effect-proxy-weakmap'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},"."),s(`text
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("text "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'hello vue3'"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("notExist "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'hello vue3'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("p",null,"从上述代码中可以看出构建数据的方式，分别使用了 WeakMap, Map 和 Set:",-1),M=n("ul",null,[n("li",null,"WeakMap 是 target: Map 键值对"),n("li",null,"Map 是 target.key: effects （副作用） 键值对")],-1),F=n("p",null,"那么，WeakMap 跟 Map 有什么区别呢？",-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"请打开控制台查看：",-1),B=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"const"),s(" weakmap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"WeakMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token punctuation"},";"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" foo "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"foo"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" bar "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"bar"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"}"),s(`

  map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("foo"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),s(`
  weakmap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("bar"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 可以打印出 foo，说明 foo 没有被回收"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'map.keys'"),n("span",{class:"token punctuation"},","),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"keys"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("value"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"// WeakMap 无法获取 key，也就无法获取对象 bar"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'weakmap'"),n("span",{class:"token punctuation"},","),s(" weakmap"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=c(`<h2 id="_4-4-分支切换与-cleanup" tabindex="-1"><a class="header-anchor" href="#_4-4-分支切换与-cleanup" aria-hidden="true">#</a> 4.4 分支切换与 cleanup</h2><p>什么是分支定义？先看下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;hello world&#39;</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerText <span class="token operator">=</span> obj<span class="token punctuation">.</span>ok <span class="token operator">?</span> obj<span class="token punctuation">.</span>text <span class="token operator">:</span> <span class="token string">&#39;not&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的三元表达式中，当字段 obj.ok 发送变化时，代码执行的分支就会跟着变化，这就是分支切换。</p><p>分支切换可能会产生遗留的副作用函数。上面的代码中，会触发 obj.ok 和 obj.text 的读取操作，所以会收集它们俩对应的副作用函数。</p><p>当 obj.ok 修改为 false 时，会触发副作用函数重新执行后，由于此时字段 obj.text 不会被读取，只会执行 obj.ok 的读取操作。 所以，理想情况下，副作用函数不应该被字段 obj.text 所对应的依赖集合收集。</p><p>遗留的副作用会导致不必要的更新。</p><p>但是上例中，obj.ok 改为 false 时，无论 obj.text 如何变，document.body.innerText 的值始终是 &#39;not&#39; 。 所以，最好的结果是，无论 obj.text 如何变，都不需要重新执行副作用函数。</p><p>解决这个问题的思路很简单，就是每次副作用执行时，我们可以先把它从所有与之关联的依赖集合中删除。</p><p>当副作用函数执行完毕后，会重新建立联系，但在新的联系中不会包含遗留的副作用函数。</p><p>要将一个副作用函数从所有与之关联的依赖集合中移除，需要明确有哪些依赖集合中包含它，因此，我们要重新设计副作用函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用一个全局变量存储被注册的副作用函数</span>
<span class="token keyword">let</span> activeEffect
<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用 cleanup 函数完成清除工作</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>
    <span class="token comment">// 当 effectFn 执行时，将其设为当前激活的副作用函数</span>
    activeEffect <span class="token operator">=</span> effectFn
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// effectFn.deps 用来存储所有与该副作用函数相关联的依赖集合</span>
  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 执行副作用函数</span>
  <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 没有 activeEffect 直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span>
  <span class="token comment">// 根据 target 从桶中取得 depsMap，它也是一个 Map 类型，key: effects</span>
  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token comment">// 如果不存在 depsMap，则新建一个 Map 与 target 关联</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 再根据 key 从 depsMap 中取得 deps，它是一个 Set 类型</span>
  <span class="token comment">// 里面存储着所有与当前 key 关联的副作用函数：effects</span>
  <span class="token keyword">let</span> deps <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token comment">// 如果 deps 不存在，则同样新建一个 Set 与 key 关联</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 把当前激活的副作用函数添加到依赖集合 deps 中</span>
  deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
  <span class="token comment">// deps 就是一个与当前副作用函数存在联系的依赖集合</span>
  <span class="token comment">// 将其添加到 activeEffect.deps 数组中</span>
  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 遍历 effectFn 的 deps 数组</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// deps 是依赖集合</span>
    <span class="token keyword">const</span> deps <span class="token operator">=</span> effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 将 effectFn 从依赖集合中移除</span>
    deps<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 最后需要重置 effectFn.deps 数组</span>
  effectFn<span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
  <span class="token comment">// effects &amp;&amp; effects.forEach(fn =&gt; fn()) // 删除，这个会导致死循环</span>

  <span class="token comment">// 构造一个新的集合 effectToRun 然后变量它，用来遍历删除，避免死循环</span>
  <span class="token keyword">const</span> effectToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>effects<span class="token punctuation">)</span>
  effectToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 trigger 中我们遍历 effects 集合，它是一个 Set 集合，当执行副作用函数时，会调用 cleanup 进行清除，实际上是从 effects 中将当前副作用函数剔除。 但是副作用函数的执行会导致其重新被收集，此时对于 effects 的遍历仍在进行，会引起死循环。</p><p>剪短的代码来表达：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;遍历中&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语言规范中对此有明确的说明：在调用 forEach 遍历 Set 集合时，如果一个值已经被访问过了，但该值被删除并重新添加到集合， 如果此时 forEach 遍历没有结束，那么该值会重新被访问。</p><p>因此，上面的代码会无限循环。解决办法也很简单，构造领一个 Set 集合并遍历它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> newSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span>
newSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;遍历中&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">分支切换与 cleanup demo 运行结果</p><div id="effect-branch-cleanup"></div></div>`,19),C=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("div")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("effect-branch-cleanup"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("div")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("button")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onclick"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")]),s("Change Text"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("button")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(`
  `),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("checkbox"),n("span",{class:"token punctuation"},'"')]),s(`
  `),n("span",{class:"token attr-name"},"checked"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("obj.ok"),n("span",{class:"token punctuation"},'"')]),s(`
  `),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"onclick"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value javascript language-javascript"},[n("span",{class:"token function"},"changeOk"),n("span",{class:"token punctuation"},"("),s("event"),n("span",{class:"token punctuation"},"."),s("target"),n("span",{class:"token punctuation"},"."),s("checked"),n("span",{class:"token punctuation"},")")]),n("span",{class:"token punctuation"},'"')])]),s(`
`),n("span",{class:"token punctuation"},"/>")]),s(`Change OK
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token comment"},"// 存储副作用的桶"),s(`
`),n("span",{class:"token keyword"},"const"),s(" bucket "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"WeakMap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},"// 用一个全局变量存储被注册的副作用函数"),s(`
`),n("span",{class:"token keyword"},"let"),s(` activeEffect

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"fn"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token function-variable function"},"effectFn"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 调用 cleanup 函数完成清除工作"),s(`
    `),n("span",{class:"token function"},"cleanup"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 当 effectFn 执行时，将其设为当前激活的副作用函数"),s(`
    activeEffect `),n("span",{class:"token operator"},"="),s(` effectFn
    `),n("span",{class:"token function"},"fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// effectFn.deps 用来存储所有与该副作用函数相关联的依赖集合"),s(`
  effectFn`),n("span",{class:"token punctuation"},"."),s("deps "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token comment"},"// 执行副作用函数"),s(`
  `),n("span",{class:"token function"},"effectFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 没有 activeEffect 直接返回"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("activeEffect"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"return"),s(`
  `),n("span",{class:"token comment"},"// 根据 target 从桶中取得 depsMap，它也是一个 Map 类型，key: effects"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" depsMap "),n("span",{class:"token operator"},"="),s(" bucket"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// 如果不存在 depsMap，则新建一个 Map 与 target 关联"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("depsMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    bucket`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("depsMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 再根据 key 从 depsMap 中取得 deps，它是一个 Set 类型"),s(`
  `),n("span",{class:"token comment"},"// 里面存储着所有与当前 key 关联的副作用函数：effects"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" deps "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// 如果 deps 不存在，则同样新建一个 Set 与 key 关联"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("deps"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    depsMap`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),s("deps "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 把当前激活的副作用函数添加到依赖集合 deps 中"),s(`
  deps`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("activeEffect"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// deps 就是一个与当前副作用函数存在联系的依赖集合"),s(`
  `),n("span",{class:"token comment"},"// 将其添加到 activeEffect.deps 数组中"),s(`
  activeEffect`),n("span",{class:"token punctuation"},"."),s("deps"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("deps"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"cleanup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 遍历 effectFn 的 deps 数组"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" effectFn"),n("span",{class:"token punctuation"},"."),s("deps"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// deps 是依赖集合"),s(`
    `),n("span",{class:"token keyword"},"const"),s(" deps "),n("span",{class:"token operator"},"="),s(" effectFn"),n("span",{class:"token punctuation"},"."),s("deps"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token comment"},"// 将 effectFn 从依赖集合中移除"),s(`
    deps`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"delete"),n("span",{class:"token punctuation"},"("),s("effectFn"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token comment"},"// 最后需要重置 effectFn.deps 数组"),s(`
  effectFn`),n("span",{class:"token punctuation"},"."),s("deps"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("target"),n("span",{class:"token punctuation"},","),s(" key")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" depsMap "),n("span",{class:"token operator"},"="),s(" bucket"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("depsMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" effects "),n("span",{class:"token operator"},"="),s(" depsMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("key"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token comment"},"// effects && effects.forEach(fn => fn()) // 删除，这个会导致死循环"),s(`

  `),n("span",{class:"token comment"},"// 构造一个新的集合 effectToRun 然后变量它，用来遍历删除，避免死循环"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" effectToRun "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Set"),n("span",{class:"token punctuation"},"("),s("effects"),n("span",{class:"token punctuation"},")"),s(`
  effectToRun`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"effectFn"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token function"},"effectFn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// 元素数据"),s(`
`),n("span",{class:"token keyword"},"const"),s(" data "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"ok"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token literal-property property"},"text"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello world'"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 拦截读取操作"),s(`
  `),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 将副作用函数 添加到桶中"),s(`
    `),n("span",{class:"token function"},"track"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token comment"},"// 返回属性值"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token comment"},"// 拦截设置操作"),s(`
  `),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},","),s(" newVal"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 设置属性值"),s(`
    target`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(` newVal
    `),n("span",{class:"token comment"},"// 把副作用函数从桶中取出并执行"),s(`
    `),n("span",{class:"token function"},"trigger"),n("span",{class:"token punctuation"},"("),s("target"),n("span",{class:"token punctuation"},","),s(" key"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token boolean"},"true"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// 使用 effect 注册副作用函数"),s(`
`),n("span",{class:"token function"},"effect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 匿名副作用函数"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'effect run - branch-cleanup'"),n("span",{class:"token punctuation"},")"),s(`
  window`),n("span",{class:"token punctuation"},"."),s("document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"querySelector"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'#effect-branch-cleanup'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("innerText "),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},"."),s(`ok
    `),n("span",{class:"token operator"},"?"),s(" obj"),n("span",{class:"token punctuation"},"."),s(`text
    `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'not'"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"changeText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("text "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'hello vue3'"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("notExist "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'hello vue3'"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"changeOk"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"val"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  obj`),n("span",{class:"token punctuation"},"."),s("ok "),n("span",{class:"token operator"},"="),s(` val
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=c(`<h2 id="_4-5-嵌套的-effect-与-effect-栈" tabindex="-1"><a class="header-anchor" href="#_4-5-嵌套的-effect-与-effect-栈" aria-hidden="true">#</a> 4.5 嵌套的 effect 与 effect 栈</h2><p>effect 是可以发生嵌套的，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">effectFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* ... */</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>effectFn1 里嵌套了 effectFn2，什么场景会有呢？比如，Foo 组件有 effect，Foo 组件里调用了 Bar 组件， Bar 里有 effect 的话，就会发送 effect 嵌套。</p><p>但是，前面的代码中，全局变量 activeEffect 只能存储一个，有嵌套时不能正确的恢复外层的副作用函数。</p><p>为了解决这个问题，我们需要一个副作用栈 effectStack，在副作用函数执行时，将当前副作用函数压入栈中，待副作用函数执行完毕后将其从栈中弹出，并始终让 activeEffect 指向栈顶的副作用函数。 代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 用一个全局变量存储被注册的副作用函数</span>
<span class="token keyword">let</span> activeEffect
<span class="token comment">// effect 栈</span>
<span class="token keyword">let</span> effectStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">effectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用 cleanup 函数完成清除工作</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>
    <span class="token comment">// 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span>
    activeEffect <span class="token operator">=</span> effectFn
    <span class="token comment">// 在调用副作用函数之前，将当前副作用函数压入栈中</span>
    effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 在当前副作用函数执行完毕后，将当前副作用函数弹出栈，</span>
    <span class="token comment">// 并把 activeEffect 还原为之前的值</span>
    effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// effectFn.deps 用来存储所有与该副作用函数相关联的依赖集合</span>
  effectFn<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token comment">// 执行副作用函数</span>
  <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-6-避免无限递归循环" tabindex="-1"><a class="header-anchor" href="#_4-6-避免无限递归循环" aria-hidden="true">#</a> 4.6 避免无限递归循环</h2><p>当有如下的代码时，会发生无限递归循环：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">/* ... */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> obj<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token comment">// 上句相当于</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>foo <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo <span class="token operator">+</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在副作用中，既读取 obj.foo，又设置 obj.foo，读取会触发 track 操作，将副作用函数放入桶中；设置会触发 trigger，从桶中取出副作用函数并执行。</p><p>但问题是该副作用函数正在执行中，还没执行完毕，就要开始下一次的执行。这将会导致无限递归调用自己，产生栈溢出。</p><p>通过分析发现，读取和设置操作是在同一个副作用函数内进行的。不管是 track 收集的副作用函数，还是 trigger 执行的副作用函数都是 activeEffect。 基于此，我们可以加个条件，<strong>如果 trigger 执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行</strong>，如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> effects <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>

  <span class="token comment">// 构造一个新的集合 effectToRun 然后变量它，用来遍历删除，避免死循环</span>
  <span class="token keyword">const</span> effectsToRun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  effects <span class="token operator">&amp;&amp;</span>
    effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>effectFn <span class="token operator">!==</span> activeEffectFn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果 trigger 执行的副作用函数与当前正在执行的副作用函数相同，则不触发执行</span>
        effectsToRun<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effectFn<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  effectsToRun<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effectFn</span> <span class="token operator">=&gt;</span> <span class="token function">effectFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-7-调度执行" tabindex="-1"><a class="header-anchor" href="#_4-7-调度执行" aria-hidden="true">#</a> 4.7 调度执行</h2>`,15);function z(q,A){const t=o("CodeDemo"),p=o("ExternalLinkIcon");return u(),i("div",null,[r,a(t,{id:"code-demo-49",type:"normal",title:"Proxy%20%E7%A4%BA%E4%BE%8B",code:"eJxlU01vElEU/Ss344IhobBw11A2xr1JjRvHxTDzpkwZ3tPhTSkhJI0xLaWfxmqMH63EWIhJATfVStE/w3uw8y94hzcgjKvJe/ece865c19NK/CSp61qWdvdAtdeMzTiOMTiK099tl1dsUmJGVoum8FyzqDZfMA5o8Co5blWEdFWwaQb5CHZ5noSgfemRwjP2YwCI01LaZtlFMlkQFy9Fc87Yr83Gn4Yn3XE3lC+7o/fvZCta4NajJY55AOrSDisASUVWCdhY2rQkHt8IdoHiJdH3RnYNrmJ0BpwlFyFRIF4HoMK8z07AXVF690sMlFsNPg8Pt2dtWD5zUjsQZhZD1umoGZQAGTLg0vZ+DrpDcTJG/nqCG2HhQ20xU0fPykokmpSwacE0d+NxQM1UpDfB6L5STT6sTpmH/24Ug1U+LRp27piYfio8eT3mXh/Lr6dy5222LlV9z7hgU9BeXmMVp6E9/XUsvvur/Gw+899edl9Kgz/yPQWUyhKTGxBRU0MSXOGbDZjuUaDYxUNRyf2fsqPX8TNtdxvT1qHS2Ed5t83rYLuUFjLgUP1ZDw0cD8ggL9t0upE1mTjVDQvloeAoFn6+nxplj0Z1AmoxV1cYjVfPUpdcanNKmmbWUGJUJ5+FhC/uk48hDBfT9z571kkkmmXUuKHu47TwC1KhzuI0pGyShrT/3N7OGlfipOXaqMMOnMRkubWFl+Vsjdrj0rRjm8F5G5iqqbV/wKl07HR"},{default:e(()=>[d,m]),_:1}),v,a(t,{id:"code-demo-80",type:"normal",title:"%E6%94%B9%E8%BF%9B%E5%90%8E%E7%9A%84%E7%A4%BA%E4%BE%8B",code:"eJyFVMtO20AU/ZWRu0gipYlEdyhhU7GvRNVN3YWxJ8Rgxq2xCQhFivoIj5AQiZRSKKBQtURQIIg2AkLKz3gmYdVf6J2MncYJUleW7XPOPffMvbMkpe1ZQxqVEpo+j3QtKUs4lcKq/fi1ZS4sPtbwrDkiS2OJOPwfk0li0rFtkyCTqIauzgBcTStkCj/HC3Y4AsCn3VfE3xNxAQaaFJWm56BKPI7alZp7lXOvjumHGr3I0Y3t++UNerpN39Y6hyfsskbz6+2d93T13G19ATBdbrGPdZkY2EaKauvzeLxrUCYyATnhFgkU174pCY0hgZRDgA7eBSWcIhG0JBOEQIW2Njv1dwD29R7UYJ8af27XaT0/8B2lCOr8KtDcbbv5ecAkCryjJGC9mmz1qFMdtokAAUmSrNegiGYABgGxakMmqknmbDTpqDOQThIRnEETmB+Exy0d0KMCd14888GaYisAXUI2HNEoCqWxYZgoY1qGFkJQlNPOr/uZUMxtfm2X876EOTntFXvGhyTMJaO9LFnhO1s57pw36cYW2yyCbf5jCmzZigWPKJrBi170Ivx6PhiSe3Uquh6eA1Zp3O/m6Uod2geY0NBTKNwv0BMXfrbq9HDf/yCyiimaFqSI/9C/x+rcVejuPr3YZ7kjOFjx3cK2YxEk+ngJbbzi37PRYOdnv9uts3+dzwU7j/LgXihGfwKCMlCsr4pIG0g9BltbG0jGbZZEJhA7Xb5he9/odUPMmGB5nadMa1xR0zD+KDnWnTWv917TyLYcjODIO9WaZ42tlOnaQTAEAPndZ/2Bc1t3/1simXj7F45wA70NXL+j5eID28BHzjRwzDCnwiFP2HJIKMJZ7u0OW92kxToaQexHFbZT1IRNbZ8UaPFSBODe5OHOEQBaLt3vHbLdn6xyzSc5Rkx7fEGHsQYS6NF80SN1GdxCRieamYlppurMYmLH3jjYWpzABlgxrXDo0fCNGYrEdEKwxa9BODxehq+bn1TvKuq/PEUUAUdJfz3nHfwk1L0TpOxfJUOwzw=="},{default:e(()=>[f,b]),_:1}),g,y,h,w,a(t,{id:"code-demo-96",type:"normal",title:"WeakMap%20%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A1%B6",code:"eJyNVk1PG0cY/itTV4rXkjFSe0OYS8WxUqVU7aHuYVmPjeNllq7XGBQhuaEYDLahghJCHAqVmiDagFMoMRjHf2Zn7JzyF/rOzuyXMaIne2ffj+d53o+dp5FZa06PTEQm07kFlEsnUxGcyWDNGps3jcWlsRJW83PqfCoyNTkOFlMpMjlTtCyDIINoek7Lg4M2q5Is/hYvWkoMDL9yHhF/nhwXxuAWiUeeFCDP+Diiqyv9yyP2W4vVz1JEM0jBQmnVUlESPU0RhIz8BLLMIo7zBwvCTKDoLNZ1A5UMU09H4Xw5RVKEh3q7T5+d0Oq53W32d0/6B7+w4ys35kxRy2MLohJcQt8Dka/VeUBIdDhUNSu3gKcdqjyW8DBmnkjzbzh7haOKC1CQjG2+Zuung/MO3dpjO3VIyV9ksaVYqgk/cZTHSzFh7jjQVsWDRte6wBix9x26cUTXW4DTbr8VppapavlQEC/EoLdLXx7Sd4es/IaWb8W5ia2iSZBw+AHsf+Tny45ePs6zD/3umY+zEMYZ5zS/U/UgXuEylCyQRWgDTp4H29gYYmh3GoIaiETXbuj1Fau+GRzXXKa5bBabI7i6nKDuLplleCWq3DzhMktiIg+trA5aK5BWqIfE6aDXHbRP6dY+re2lSKZIoMzQq3cF9ov6zzFrVkP9gPovL1njTyE9N8tlkPJZ0CIm4boxjq6hlaVSKKTAh+cojecL0Hmfbmv0bMW+/p3tn9vtst0+RXCK+u869HATXgKqCSRmr8Dj8i6VrqC76OWE32yObFyb18/YYdNu1/kogE6BbOsv2F6Ldm4C2ex2w4VJVy8GP+969KSf1w4yYbBrFB8OHxFnmmIODhhHAaZSl1oAGy6ExyAsh9DCF+Ix4BFCyEAf12ofX/0hprv/qsyqZSgSgKfdHVqtO9EFfpj4oQb8dHswQkXALKE4Grp95wkojDwZhXx0u8aO3odE5Ei5iD6CkIKefG4yrp8zbY54UjkIMqwca5bpdoMvDIch65XZZSdIbsTi4BETajqthFozsByhHSD/vWPjjKIcHD6qW7+OGJy78+qPzv9veyg19w01uFz8D7R4uDlHjZ1TCienaJOhfvBTydz3t4LYVCP8Xc9Hj9y/iYxhTqvarJIhKDmFMgQK6isvjKS0EMm+abCLE1q5G9tTWrhAOF9faAVZKxlvZAz2/IprfPdTA8gG/27CHu93Xgx971B43yXB9iEJOEOfoN3tPYQrRSQlJcYV8kjVenS7fk+NDB0ndCOrRGVgs0jQGCphzO8g0Rj3t28PWHWH1lvoC8T+PgbqIjvI0P9rk9YvBAP7pgITKwxgsGCZMFjqu9f8E5/gdwoEDhCLbyzh4FpzA2JY04s5aBlYCP7nq5QjaaOUSBtacQ4TK/FTEZtLj7EOSA1TiX4+6uIUjSVyhGCT34ZAZze7+3Hzyh+8Q8lbkAs06d5+For4y6j7yoM4/BpKFFn+D/tLmVo="},{default:e(()=>[j,x]),_:1}),E,M,F,n("p",null,[s("WeakMap 对 key 是弱引用，WeakMap 的 key 是不可枚举的，不影响垃圾回收器的工作。 参考资料："),n("a",T,[s("MDN"),a(p)])]),a(t,{id:"code-demo-121",type:"normal",title:"Map%20%E5%92%8C%20WeakMap",code:"eJxdj81qwkAUhV/lko0TCBFdpvQRuu4mm6mMpTWdkSbWlpB1EVpd9Bda2lpw5SL+ofjzOM6Qna/gnSSiuLp37jlzPk5oXPuGY1QE9wO4oXU4Bc6acEbrxHR5dm4yWttL5/jKZZefkGqDV4IrwYGYELocIPtTFQL9oZ4OlCDaKxf0NlVwOlDWitYw3/ZZQNBvQQmzYYdNz2i2oIznyMzAxSLITrxe9lTrRT4P5ONCozarpySeqM92ylejrvpuJf99+fWjXqdZHeEx2xOXpKCja+zBL1gpXK/EtDm7D3DcUa/BEISYvC+ojz81fkvaM9l5B3Qjaz3/lYPhoSDjeTLs6m5HtLwMwvINw41oCzifnJM="},{default:e(()=>[S,B]),_:1}),D,a(t,{id:"code-demo-176",type:"normal",title:"%E5%88%86%E6%94%AF%E5%88%87%E6%8D%A2%E4%B8%8E%20cleanup%20demo",code:"eJx9V1tPG0cU/itTV4rXCphKfaNAHyr6UlWpmqh9wH1Y1mPs2Jmly5qLIiQT7sQGpFDCvSYqF1Fhm0LBYMB/xrO2n/IXcuayN9viBbw75/Z9850zs28DcfNNKtAb6IsmxlEi2h8J4FgMa2b3sKESLd6tpbBK0qORwEBfD5gMREjfcNo0dYJ0oqUSWhI8tLhKRvArPGkqITD8gT8i9tzXI4yZW4KMps0IQcicGsXcC2vJYX0yEmAv+RNm+fXh12E9Kd625niRVPA4JmbYVI0RbIalF2SNkB478YufIiTQFXg9BrB6ehA936LvTulysfawV984re/MWYfXEaLpZMxEw2nwN1E/IngC/Y7V5M/qKIAg4Ae2tXKmVj6j86f0IkPXtpqLayJY49O/1uUpXchCMCcwXXyw/ipFSAriqZqZGMeDnMkIiZBYmsAbIE2Qq8RICL3lsHkV4u2PBOpQQqh/QKwhBFU0SrMQG8ltQCIJLWStpXWrPN/c/ofeHEF+YS+tFDseAJFh6MMHN4u1fNI4zFofrz/fZ2lpgc5fNwqPtfIdGNHlnFXNWFeVTshYLC8yKNeOKRZjhHGH0DT7A1nt1XAUj44xQq39I8GgtZyx9pZr5dVG8aglT323TOcvGzMbUELtcb/x/2Zzd4GuL7GY/oD9aOgPmUlA6lCx7cEKg7I8W2EaqpZUhJC6UBJPyS1h0f47hOr8WOu7V9bqUaO6QXcPmFkihpSvvBYhZGAzbXAqWIz8rZUrIBEf1SqroLpa+ZyubdLHj4jVD1JjG1CYrd3+bW0VhdgQvEX1iwo9eA+LUFWvhDDG4jJtSVdAL8QbhvgSBief7fbxO+tgr1bOMbL3Tr3ZlratzRKt3HmywS7YZQriHXjSTxKD7IRjTsIupLjlsBbi7RPyiYAu5CQXgIYR4SDw0yG4cIl4CfUIImSg5mK2uf9J6Ke+n3EkJGTLozvCaVHC5/udDixCzbIUziGTgI9AYeTQKOij61krf+MjkVXKSHQr8DHo0GcnY/yBrSRPMgdBWpmzVlaebknrpkJX8nSp5O0Tu+pzFoX9DqvRqOJTqozPDWnpwuHcIbMlj8DPmL1kVbR2JSOMjxGnHl/riGZlnV2Zk2W1LYdH02NxTkdbn7YNNadNmzM5urrgzjUoTWASuZhVTDeQwvY7ATR/8x386/MPkXAKkxEzDivPnzsbZXPDiGnBao9suXO+WEMJPo5sQtzCQPTeOEBC/aQCs9uVBfhDldg/uR0d7GXo+mpzL9M4nmku5uoPhZZB6OLthI0hbx9+iZERbHQYfy68p4ZMx/Hgzj9eufdse6LXbINnz+yfYdi1QVWLwzHJDkN2qoQ4p0t5IA3asFHdZmq936HF+8bilXVeoY9n9dUigygYO5hrZvJC1NCqIAzZGyLDK/3XNMhl7hpoled6YRbiihNKyMpJ1pyp0vmcJ4cfmYjl9rDEwNF5LBxM7lk/4DmcbNUzlPOz9as86+5cwb6mRFVThRycZz3ZC9uXxl38LgWXrF4UjONUSkcTupGKBuE9DyU84TYli/vF0CenFBapyz3o3h9bS2eNYgXmsPUhJy8S7l57heH0uX82IKfpxQEnTNsPV/dGw49QenFgZU5o5t4rHXkMDYE976RpjtGts/AI2nfr9J5DfJ4CzN/UlLde4dKSzJNFcANOjgcbun6EvrN78Y7eXovbho20vZP8mGCvbDDTsMQ3ufZQZdc6IQAkLpNttxd5WfRcCdkOZKt0vXVA26LUUzic0keUoAxsgDS7kf8qH+TlTSRIVJ8IR3Ut/YZdqP9MY2PqJQwhzdQNJfh1x6+AYCicIAQb7GoPzMmbOgf7PX9ichTPIEqim0EbsjvNPd8KUs/SDwJKHY+n8bfgKZYgyuBkApTcutxyStjfB+OOAER54AevuHlg+gsgg89A"},{default:e(()=>[C,Y]),_:1}),I])}const Z=l(k,[["render",z],["__file","chapter04.html.vue"]]);export{Z as default};
