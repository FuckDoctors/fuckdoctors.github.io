import{_ as t,Y as p,Z as o,a1 as a,a8 as e,$ as n,a0 as c,E as l}from"./framework-ac4816b6.js";const u={},i=e('<h1 id="组合式函数" tabindex="-1"><a class="header-anchor" href="#组合式函数" aria-hidden="true">#</a> 组合式函数</h1><h2 id="什么是-组合式函数" tabindex="-1"><a class="header-anchor" href="#什么是-组合式函数" aria-hidden="true">#</a> 什么是“组合式函数”？</h2><p>在 Vue 应用的概念中，“组合式函数”是一个利用 Vue 组合式 API 来封装和复用<strong>有状态逻辑</strong>的函数。</p><p>当构建前端应用时，我们常常需要复用公共任务的逻辑，可以封装为<strong>无状态的逻辑</strong>。有状态逻辑负责管理会随时间而变化的状态。</p><h2 id="鼠标跟踪器示例" tabindex="-1"><a class="header-anchor" href="#鼠标跟踪器示例" aria-hidden="true">#</a> 鼠标跟踪器示例</h2><p>如果我们想在多个组件中复用这个相同的逻辑，我们可以把这个逻辑以一个组合式函数的形式提取到外部文件中。</p>',6),d=n("p",null,"如你所见，核心逻辑一点都没有被改变，我们做的只是把它移到一个外部函数中去，并返回需要暴露的状态。 然而更酷的一点是，你还可以嵌套多个组合式函数：一个组合式函数可以调用一个或多个其他的组合式函数。 这使得我们可以像使用多个组件组合成整个应用一样，用多个较小且逻辑独立的单元来组合形成复杂的逻辑。 实际上，这正是我们决定将实现了这一设计模式的 API 集合命名为组合式 API 的原因。",-1),r=n("p",null,"举个例子，我们可以将添加和清除 DOM 事件监听器的逻辑放入一个组合式函数中：",-1),g=n("h2",{id:"异步状态示例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步状态示例","aria-hidden":"true"},"#"),c(" 异步状态示例")],-1),b=n("p",null,[n("code",null,"useMouse()"),c(" 组合式函数没有接收任何参数，因此让我们再来看一个需要接收一个参数的组合式函数示例。 在做异步数据请求时，我们常常需要处理不同的状态：加载中、加载成功和加载失败。")],-1),k=e(`<p>这个版本的 useFetch() 现在同时可以接收静态的 URL 字符串和 URL 字符串的 ref。 当通过 isRef() 检测到 URL 是一个动态 ref 时，它会使用 watchEffect() 启动一个响应式的 effect。 该 effect 会立刻执行一次，并在此过程中将 URL 的 ref 作为依赖进行跟踪。 当 URL 的 ref 发生改变时，数据就会被重置，并重新请求。</p><h2 id="约定和最佳实践" tabindex="-1"><a class="header-anchor" href="#约定和最佳实践" aria-hidden="true">#</a> 约定和最佳实践</h2><h3 id="命名" tabindex="-1"><a class="header-anchor" href="#命名" aria-hidden="true">#</a> 命名</h3><p>组合式函数约定用驼峰命名法命名，并以 <code>use</code> 作为开头。</p><h3 id="输入参数" tabindex="-1"><a class="header-anchor" href="#输入参数" aria-hidden="true">#</a> 输入参数</h3><p>尽管其响应性不依赖 ref，组合式函数仍可接收 ref 参数。如果编写的组合式函数会被其他开发者使用，你最好在处理输入参数时兼容 ref 而不只是原始的值。unref() 工具函数会对此非常有帮助：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> unref <span class="token punctuation">}</span> fron <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">function</span> <span class="token function">useFeature</span><span class="token punctuation">(</span><span class="token parameter">maybeRef</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 若 maybeRef 确实是一个 Ref，则返回它的 value</span>
  <span class="token comment">// 否则，maybeRef 原样返回</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">unref</span><span class="token punctuation">(</span>maybeRef<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的组合式函数在接收 ref 为参数时会产生响应式 effect，请确保使用 <code>watch()</code> 显示地监听次 ref, 或者在 <code>watchEffect()</code> 中调用 <code>unref()</code> 来正确地追踪。</p><h3 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h3><p>你可能已经注意到了，我们一直在组合式函数中使用 ref() 而不是 reactive()。我们推荐的约定是组合式函数始终返回 <code>ref</code> 对象，这样该函数在组件中解构之后仍可以保持响应性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// x 和 y 是两个 ref 对象</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从组合式函数返回一个响应式对象会导致在对象解构过程中丢失与组合式函数内状态的响应性连接。与之相反，ref 则可以维持这一响应性连接。</p><p>如果你更希望以对象 <code>property</code> 的形式从组合式函数中返回状态，你可以将要返回的对象用 <code>reactive()</code> 包装，这样其中的 ref 会被自动解包，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// mouse.x 链接到了原来的 x ref</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>Mouse position is at: {{ mouse.x }}, {{ mouse.y }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="副作用" tabindex="-1"><a class="header-anchor" href="#副作用" aria-hidden="true">#</a> 副作用</h3><p>在组合式函数中的确可以执行副作用 (例如：添加 DOM 事件监听器或者请求数据)，但请注意以下规则：</p><ul><li>如果你在一个应用中使用了服务器端渲染 (SSR)，请确保在后置加载的声明钩子上执行 DOM 相关的副作用，例如：onMounted()。 这些钩子仅会在浏览器中使用，因此可以确保能访问到 DOM。</li><li><strong>确保在 onUnmounted() 时清理副作用。</strong> 举个例子，如果一个组合式函数设置了一个事件监听器，它就应该在 onUnmounted() 中被移除 (就像我们在 useMouse() 示例中看到的一样)。 当然也可以像之前的 useEventListener() 示例那样，使用一个组合式函数来自动帮你做这些事。</li></ul><h3 id="使用限制" tabindex="-1"><a class="header-anchor" href="#使用限制" aria-hidden="true">#</a> 使用限制</h3><p>组合式函数在 <code>&lt;script setup&gt;</code> 或 <code>setup()</code> 钩子中，应始终被同步地调用。在某些场景下，你也可以在像 <code>onMounted()</code> 这样的生命周期钩子中使用他们。</p><p>这些是 Vue 得以确定当前活跃的组件实例的条件。有能力对活跃的组件实例进行访问是必要的，以便：</p><ol><li>可以在组合式函数中注册生命周期钩子</li><li>计算属性和监听器可以连接到当前组件实例，以便在组件卸载时处理掉。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>&lt;script setup&gt;</code> 是唯一在调用 <code>await</code> 之后仍可调用组合式函数的地方。编译器会在异步操作之后自动为你恢复当前活跃的组件实例。</p></div><h3 id="为更好的代码组织抽取组合式函数" tabindex="-1"><a class="header-anchor" href="#为更好的代码组织抽取组合式函数" aria-hidden="true">#</a> 为更好的代码组织抽取组合式函数</h3><p>抽取组合式函数不仅是为了复用，也是为了代码组织。随着组件复杂度的增高，你可能会最终发现组件多得难以查询和理解。 组合式 API 会给予你足够的灵活性，让你可以基于逻辑问题将组件代码拆分成更小的函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
  <span class="token keyword">import</span> <span class="token punctuation">{</span>useFeatureA<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./featureA.js&#39;</span> <span class="token keyword">import</span> <span class="token punctuation">{</span>useFeatureB<span class="token punctuation">}</span> <span class="token keyword">from</span>
  <span class="token string">&#39;./featureB.js&#39;</span> <span class="token keyword">import</span> <span class="token punctuation">{</span>useFeatureC<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./featureC.js&#39;</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">=</span>
  <span class="token function">useFeatureA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>baz<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFeatureB</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>quz<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFeatureC</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在选项式-api-中使用组合式函数" tabindex="-1"><a class="header-anchor" href="#在选项式-api-中使用组合式函数" aria-hidden="true">#</a> 在选项式 API 中使用组合式函数</h3><p>如果你正在使用选项式 API，组合式函数必须在 <code>setup()</code> 中调用。且其返回的绑定必须在 <code>setup()</code> 中<strong>返回</strong>，以便暴露给 this 及其模板：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMouse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./mouse.js&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useFetch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./fetch.js&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">&#39;xx&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// setup 中暴露的 property，可以通过 this 访问</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function m(I,v){const s=l("Playground");return p(),o("div",null,[i,a(s,{key:"1d9a3cb2",title:"%E9%BC%A0%E6%A0%87%E8%B7%9F%E8%B8%AA%E5%99%A8%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHVzZU1vdXNlIH0gZnJvbSAnLi9tb3VzZS5qcydcblxuY29uc3QgeyB4LCB5IH0gPSB1c2VNb3VzZSgpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPk1vdXNlIHBvc2l0aW9uIGlzIGF0IHt7IHggfX0sIHt7IHkgfX08L3RlbXBsYXRlPlxuIiwibW91c2UuanMiOiJpbXBvcnQgeyBvbk1vdW50ZWQsIG9uVW5tb3VudGVkLCByZWYgfSBmcm9tICd2dWUnXG5cbi8vIOaMieeFp%2BaDr%2BS%2Bi%2B%2B8jOe7hOWQiOW8j%2BWHveaVsOWQjeS7pSB1c2Ug5byA5aS0XG5leHBvcnQgZnVuY3Rpb24gdXNlTW91c2UoKSB7XG4gIC8vIOiiq%2Be7hOWQiOW8j%2BWwgeijheWSjOeuoeeQhueahOeKtuaAgVxuICBjb25zdCB4ID0gcmVmKDApXG4gIGNvbnN0IHkgPSByZWYoMClcblxuICAvLyDnu4TlkIjlvI%2Flh73mlbDlj6%2Fku6Xpmo%2Fml7bmlLnlj5jlhbbnrqHnkIbnmoTnirbmgIFcbiAgY29uc3QgdXBkYXRlID0gZXZlbnQgPT4ge1xuICAgIHgudmFsdWUgPSBldmVudC5wYWdlWFxuICAgIHkudmFsdWUgPSBldmVudC5wYWdlWVxuICB9XG5cbiAgLy8gYSBjb21wb3NhYmxlIGNhbiBhbHNvIGhvb2sgaW50byBpdHMgb3duZXIgY29tcG9uZW50J3NcbiAgLy8gbGlmZWN5Y2xlIHRvIHNldHVwIGFuZCB0ZWFyZG93biBzaWRlIGVmZmVjdHMuXG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHVwZGF0ZSlcbiAgfSlcbiAgb25Vbm1vdW50ZWQoKCkgPT4ge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB1cGRhdGUpXG4gIH0pXG5cbiAgLy8gZXhwb3NlIG1hbmFnZWQgc3RhdGUgYXMgcmV0dXJuIHZhbHVlXG4gIHJldHVybiB7IHgsIHkgfVxufVxuIn0%3D"}),d,r,a(s,{key:"7b3ac5c6",title:"%E9%BC%A0%E6%A0%87%E8%B7%9F%E8%B8%AA%E5%99%A8%E7%A4%BA%E4%BE%8B%20%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHVzZU1vdXNlIH0gZnJvbSAnLi9tb3VzZS5qcydcblxuY29uc3QgeyB4LCB5IH0gPSB1c2VNb3VzZSgpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPk1vdXNlIHBvc2l0aW9uIGlzIGF0IHt7IHggfX0sIHt7IHkgfX08L3RlbXBsYXRlPlxuIiwibW91c2UuanMiOiJpbXBvcnQgeyBvbk1vdW50ZWQsIG9uVW5tb3VudGVkLCByZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VFdmVudExpc3RlbmVyIH0gZnJvbSAnLi9ldmVudC5qcydcblxuLy8g5oyJ54Wn5oOv5L6L77yM57uE5ZCI5byP5Ye95pWw5ZCN5LulIHVzZSDlvIDlpLRcbmV4cG9ydCBmdW5jdGlvbiB1c2VNb3VzZSgpIHtcbiAgLy8g6KKr57uE5ZCI5byP5bCB6KOF5ZKM566h55CG55qE54q25oCBXG4gIGNvbnN0IHggPSByZWYoMClcbiAgY29uc3QgeSA9IHJlZigwKVxuXG4gIHVzZUV2ZW50TGlzdGVuZXIod2luZG93LCAnbW91c2Vtb3ZlJywgZXZlbnQgPT4ge1xuICAgIHgudmFsdWUgPSBldmVudC5wYWdlWFxuICAgIHkudmFsdWUgPSBldmVudC5wYWdlWVxuICB9KVxuXG4gIC8vIGV4cG9zZSBtYW5hZ2VkIHN0YXRlIGFzIHJldHVybiB2YWx1ZVxuICByZXR1cm4geyB4LCB5IH1cbn1cbiIsImV2ZW50LmpzIjoiaW1wb3J0IHsgb25Nb3VudGVkLCBvblVubW91bnRlZCB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUV2ZW50TGlzdGVuZXIodGFyZ2V0LCBldmVudCwgY2FsbGJhY2spIHtcbiAgb25Nb3VudGVkKCgpID0%2BIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaykpXG4gIG9uVW5tb3VudGVkKCgpID0%2BIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaykpXG59XG4ifQ%3D%3D"}),g,b,a(s,{key:"63922994",title:"%E5%BC%82%E6%AD%A5%E7%8A%B6%E6%80%81%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkLCByZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VGZXRjaCB9IGZyb20gJy4vdXNlRmV0Y2guanMnXG5cbmNvbnN0IGJhc2VVcmwgPSAnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zLydcbmNvbnN0IGlkID0gcmVmKCcxJylcbmNvbnN0IHVybCA9IGNvbXB1dGVkKCgpID0%2BIGJhc2VVcmwgKyBpZC52YWx1ZSlcblxuY29uc3QgeyBkYXRhLCBlcnJvciwgcmV0cnkgfSA9IHVzZUZldGNoKHVybClcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU%2BXG4gIExvYWQgdG9kbyBpZDpcbiAgPGJ1dHRvbiB2LWZvcj1cImkgaW4gNVwiIEBjbGljaz1cImlkID0gaVwiPlxuICAgIHt7IGkgfX1cbiAgPC9idXR0b24%2BXG5cbiAgPGRpdiB2LWlmPVwiZXJyb3JcIj5cbiAgICA8cD5Pb3BzISBFcnJvciBlbmNvdW50ZXJlZDoge3sgZXJyb3IubWVzc2FnZSB9fTwvcD5cbiAgICA8YnV0dG9uIEBjbGljaz1cInJldHJ5XCI%2BUmV0cnk8L2J1dHRvbj5cbiAgPC9kaXY%2BXG4gIDxkaXYgdi1lbHNlLWlmPVwiZGF0YVwiPlxuICAgIERhdGEgTG9hZGVkOlxuICAgIDxwcmU%2Be3sgZGF0YSB9fTwvcHJlPlxuICA8L2Rpdj5cbiAgPGRpdiB2LWVsc2U%2BTG9hZGluZy4uLjwvZGl2PlxuPC90ZW1wbGF0ZT5cbiIsInVzZUZldGNoLmpzIjoiaW1wb3J0IHsgaXNSZWYsIHJlZiwgdW5yZWYsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRmV0Y2godXJsKSB7XG4gIGNvbnN0IGRhdGEgPSByZWYobnVsbClcbiAgY29uc3QgZXJyb3IgPSByZWYobnVsbClcblxuICBmdW5jdGlvbiBkb0ZldGNoKCkge1xuICAgIC8vIHJlc2V0IHN0YXRlIGJlZm9yZSBmZXRjaGluZy4uXG4gICAgZGF0YS52YWx1ZSA9IG51bGxcbiAgICBlcnJvci52YWx1ZSA9IG51bGxcblxuICAgIC8vIHVucmVmKCkgdW53cmFwcyBwb3RlbnRpYWwgcmVmc1xuICAgIGZldGNoKHVucmVmKHVybCkpXG4gICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgIC50aGVuKGpzb24gPT4gKGRhdGEudmFsdWUgPSBqc29uKSlcbiAgICAgIC5lcnJvcihlcnIgPT4gKGVycm9yLnZhbHVlID0gZXJyKSlcbiAgfVxuXG4gIGlmIChpc1JlZih1cmwpKSB7XG4gICAgLy8gc2V0dXAgcmVhY3RpdmUgcmUtZmV0Y2ggaWYgaW5wdXQgVVJMIGlzIGEgcmVmXG4gICAgLy8g6Iul6L6T5YWl55qEIFVSTCDmmK%2FkuIDkuKogcmVm77yM6YKj5LmI5ZCv5Yqo5LiA5Liq5ZON5bqU5byP55qE6K%2B35rGCXG4gICAgd2F0Y2hFZmZlY3QoZG9GZXRjaClcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGhlcndpc2UsIGp1c3QgZmV0Y2ggb25jZVxuICAgIC8vIGFuZCBhdm9pZCB0aGUgb3ZlcmhlYWQgb2YgYSB3YXRjaGVyXG4gICAgLy8g6YG%2F5YWN55uR5ZCs5Zmo55qE6aKd5aSW5byA6ZSAXG4gICAgZG9GZXRjaCgpXG4gIH1cblxuICByZXR1cm4geyBkYXRhLCBlcnJvciwgcmV0cnk6IGRvRmV0Y2ggfVxufVxuIn0%3D"}),k])}const B=t(u,[["render",m],["__file","composables.html.vue"]]);export{B as default};
