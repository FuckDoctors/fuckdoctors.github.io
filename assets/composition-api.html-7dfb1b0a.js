import{_ as i,O as l,a1 as r,S as e,a2 as o,U as t,B as a}from"./framework-aea42fb6.js";const s={},c=e("h1",{id:"组合式-api-faq",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#组合式-api-faq","aria-hidden":"true"},"#"),o(" 组合式 API FAQ")],-1),_=e("h2",{id:"什么是组合式-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是组合式-api","aria-hidden":"true"},"#"),o(" 什么是组合式 API？")],-1),d=e("p",null,"组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。 它包含以下 API:",-1),h={href:"https://vuejs.org/api/reactivity-core.html",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"ref()",-1),p=e("code",null,"reactive()",-1),f={href:"https://vuejs.org/api/composition-api-lifecycle.html",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"onMounted()",-1),A=e("code",null,"onUnmounted()",-1),I={href:"https://vuejs.org/api/composition-api-dependency-injection.html",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"privide()",-1),v=e("code",null,"inject()",-1),x={href:"https://github.com/vuejs/composition-api",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"@vue/composition-api",-1),g=e("p",null,"虽然，响应式 API 是基于函数的组合，但是，组合式 API 并不是函数式编程。 组合式 API 是以 Vue 中数据可变的、细粒度的响应性系统为基础的，而函数式编程更强调数据不可变。",-1),k=e("h2",{id:"为什么要有组合式-api",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#为什么要有组合式-api","aria-hidden":"true"},"#"),o(" 为什么要有组合式 API？")],-1),V=e("ul",null,[e("li",null,"更好的逻辑复用"),e("li",null,"更灵活的代码组织"),e("li",null,"更好的类型推导"),e("li",null,"更小的打包体积")],-1);function j(B,y){const n=a("ExternalLinkIcon");return l(),r("div",null,[c,_,d,e("ul",null,[e("li",null,[e("a",h,[o("响应式 API"),t(n)]),o(": 例如 "),u,o(" 和 "),p,o("，使我们可以直接创建响应式状态、计算属性和侦听器。")]),e("li",null,[e("a",f,[o("生命周期钩子"),t(n)]),o(": 例如，"),m,o(" 和 "),A,o(", 使我们可以在组件的各个生命周期阶段添加逻辑。")]),e("li",null,[e("a",I,[o("依赖注入"),t(n)]),o(": 例如 "),P,o(" 和 "),v,o("，使我们可以在使用响应性 API 时，利用 Vue 的依赖注入系统。")])]),e("p",null,[o("组合式 API 是 Vue 3 的内置功能，而要在 Vue 2 中使用，则需要使用 "),e("a",x,[b,t(n)]),o("。")]),g,k,V])}const N=i(s,[["render",j],["__file","composition-api.html.vue"]]);export{N as default};
