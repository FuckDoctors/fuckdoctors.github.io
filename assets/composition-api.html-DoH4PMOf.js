import{_ as e,c as t,o,d as r}from"./app-DS_fRZ39.js";const n={},a=r('<h1 id="组合式-api-faq" tabindex="-1"><a class="header-anchor" href="#组合式-api-faq"><span>组合式 API FAQ</span></a></h1><h2 id="什么是组合式-api" tabindex="-1"><a class="header-anchor" href="#什么是组合式-api"><span>什么是组合式 API？</span></a></h2><p>组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。<br> 它包含以下 API:</p><ul><li><a href="https://vuejs.org/api/reactivity-core.html" target="_blank" rel="noopener noreferrer">响应式 API</a>: 例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li><li><a href="https://vuejs.org/api/composition-api-lifecycle.html" target="_blank" rel="noopener noreferrer">生命周期钩子</a>: 例如，<code>onMounted()</code> 和 <code>onUnmounted()</code>, 使我们可以在组件的各个生命周期阶段添加逻辑。</li><li><a href="https://vuejs.org/api/composition-api-dependency-injection.html" target="_blank" rel="noopener noreferrer">依赖注入</a>: 例如 <code>privide()</code> 和 <code>inject()</code>，使我们可以在使用响应性 API 时，利用 Vue 的依赖注入系统。</li></ul><p>组合式 API 是 Vue 3 的内置功能，而要在 Vue 2 中使用，则需要使用 <a href="https://github.com/vuejs/composition-api" target="_blank" rel="noopener noreferrer"><code>@vue/composition-api</code></a>。</p><p>虽然，响应式 API 是基于函数的组合，但是，组合式 API 并不是函数式编程。<br> 组合式 API 是以 Vue 中数据可变的、细粒度的响应性系统为基础的，而函数式编程更强调数据不可变。</p><h2 id="为什么要有组合式-api" tabindex="-1"><a class="header-anchor" href="#为什么要有组合式-api"><span>为什么要有组合式 API？</span></a></h2><ul><li>更好的逻辑复用</li><li>更灵活的代码组织</li><li>更好的类型推导</li><li>更小的打包体积</li></ul>',8),i=[a];function c(p,l){return o(),t("div",null,i)}const s=e(n,[["render",c],["__file","composition-api.html.vue"]]),h=JSON.parse('{"path":"/notes/frontend/vue/vue3/extra/composition-api.html","title":"组合式 API FAQ","lang":"zh-CN","frontmatter":{"order":10,"category":["笔记","frontend","vue"],"tag":["vue3"],"description":"组合式 API FAQ 什么是组合式 API？ 组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。 它包含以下 API: 响应式 API: 例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子: 例如，onMounted() 和 onUnmoun...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/vue3/extra/composition-api.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"组合式 API FAQ"}],["meta",{"property":"og:description","content":"组合式 API FAQ 什么是组合式 API？ 组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。 它包含以下 API: 响应式 API: 例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子: 例如，onMounted() 和 onUnmoun..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-21T05:57:34.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2023-02-21T05:57:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合式 API FAQ\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-21T05:57:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"什么是组合式 API？","slug":"什么是组合式-api","link":"#什么是组合式-api","children":[]},{"level":2,"title":"为什么要有组合式 API？","slug":"为什么要有组合式-api","link":"#为什么要有组合式-api","children":[]}],"git":{"createdTime":1655115609000,"updatedTime":1676959054000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":4}]},"readingTime":{"minutes":1.03,"words":308},"filePathRelative":"notes/frontend/vue/vue3/extra/composition-api.md","localizedDate":"2022年6月13日","excerpt":"\\n<h2>什么是组合式 API？</h2>\\n<p>组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。<br>\\n它包含以下 API:</p>\\n<ul>\\n<li><a href=\\"https://vuejs.org/api/reactivity-core.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">响应式 API</a>: 例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li>\\n<li><a href=\\"https://vuejs.org/api/composition-api-lifecycle.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">生命周期钩子</a>: 例如，<code>onMounted()</code> 和 <code>onUnmounted()</code>, 使我们可以在组件的各个生命周期阶段添加逻辑。</li>\\n<li><a href=\\"https://vuejs.org/api/composition-api-dependency-injection.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">依赖注入</a>: 例如 <code>privide()</code> 和 <code>inject()</code>，使我们可以在使用响应性 API 时，利用 Vue 的依赖注入系统。</li>\\n</ul>","autoDesc":true}');export{s as comp,h as data};
