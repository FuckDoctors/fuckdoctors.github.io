const e=JSON.parse('{"key":"v-108c4cf8","path":"/notes/frontend/vue/vue3/extra/composition-api.html","title":"组合式 API FAQ","lang":"zh-CN","frontmatter":{"order":10,"category":["笔记","frontend","vue"],"tag":["vue3"],"description":"组合式 API FAQ 什么是组合式 API？ 组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。 它包含以下 API: 响应式 API: 例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子: 例如，onMounted() 和 onUnmounted(), 使我们可以在组件的各个生命周期阶段添加逻辑。 依赖注入: 例如 privide() 和 inject()，使我们可以在使用响应性 API 时，利用 Vue 的依赖注入系统。","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/vue3/extra/composition-api.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"组合式 API FAQ"}],["meta",{"property":"og:description","content":"组合式 API FAQ 什么是组合式 API？ 组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。 它包含以下 API: 响应式 API: 例如 ref() 和 reactive()，使我们可以直接创建响应式状态、计算属性和侦听器。 生命周期钩子: 例如，onMounted() 和 onUnmounted(), 使我们可以在组件的各个生命周期阶段添加逻辑。 依赖注入: 例如 privide() 和 inject()，使我们可以在使用响应性 API 时，利用 Vue 的依赖注入系统。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-25T10:33:34.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2023-04-25T10:33:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组合式 API FAQ\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-25T10:33:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"https://www.zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"什么是组合式 API？","slug":"什么是组合式-api","link":"#什么是组合式-api","children":[]},{"level":2,"title":"为什么要有组合式 API？","slug":"为什么要有组合式-api","link":"#为什么要有组合式-api","children":[]}],"git":{"createdTime":1682418814000,"updatedTime":1682418814000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":1.03,"words":308},"filePathRelative":"notes/frontend/vue/vue3/extra/composition-api.md","localizedDate":"2023年4月25日","excerpt":"<h1> 组合式 API FAQ</h1>\\n<h2> 什么是组合式 API？</h2>\\n<p>组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明式选项的方式来书写 Vue 组件。\\n它包含以下 API:</p>\\n<ul>\\n<li><a href=\\"https://vuejs.org/api/reactivity-core.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">响应式 API</a>: 例如 <code>ref()</code> 和 <code>reactive()</code>，使我们可以直接创建响应式状态、计算属性和侦听器。</li>\\n<li><a href=\\"https://vuejs.org/api/composition-api-lifecycle.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">生命周期钩子</a>: 例如，<code>onMounted()</code> 和 <code>onUnmounted()</code>, 使我们可以在组件的各个生命周期阶段添加逻辑。</li>\\n<li><a href=\\"https://vuejs.org/api/composition-api-dependency-injection.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">依赖注入</a>: 例如 <code>privide()</code> 和 <code>inject()</code>，使我们可以在使用响应性 API 时，利用 Vue 的依赖注入系统。</li>\\n</ul>","autoDesc":true}');export{e as data};
