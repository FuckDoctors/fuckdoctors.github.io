import{_ as p,r as c,o as i,c as l,d as s,a,b as n,h as e}from"./app-37efb2f8.js";const d={},u=e('<h1 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>除了 Vue 内置的一系列指令 (比如 v-model 或 v-show) 之外，Vue 还允许你注册自定义的指令。</p><p>我们已经介绍了两种在 Vue 中重用代码的方式：<strong>组件</strong>和<strong>组合式函数</strong>。组件是主要的构建模块，而组合式函数则侧重于有状态的逻辑。另一方面，自定义指令主要是为了重用涉及普通元素的底层 DOM 访问的逻辑。</p><p>一个自定义指令被定义为一个包含类似于组件的生命周期钩子的对象。钩子接收指令绑定到的元素。下面是一个自定义指令的例子，当一个 input 元素被 Vue 插入到 DOM 中后，它将被聚焦：</p>',5),r=e(`<p>和组件类似，自定义指令在模板中使用前必须先注册。在上面的例子中，我们使用 directives 选项完成了指令的局部注册。</p><p>将一个自定义指令全局注册到应用层级也是一种通用的做法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 全局注册，使 v-focus 在所有组件中都可用</span>
app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令。应该尽可能地通过像 <code>v-bind</code> 这样的内置指令以使用声明式的模板，因为这更高效，且对服务端渲染也更友好。</p></div><h2 id="指令钩子" tabindex="-1"><a class="header-anchor" href="#指令钩子" aria-hidden="true">#</a> 指令钩子</h2><p>一个指令的定义对象可以提供几种钩子函数 (都是可选的)：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// called before bound element&#39;s attributes</span>
  <span class="token comment">// or event listeners are applied</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> preVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// see below for details on arguments</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// called right before the element is inserted into the DOM.</span>
  <span class="token function">beforeCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// called when the bound element&#39;s parent component</span>
  <span class="token comment">// and all its children are mounted.</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// called before the parent component is updated</span>
  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// called before the parent component is updated</span>
  <span class="token comment">// all of its children have updated</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// called before the parent component is unmounted</span>
  <span class="token function">beforeUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// called when the parent component is unmounted</span>
  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="钩子参数" tabindex="-1"><a class="header-anchor" href="#钩子参数" aria-hidden="true">#</a> 钩子参数</h3><p>指令的钩子会传递以下几种参数：</p><ul><li><code>el</code>: 指令绑定到的元素。这可以用于直接操作 DOM。</li><li><code>binding</code>: 一个对象，包含以下 property。 <ul><li><code>value</code>: 传递给指令的值。例如在 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，值是 2。</li><li><code>oldValue</code>: 之前的值，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 中可用。无论值是否更改，它都可用。</li><li><code>arg</code>: 传递给指令的参数（如果有的话）。例如在 <code>v-my-directive:foo</code> 中，参数是 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象 (如果有的话)。例如在 <code>v-my-directive.foo.bar</code> 中，修饰符对象是 <code>{ foo: true, bar: true }</code>。</li><li><code>instance</code>：使用该指令的组件实例</li><li><code>dir</code>：指令的定义对象。</li></ul></li><li><code>vnode</code>: 代表绑定元素的底层 VNode。</li><li><code>preVnode</code>: 之前的渲染中代表指令所绑定元素的 VNode。仅在 <code>beforeUpdate</code> 和 <code>updated</code> 钩子中可用。</li></ul><p>举个例子，像下面这样使用指令：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-example.foo.bar=&quot;baz&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>binding</code> 参数会是一个这样的对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">modifiers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token comment">// baz 的值</span>
  <span class="token literal-property property">oldValue</span><span class="token operator">:</span> <span class="token comment">// 上一次更新时 baz 的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和内置指令类似，自定义指令的参数也可以是动态的：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-example:[arg]=&quot;value&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>里指令的参数会基于组件状态 <code>arg</code> 属性响应式地更新。</p>`,17),v={class:"hint-container note"},m=a("p",{class:"hint-container-title"},"注",-1),k=a("code",null,"el",-1),b={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset",target:"_blank",rel:"noopener noreferrer"},g=e(`<h3 id="简化形式" tabindex="-1"><a class="header-anchor" href="#简化形式" aria-hidden="true">#</a> 简化形式</h3><p>对于自定义指令来说，需要在 <code>mounted</code> 和 <code>updated</code> 上实现相同的行为、又并不关心其他钩子的情况很常见。此时我们可以将指令定义成一个下面这样的函数：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-color=&quot;color&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// this will be called for both \`mounted\` and \`updated\`</span>
  el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象字面量" tabindex="-1"><a class="header-anchor" href="#对象字面量" aria-hidden="true">#</a> 对象字面量</h3><p>如果你的指令需要多个值，你可以向它传递一个 JavaScript 对象字面量。请记住，指令也可以接收任何合法的 JavaScript 表达式。</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-demo=&quot;{ color: &#39;white&#39;, text: &#39;hello&#39; }&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token comment">// &quot;white&quot;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">// &quot;hello&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在组件上使用" tabindex="-1"><a class="header-anchor" href="#在组件上使用" aria-hidden="true">#</a> 在组件上使用</h3>`,9),h={href:"https://staging-cn.vuejs.org/guide/components/attrs.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;MyComponent v-demo=&quot;test&quot; /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;!-- MyComponent 模板 --&gt;
&lt;div&gt; &lt;!-- v-demo 指令会被应用在此处 --&gt;
  &lt;span&gt;My Component content&lt;/span&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是组件可能含有多个根节点。当应用到一个多根组件时，指令将会被忽略且抛出一个警告。和 attribute 不同，指令不能通过 <code>v-bind=&quot;$attrs&quot;</code> 来传递给一个不同的元素。总而言之，<strong>不推荐</strong>在组件上使用自定义指令。</p>`,3);function x(_,y){const t=c("Playground"),o=c("ExternalLinkIcon");return i(),l("div",null,[u,s(t,{key:"4c1b4934",title:"v-focus%20%E6%8C%87%E4%BB%A4",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdD5cbmNvbnN0IGZvY3VzID0ge1xuICBtb3VudGVkOiBlbCA9PiBlbC5mb2N1cygpLFxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRpcmVjdGl2ZXM6IHtcbiAgICAvLyDms6jlhozmjIfku6TvvIzlnKjmqKHmnb%2FkuK3lkK%2FnlKggdi1mb2N1c1xuICAgIGZvY3VzLFxuICB9LFxufVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGlucHV0IHYtZm9jdXMgLz5cbjwvdGVtcGxhdGU%2BXG4ifQ%3D%3D"}),s(t,{key:"b9a38096",title:"%E7%BB%84%E5%90%88%E5%BC%8F%20API%20v-focus%20%E6%8C%87%E4%BB%A4",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbi8vIGVuYWJsZXMgdi1mb2N1cyBpbiB0ZW1wbGF0ZXNcbmNvbnN0IHZGb2N1cyA9IHtcbiAgbW91bnRlZDogZWwgPT4gZWwuZm9jdXMoKSxcbn1cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU%2BXG4gIDxpbnB1dCB2LWZvY3VzIC8%2BXG48L3RlbXBsYXRlPlxuIn0%3D"}),r,a("div",v,[m,a("p",null,[n("除了 "),k,n(" 外，你应该将这些参数都视为只读的，并一律不更改它们。若你需要在不同的钩子间共享信息，推荐通过元素的 "),a("a",b,[n("dataset"),s(o)]),n(" 实现")])]),g,a("p",null,[n("当在组件上使用自定义指令时，它会始终应用于组件的根节点，和"),a("a",h,[n("透传 attributes"),s(o)]),n(" 类似。")]),f])}const V=p(d,[["render",x],["__file","custom-directives.html.vue"]]);export{V as default};
