import{_ as t,c as e,a,h as n,f as l,o as h}from"./app-CE7OIp24.js";const p={};function k(r,s){const i=l("Playground");return h(),e("div",null,[s[0]||(s[0]=a(`<h1 id="defining-a-store" tabindex="-1"><a class="header-anchor" href="#defining-a-store"><span>Defining a Store</span></a></h1><p>A store is defined using <code>defineStore()</code> and that it requires a <strong>unique</strong> name, passed as the first argument:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">defineStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// useStore could be anything like useUser, useCart</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// the first argument is a unique id of the store across your application</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> useStore</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;main&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // other options</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div><p>This <em>name</em>, also referred as id, is necessary and is used by Pinia to connect the store to the devtools.<br> Naming the returned function use... is a convention across composables to make its usage idiomatic.</p><h2 id="using-a-store" tabindex="-1"><a class="header-anchor" href="#using-a-store"><span>Using a store</span></a></h2><p>We are <em>defining</em> a store because the store won&#39;t be created until <code>useStore()</code> is called inside of <code>setup()</code>:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@/store/counter&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> store</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // you can return the whole store instance to use it in the template</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>You can define as many stores as you want and <strong>you should define each store in a different file</strong> to get the most out of pinia (like automatically allow your bundle to code split and TypeScript inference).</p><p>Note that store is an object wrapped with <code>reactive</code>, meaning there is no need to write <code>.value</code> after getters but, like <code>props</code> in setup, <strong>we cannot destructure it</strong>:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> store</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> userStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ‚ùå This won&#39;t work because it breaks reactivity</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // it&#39;s the same as destructuring from \`props\`</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;eduardo&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    doubleCount</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // will always be &quot;eduardo&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // will always be 2</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // this one will be reactive</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      doubleValue</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div>`,10)),n(i,{title:"Destructure%20example",link:"https%3A%2F%2Fplay.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL3N0b3JlLmpzJ1xuXG5jb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcblxubGV0IHsgbmFtZSwgZG91YmxlQ291bnQgfSA9IHN0b3JlXG5jb25zdCB7IGluY3JlbWVudCB9ID0gc3RvcmVcbmNvbnN0IGRvdWJsZVZhbHVlID0gY29tcHV0ZWQoKCkgPT4gc3RvcmUuZG91YmxlQ291bnQpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2Pk5hbWU6IHt7IG5hbWUgfX0gJmx0Oy0gbm90IHJlYWN0aXZlPC9kaXY%2BXG4gIDxkaXY%2BRG91YmxlIGNvdW50OiB7eyBkb3VibGVDb3VudCB9fSAmbHQ7LSBub3QgcmVhY3RpdmU8L2Rpdj5cbiAgPGRpdj5Eb3VibGUgdmFsdWU6IHt7IGRvdWJsZVZhbHVlIH19ICZsdDstIHJlYWN0aXZlPC9kaXY%2BXG4gIDxidXR0b24gQGNsaWNrPVwibmFtZSA9ICdiaW4nXCI%2BY2hhbmdlIG5hbWU8L2J1dHRvbj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJpbmNyZW1lbnRcIj5pbmNyZW1lbnQ8L2J1dHRvbj5cbjwvdGVtcGxhdGU%2BXG4iLCJzdG9yZS5qcyI6ImltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnXG5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IGRlZmluZVN0b3JlKCd0ZXN0Jywge1xuICBzdGF0ZTogKCkgPT4gKHtcbiAgICBuYW1lOiAnemhhb2JjJyxcbiAgICBjb3VudDogMCxcbiAgfSksXG4gIGdldHRlcnM6IHtcbiAgICBkb3VibGVDb3VudDogc3RhdGUgPT4gc3RhdGUuY291bnQgKiAyLFxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgaW5jcmVtZW50KCkge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSxcbiAgfSxcbn0pXG4ifQ%3D%3D"}),s[1]||(s[1]=a(`<p>In order to extract properties from the store while keeping its reactivity, you need to use <code>storeToRefs()</code>.<br> It will create refs for every reactive property.<br> Note you can destructure actions directly from the store as they are bound to the store itself too:</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">storeToRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;pinia&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> store</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useStore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // \`name\` and \`doubleCount\` are reactive refs</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // This will also create refs for properties added by plugins</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // but skip any action or non reactive (non ref/reactive) property</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> storeToRefs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // the increment action can be just extracted</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> store</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      doubleCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      increment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre></div>`,2)),n(i,{title:"Destructure%20example%20using%20storeToRefs",link:"https%3A%2F%2Fplay.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgc3RvcmVUb1JlZnMgfSBmcm9tICdwaW5pYSdcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi9zdG9yZS5qcydcblxuY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXG5cbmNvbnN0IHsgbmFtZSwgZG91YmxlQ291bnQgfSA9IHN0b3JlVG9SZWZzKHN0b3JlKVxuY29uc3QgeyBpbmNyZW1lbnQgfSA9IHN0b3JlXG5jb25zdCBkb3VibGVWYWx1ZSA9IGNvbXB1dGVkKCgpID0%2BIHN0b3JlLmRvdWJsZUNvdW50KVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdj5OYW1lOiB7eyBuYW1lIH19ICZsdDstIHJlYWN0aXZlPC9kaXY%2BXG4gIDxkaXY%2BRG91YmxlIGNvdW50OiB7eyBkb3VibGVDb3VudCB9fSAmbHQ7LSByZWFjdGl2ZTwvZGl2PlxuICA8ZGl2PkRvdWJsZSB2YWx1ZToge3sgZG91YmxlVmFsdWUgfX0gJmx0Oy0gcmVhY3RpdmU8L2Rpdj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJuYW1lID0gJ2JpbidcIj5jaGFuZ2UgbmFtZTwvYnV0dG9uPlxuICA8YnV0dG9uIEBjbGljaz1cImluY3JlbWVudFwiPmluY3JlbWVudDwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cbiIsInN0b3JlLmpzIjoiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcblxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gZGVmaW5lU3RvcmUoJ3Rlc3QnLCB7XG4gIHN0YXRlOiAoKSA9PiAoe1xuICAgIG5hbWU6ICd6aGFvYmMnLFxuICAgIGNvdW50OiAwLFxuICB9KSxcbiAgZ2V0dGVyczoge1xuICAgIGRvdWJsZUNvdW50OiBzdGF0ZSA9PiBzdGF0ZS5jb3VudCAqIDIsXG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBpbmNyZW1lbnQoKSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9LFxuICB9LFxufSlcbiJ9"})])}const o=t(p,[["render",k]]),g=JSON.parse(`{"path":"/notes/frontend/vue/pinia/core-concepts/define-store.html","title":"Defining a Store","lang":"zh-CN","frontmatter":{"order":10,"category":["Á¨îËÆ∞","frontend","pinia"],"tag":["pinia"],"description":"Defining a Store A store is defined using defineStore() and that it requires a unique name, passed as the first argument: This name, also referred as id, is necessary and is use...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Defining a Store\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-17T10:48:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"],["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/pinia/core-concepts/define-store.html"}],["meta",{"property":"og:site_name","content":"ËµµÊñåÁöÑÂ∞èÁ´ô"}],["meta",{"property":"og:title","content":"Defining a Store"}],["meta",{"property":"og:description","content":"Defining a Store A store is defined using defineStore() and that it requires a unique name, passed as the first argument: This name, also referred as id, is necessary and is use..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-17T10:48:18.000Z"}],["meta",{"property":"article:tag","content":"pinia"}],["meta",{"property":"article:modified_time","content":"2023-08-17T10:48:18.000Z"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.zhaobc.site/rss.xml","title":"ËµµÊñåÁöÑÂ∞èÁ´ô RSS Feed"}]]},"git":{"createdTime":1655346858000,"updatedTime":1692269298000,"contributors":[{"name":"Zhao Bin","username":"","email":"413853119@qq.com","commits":8}]},"readingTime":{"minutes":1.93,"words":579},"filePathRelative":"notes/frontend/vue/pinia/core-concepts/define-store.md","excerpt":"\\n<p>A store is defined using <code>defineStore()</code> and that it requires a <strong>unique</strong> name, passed as the first argument:</p>\\n<div class=\\"language-js\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-js\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">import</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> { </span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">defineStore</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> } </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">from</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> 'pinia'</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// useStore could be anything like useUser, useCart</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// the first argument is a unique id of the store across your application</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">export</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> useStore</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> defineStore</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'main'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  // other options</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">})</span></span></code></pre>\\n</div>","autoDesc":true}`);export{o as comp,g as data};
