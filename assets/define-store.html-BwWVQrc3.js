import{_ as e,r as t,o,c as i,d as s,h as a}from"./app-DBlmNksq.js";const c={},p=a(`<h1 id="defining-a-store" tabindex="-1"><a class="header-anchor" href="#defining-a-store"><span>Defining a Store</span></a></h1><p>A store is defined using <code>defineStore()</code> and that it requires a <strong>unique</strong> name, passed as the first argument:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token comment">// useStore could be anything like useUser, useCart</span>
<span class="token comment">// the first argument is a unique id of the store across your application</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// other options</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This <em>name</em>, also referred as id, is necessary and is used by Pinia to connect the store to the devtools.<br> Naming the returned function use... is a convention across composables to make its usage idiomatic.</p><h2 id="using-a-store" tabindex="-1"><a class="header-anchor" href="#using-a-store"><span>Using a store</span></a></h2><p>We are <em>defining</em> a store because the store won&#39;t be created until <code>useStore()</code> is called inside of <code>setup()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/store/counter&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// you can return the whole store instance to use it in the template</span>
      store<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can define as many stores as you want and <strong>you should define each store in a different file</strong> to get the most out of pinia (like automatically allow your bundle to code split and TypeScript inference).</p><p>Note that store is an object wrapped with <code>reactive</code>, meaning there is no need to write <code>.value</code> after getters but, like <code>props</code> in setup, <strong>we cannot destructure it</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">userStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// ‚ùå This won&#39;t work because it breaks reactivity</span>
    <span class="token comment">// it&#39;s the same as destructuring from \`props\`</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> store

    name <span class="token comment">// &quot;eduardo&quot;</span>
    doubleCount <span class="token comment">// 2</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// will always be &quot;eduardo&quot;</span>
      name<span class="token punctuation">,</span>
      <span class="token comment">// will always be 2</span>
      doubleCount<span class="token punctuation">,</span>
      <span class="token comment">// this one will be reactive</span>
      <span class="token literal-property property">doubleValue</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>doubleCount<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),l=a(`<p>In order to extract properties from the store while keeping its reactivity, you need to use <code>storeToRefs()</code>.<br> It will create refs for every reactive property.<br> Note you can destructure actions directly from the store as they are bound to the store itself too:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// \`name\` and \`doubleCount\` are reactive refs</span>
    <span class="token comment">// This will also create refs for properties added by plugins</span>
    <span class="token comment">// but skip any action or non reactive (non ref/reactive) property</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>
    <span class="token comment">// the increment action can be just extracted</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> increment <span class="token punctuation">}</span> <span class="token operator">=</span> store

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      doubleCount<span class="token punctuation">,</span>
      increment<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function r(u,d){const n=t("Playground");return o(),i("div",null,[p,s(n,{title:"Destructure%20example",link:"https%3A%2F%2Fplay.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL3N0b3JlLmpzJ1xuXG5jb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcblxubGV0IHsgbmFtZSwgZG91YmxlQ291bnQgfSA9IHN0b3JlXG5jb25zdCB7IGluY3JlbWVudCB9ID0gc3RvcmVcbmNvbnN0IGRvdWJsZVZhbHVlID0gY29tcHV0ZWQoKCkgPT4gc3RvcmUuZG91YmxlQ291bnQpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2Pk5hbWU6IHt7IG5hbWUgfX0gJmx0Oy0gbm90IHJlYWN0aXZlPC9kaXY%2BXG4gIDxkaXY%2BRG91YmxlIGNvdW50OiB7eyBkb3VibGVDb3VudCB9fSAmbHQ7LSBub3QgcmVhY3RpdmU8L2Rpdj5cbiAgPGRpdj5Eb3VibGUgdmFsdWU6IHt7IGRvdWJsZVZhbHVlIH19ICZsdDstIHJlYWN0aXZlPC9kaXY%2BXG4gIDxidXR0b24gQGNsaWNrPVwibmFtZSA9ICdiaW4nXCI%2BY2hhbmdlIG5hbWU8L2J1dHRvbj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJpbmNyZW1lbnRcIj5pbmNyZW1lbnQ8L2J1dHRvbj5cbjwvdGVtcGxhdGU%2BXG4iLCJzdG9yZS5qcyI6ImltcG9ydCB7IGRlZmluZVN0b3JlIH0gZnJvbSAncGluaWEnXG5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IGRlZmluZVN0b3JlKCd0ZXN0Jywge1xuICBzdGF0ZTogKCkgPT4gKHtcbiAgICBuYW1lOiAnemhhb2JjJyxcbiAgICBjb3VudDogMCxcbiAgfSksXG4gIGdldHRlcnM6IHtcbiAgICBkb3VibGVDb3VudDogc3RhdGUgPT4gc3RhdGUuY291bnQgKiAyLFxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgaW5jcmVtZW50KCkge1xuICAgICAgdGhpcy5jb3VudCsrXG4gICAgfSxcbiAgfSxcbn0pXG4ifQ%3D%3D"}),l,s(n,{title:"Destructure%20example%20using%20storeToRefs",link:"https%3A%2F%2Fplay.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgc3RvcmVUb1JlZnMgfSBmcm9tICdwaW5pYSdcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi9zdG9yZS5qcydcblxuY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXG5cbmNvbnN0IHsgbmFtZSwgZG91YmxlQ291bnQgfSA9IHN0b3JlVG9SZWZzKHN0b3JlKVxuY29uc3QgeyBpbmNyZW1lbnQgfSA9IHN0b3JlXG5jb25zdCBkb3VibGVWYWx1ZSA9IGNvbXB1dGVkKCgpID0%2BIHN0b3JlLmRvdWJsZUNvdW50KVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdj5OYW1lOiB7eyBuYW1lIH19ICZsdDstIHJlYWN0aXZlPC9kaXY%2BXG4gIDxkaXY%2BRG91YmxlIGNvdW50OiB7eyBkb3VibGVDb3VudCB9fSAmbHQ7LSByZWFjdGl2ZTwvZGl2PlxuICA8ZGl2PkRvdWJsZSB2YWx1ZToge3sgZG91YmxlVmFsdWUgfX0gJmx0Oy0gcmVhY3RpdmU8L2Rpdj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJuYW1lID0gJ2JpbidcIj5jaGFuZ2UgbmFtZTwvYnV0dG9uPlxuICA8YnV0dG9uIEBjbGljaz1cImluY3JlbWVudFwiPmluY3JlbWVudDwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cbiIsInN0b3JlLmpzIjoiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcblxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gZGVmaW5lU3RvcmUoJ3Rlc3QnLCB7XG4gIHN0YXRlOiAoKSA9PiAoe1xuICAgIG5hbWU6ICd6aGFvYmMnLFxuICAgIGNvdW50OiAwLFxuICB9KSxcbiAgZ2V0dGVyczoge1xuICAgIGRvdWJsZUNvdW50OiBzdGF0ZSA9PiBzdGF0ZS5jb3VudCAqIDIsXG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBpbmNyZW1lbnQoKSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9LFxuICB9LFxufSlcbiJ9"})])}const b=e(c,[["render",r],["__file","define-store.html.vue"]]),k=JSON.parse(`{"path":"/notes/frontend/vue/pinia/core-concepts/define-store.html","title":"Defining a Store","lang":"zh-CN","frontmatter":{"order":10,"category":["Á¨îËÆ∞","frontend","pinia"],"tag":["pinia"],"description":"Defining a Store A store is defined using defineStore() and that it requires a unique name, passed as the first argument: This name, also referred as id, is necessary and is use...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/pinia/core-concepts/define-store.html"}],["meta",{"property":"og:site_name","content":"ËµµÊñåÁöÑÂ∞èÁ´ô"}],["meta",{"property":"og:title","content":"Defining a Store"}],["meta",{"property":"og:description","content":"Defining a Store A store is defined using defineStore() and that it requires a unique name, passed as the first argument: This name, also referred as id, is necessary and is use..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T11:10:32.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"pinia"}],["meta",{"property":"article:modified_time","content":"2024-02-28T11:10:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Defining a Store\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-28T11:10:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"Using a store","slug":"using-a-store","link":"#using-a-store","children":[]}],"git":{"createdTime":1709118632000,"updatedTime":1709118632000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":1.93,"words":579},"filePathRelative":"notes/frontend/vue/pinia/core-concepts/define-store.md","localizedDate":"2024Âπ¥2Êúà28Êó•","excerpt":"\\n<p>A store is defined using <code>defineStore()</code> and that it requires a <strong>unique</strong> name, passed as the first argument:</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> defineStore <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'pinia'</span>\\n\\n<span class=\\"token comment\\">// useStore could be anything like useUser, useCart</span>\\n<span class=\\"token comment\\">// the first argument is a unique id of the store across your application</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">const</span> useStore <span class=\\"token operator\\">=</span> <span class=\\"token function\\">defineStore</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'main'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// other options</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{b as comp,k as data};
