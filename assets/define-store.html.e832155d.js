import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,o,c as i,b as s,e}from"./app.e7ec5ddf.js";const c={},p=e(`<h1 id="defining-a-store" tabindex="-1"><a class="header-anchor" href="#defining-a-store" aria-hidden="true">#</a> Defining a Store</h1><p>A store is defined using <code>defineStore()</code> and that it requires a <strong>unique</strong> name, passed as the first argument:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token comment">// useStore could be anything like useUser, useCart</span>
<span class="token comment">// the first argument is a unique id of the store across your application</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// other options</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This <em>name</em>, also referred as id, is necessary and is used by Pinia to connect the store to the devtools. Naming the returned function use... is a convention across composables to make its usage idiomatic.</p><h2 id="using-a-store" tabindex="-1"><a class="header-anchor" href="#using-a-store" aria-hidden="true">#</a> Using a store</h2><p>We are <em>defining</em> a store because the store won&#39;t be created until <code>useStore()</code> is called inside of <code>setup()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/store/counter&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// you can return the whole store instance to use it in the template</span>
      store<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can define as many stores as you want and <strong>you should define each store in a different file</strong> to get the most out of pinia (like automatically allow your bundle to code split and TypeScript inference).</p><p>Note that store is an object wrapped with <code>reactive</code>, meaning there is no need to write <code>.value</code> after getters but, like <code>props</code> in setup, <strong>we cannot destructure it</strong>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">userStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// \u274C This won&#39;t work because it breaks reactivity</span>
    <span class="token comment">// it&#39;s the same as destructuring from \`props\`</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> store

    name <span class="token comment">// &quot;eduardo&quot;</span>
    doubleCount <span class="token comment">// 2</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// will always be &quot;eduardo&quot;</span>
      name<span class="token punctuation">,</span>
      <span class="token comment">// will always be 2</span>
      doubleCount<span class="token punctuation">,</span>
      <span class="token comment">// this one will be reactive</span>
      <span class="token literal-property property">doubleValue</span><span class="token operator">:</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>doubleCount<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),u=e(`<p>In order to extract properties from the store while keeping its reactivity, you need to use <code>storeToRefs()</code>. It will create refs for every reactive property. Note you can destructure actions directly from the store as they are bound to the store itself too:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// \`name\` and \`doubleCount\` are reactive refs</span>
    <span class="token comment">// This will also create refs for properties added by plugins</span>
    <span class="token comment">// but skip any action or non reactive (non ref/reactive) property</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> doubleCount <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>
    <span class="token comment">// the increment action can be just extracted</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> increment <span class="token punctuation">}</span> <span class="token operator">=</span> store

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">,</span>
      doubleCount<span class="token punctuation">,</span>
      increment<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function l(r,d){const n=t("Playground");return o(),i("div",null,[p,s(n,{key:"playground-3ba174a7",id:"playground-3ba174a7",title:"Destructure%20example",settings:"%7B%7D",config:"%7B%22App.vue%22%3A%7B%22lang%22%3A%22vue%22%2C%22content%22%3A%22%3Cscript%20setup%3E%5Cnimport%20%7B%20computed%20%7D%20from%20'vue'%5Cnimport%20%7B%20useStore%20%7D%20from%20'.%2Fstore.js'%5Cn%5Cnconst%20store%20%3D%20useStore()%5Cn%5Cnlet%20%7B%20name%2C%20doubleCount%20%7D%20%3D%20store%5Cnconst%20%7B%20increment%20%7D%20%3D%20store%5Cnconst%20doubleValue%20%3D%20computed(()%20%3D%3E%20store.doubleCount)%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%20%20%3Cdiv%3EName%3A%20%7B%7B%20name%20%7D%7D%20%26lt%3B-%20not%20reactive%20%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EDouble%20count%3A%20%7B%7B%20doubleCount%20%7D%7D%20%26lt%3B-%20not%20reactive%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EDouble%20value%3A%20%7B%7B%20doubleValue%20%7D%7D%20%26lt%3B-%20reactive%3C%2Fdiv%3E%5Cn%20%20%3Cbutton%20%40click%3D%5C%22name%20%3D%20'bin'%5C%22%3Echange%20name%3C%2Fbutton%3E%5Cn%20%20%3Cbutton%20%40click%3D%5C%22increment%5C%22%3Eincrement%3C%2Fbutton%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D%2C%22store.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useStore%20%3D%20defineStore('test'%2C%20%7B%5Cn%20%20state%3A%20()%20%3D%3E%20(%7B%5Cn%20%20%20%20name%3A%20'zhaobc'%2C%5Cn%20%20%20%20count%3A%200%2C%5Cn%20%20%7D)%2C%5Cn%20%20getters%3A%20%7B%5Cn%20%20%20%20doubleCount%3A%20(state)%20%3D%3E%20state.count%20*%202%5Cn%20%20%7D%2C%5Cn%20%20actions%3A%20%7B%5Cn%20%20%20%20increment()%20%7B%5Cn%20%20%20%20%20%20this.count%2B%2B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D)%5Cn%22%7D%7D"}),u,s(n,{key:"playground-6af41e28",id:"playground-6af41e28",title:"Destructure%20example%20using%20storeToRefs",settings:"%7B%7D",config:"%7B%22App.vue%22%3A%7B%22lang%22%3A%22vue%22%2C%22content%22%3A%22%3Cscript%20setup%3E%5Cnimport%20%7B%20computed%20%7D%20from%20'vue'%5Cnimport%20%7B%20storeToRefs%20%7D%20from%20'pinia'%5Cnimport%20%7B%20useStore%20%7D%20from%20'.%2Fstore.js'%5Cn%5Cnconst%20store%20%3D%20useStore()%5Cn%5Cnconst%20%7B%20name%2C%20doubleCount%20%7D%20%3D%20storeToRefs(store)%5Cnconst%20%7B%20increment%20%7D%20%3D%20store%5Cnconst%20doubleValue%20%3D%20computed(()%20%3D%3E%20store.doubleCount)%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%20%20%3Cdiv%3EName%3A%20%7B%7B%20name%20%7D%7D%20%26lt%3B-%20reactive%20%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EDouble%20count%3A%20%7B%7B%20doubleCount%20%7D%7D%20%26lt%3B-%20reactive%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EDouble%20value%3A%20%7B%7B%20doubleValue%20%7D%7D%20%26lt%3B-%20reactive%3C%2Fdiv%3E%5Cn%20%20%3Cbutton%20%40click%3D%5C%22name%20%3D%20'bin'%5C%22%3Echange%20name%3C%2Fbutton%3E%5Cn%20%20%3Cbutton%20%40click%3D%5C%22increment%5C%22%3Eincrement%3C%2Fbutton%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D%2C%22store.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useStore%20%3D%20defineStore('test'%2C%20%7B%5Cn%20%20state%3A%20()%20%3D%3E%20(%7B%5Cn%20%20%20%20name%3A%20'zhaobc'%2C%5Cn%20%20%20%20count%3A%200%2C%5Cn%20%20%7D)%2C%5Cn%20%20getters%3A%20%7B%5Cn%20%20%20%20doubleCount%3A%20(state)%20%3D%3E%20state.count%20*%202%5Cn%20%20%7D%2C%5Cn%20%20actions%3A%20%7B%5Cn%20%20%20%20increment()%20%7B%5Cn%20%20%20%20%20%20this.count%2B%2B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D)%5Cn%22%7D%7D"})])}var k=a(c,[["render",l],["__file","define-store.html.vue"]]);export{k as default};
