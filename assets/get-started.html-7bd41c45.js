import{_ as n,o as a,c as s,h as e}from"./app-ac23c540.js";const t={},i=e(`<h1 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started" aria-hidden="true">#</a> Get Started</h1><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Create a pinia (the root store) and pass it to the app:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are using Vue 2, you also need to install a plugin and inject the created pinia at the root of the app:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia<span class="token punctuation">,</span> PiniaVuePlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>PiniaVuePlugin<span class="token punctuation">)</span>
<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// other options</span>
  <span class="token comment">// ...</span>
  <span class="token comment">// note the same \`pinia\` instance can be used across multiple Vue apps on the same page</span>
  pinia<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="what-is-a-store" tabindex="-1"><a class="header-anchor" href="#what-is-a-store" aria-hidden="true">#</a> What is a Store?</h2><p>A Store (like Pinia) is an entity holding state and business logic that isn&#39;t bound to your Component tree.</p><p>In other words, <strong>it hosts global state</strong>.<br> It&#39;s a bit like a component that is always there and that everybody can read off and write to.</p><p>It has <strong>three concepts</strong>, the <strong>state</strong>, <strong>getters</strong> and <strong>actions</strong> and it&#39;s safe to assume these concepts are the equivalent of <strong>data</strong>, <strong>computed</strong> and <strong>methods</strong> in components.</p><h2 id="when-should-i-use-a-store" tabindex="-1"><a class="header-anchor" href="#when-should-i-use-a-store" aria-hidden="true">#</a> When should I use a Store</h2><p>A store should contain data that can be accessed throughout your application. This includes data that is used in many places, e.g. User information that is displayed in the navbar, as well as data that needs to be preserved through pages, e.g. a very complicated multi-step form.</p><p>Not all applications need access to a global state, but if yours need one, Pinia will make your life easier.</p>`,13),o=[i];function p(c,r){return a(),s("div",null,o)}const d=n(t,[["render",p],["__file","get-started.html.vue"]]);export{d as default};
