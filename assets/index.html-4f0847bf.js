import{_ as c,r as p,o as i,c as l,e as u,d as s,a as n,b as a,h as t}from"./app-4c5aeddb.js";const r={},d=n("h1",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),a(" Introduction")],-1),k=n("p",null,'Pinia (pronounced /piːnjʌ/, like "peenya" in English) is a store library for Vue, it allows you to share a state across components/pages.',-1),m=n("ul",null,[n("li",null,"Works for both Vue 2 and Vue 3"),n("li",null,"Optional composition API"),n("li",null,"The same API for SSR."),n("li",null,"TypeScript support"),n("li",null,"Hot module replacement"),n("li",null,"Plugins")],-1),v=t(`<h2 id="basic-example" tabindex="-1"><a class="header-anchor" href="#basic-example" aria-hidden="true">#</a> Basic example</h2><p>Create a store:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// stores/counter.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// could also be defined as</span>
  <span class="token comment">// state: () =&gt; ({ count: 0 })</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then you use it in a component:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counter&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span>count<span class="token operator">++</span>

    <span class="token comment">// with autocompletion</span>
    counter<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> counter<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// or using a action instead</span>
    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),b=t(`<p>You can even use a function (similar to a component <code>setup()</code>) to define a Store for more advanced use cases:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">,</span>
    increment<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g=t(`<p>If you are still not into <code>setup()</code> and Composition API, don&#39;t worry, Pinia also support a similar set of map helpers like Vuex. You define stores the same way but then use <code>mapStores()</code>, <code>mapState()</code>, or <code>mapActions()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// other computed properties</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// gives access to this.counterStore and this.userStore</span>
    <span class="token operator">...</span><span class="token function">mapStores</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> useUserStore<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// gives read access to this.count and this.double</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;double&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.increment()</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),y=t(`<h2 id="a-more-realistic-example" tabindex="-1"><a class="header-anchor" href="#a-more-realistic-example" aria-hidden="true">#</a> A more realistic example</h2><p>Here is a more complete example of the API you will be using with Pinia with types even in JavaScript.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span> text<span class="token operator">:</span> string<span class="token punctuation">,</span> id<span class="token operator">:</span> number<span class="token punctuation">,</span> isFinished<span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> */</span>
    <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token string">&#39;all&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;finished&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;unfinished&#39;</span><span class="token punctuation">}</span></span> */</span>
    <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// type will be automatically inferred to number</span>
    <span class="token literal-property property">nextId</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">finishedTodos</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// autocompletion</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">unfinishedTodos</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@returns</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span> text<span class="token operator">:</span> string<span class="token punctuation">,</span> id<span class="token operator">:</span> number<span class="token punctuation">,</span> isFinished<span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
     */</span>
    <span class="token function">filteredTodos</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">&#39;finished&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// call other getters with autocompletion</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>finishedTodos
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">&#39;unfinished&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unfinishedTodos
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// any amount of arguments, return a promise or not</span>
    <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// you can directly mutate the state</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        text<span class="token punctuation">,</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">,</span>
        <span class="token literal-property property">isFinished</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comparison-with-vuex" tabindex="-1"><a class="header-anchor" href="#comparison-with-vuex" aria-hidden="true">#</a> Comparison with Vuex</h2><p>Compared to Vuex, Pinia provides a simpler API with less ceremony, offers Composition-API-style APIs, and most importantly, has solid type inference support when used with TypeScript.</p><h3 id="comparison-with-vuex-3-x-4-x" tabindex="-1"><a class="header-anchor" href="#comparison-with-vuex-3-x-4-x" aria-hidden="true">#</a> Comparison with Vuex 3.x/4.x</h3><blockquote><p>Vuex 3.x is Vuex for Vue 2 while Vuex 4.x is for Vue 3</p></blockquote><p>Pinia API is very different from Vuex ≤4, namely:</p><ul><li>Mutations no longer exist</li><li>TypeScript support</li><li>No more magic strings to inject</li><li>No need to dynamically add stores, they are all dynamic by default</li><li>No more nested structuring of modules, Pinia offers a flat structuring by design</li><li>No namespaced modules. Given the flat architecture of stores, &quot;namespacing&quot; stores is inherent to how they are defined and you could say all stores are namespaced.</li></ul>`,9),I={href:"https://pinia.vuejs.org/cookbook/migration-vuex.html",target:"_blank",rel:"noopener noreferrer"};function h(x,f){const e=p("Playground"),o=p("ExternalLinkIcon");return i(),l("div",null,[d,k,m,u(" more "),v,s(e,{key:"14aba852",title:"Basic%20example",link:"https%3A%2F%2Fsfc.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHVzZUNvdW50ZXJTdG9yZSB9IGZyb20gJy4vY291bnRlclN0b3JlLmpzJ1xuXG5jb25zdCBjb3VudGVyID0gdXNlQ291bnRlclN0b3JlKClcbmNvdW50ZXIuY291bnQrK1xuXG5jb3VudGVyLiRwYXRjaCh7XG4gIGNvdW50OiBjb3VudGVyLmNvdW50ICsgMSxcbn0pXG5jb3VudGVyLmluY3JlbWVudCgpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2PkNvdW50OiB7eyBjb3VudGVyLmNvdW50IH19PC9kaXY%2BXG48L3RlbXBsYXRlPlxuIiwiY291bnRlclN0b3JlLmpzIjoiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcblxuZXhwb3J0IGNvbnN0IHVzZUNvdW50ZXJTdG9yZSA9IGRlZmluZVN0b3JlKCdjb3VudGVyJywge1xuICBzdGF0ZTogKCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjb3VudDogMCxcbiAgICB9XG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBpbmNyZW1lbnQoKSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9LFxuICB9LFxufSlcbiJ9"}),b,s(e,{key:"23a0d72c",title:"setup%20example",link:"https%3A%2F%2Fsfc.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHVzZUNvdW50ZXJTdG9yZSB9IGZyb20gJy4vY291bnRlclN0b3JlLmpzJ1xuXG5jb25zdCBjb3VudGVyID0gdXNlQ291bnRlclN0b3JlKClcbmNvdW50ZXIuY291bnQrK1xuXG5jb3VudGVyLiRwYXRjaCh7XG4gIGNvdW50OiBjb3VudGVyLmNvdW50ICsgMSxcbn0pXG5jb3VudGVyLmluY3JlbWVudCgpXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2PkNvdW50OiB7eyBjb3VudGVyLmNvdW50IH19PC9kaXY%2BXG48L3RlbXBsYXRlPlxuIiwiY291bnRlclN0b3JlLmpzIjoiaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcblxuZXhwb3J0IGNvbnN0IHVzZUNvdW50ZXJTdG9yZSA9IGRlZmluZVN0b3JlKCdjb3VudGVyJywgKCkgPT4ge1xuICBjb25zdCBjb3VudCA9IHJlZigwKVxuICBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gICAgY291bnQudmFsdWUrK1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb3VudCxcbiAgICBpbmNyZW1lbnQsXG4gIH1cbn0pXG4ifQ%3D%3D"}),g,s(e,{key:"24a46cc6",title:"Option%20API%20example",link:"https%3A%2F%2Fsfc.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdD5cbmltcG9ydCB7IG1hcFN0b3JlcywgbWFwU3RhdGUsIG1hcEFjdGlvbnMgfSBmcm9tICdwaW5pYSdcblxuaW1wb3J0IHsgdXNlQ291bnRlclN0b3JlIH0gZnJvbSAnLi9jb3VudGVyU3RvcmUuanMnXG5pbXBvcnQgeyB1c2VVc2VyU3RvcmUgfSBmcm9tICcuL3VzZXJTdG9yZS5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wdXRlZDoge1xuICAgIC4uLm1hcFN0b3Jlcyh1c2VDb3VudGVyU3RvcmUsIHVzZVVzZXJTdG9yZSksXG4gICAgLi4ubWFwU3RhdGUodXNlQ291bnRlclN0b3JlLCBbJ2NvdW50JywgJ2RvdWJsZSddKSxcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC4uLm1hcEFjdGlvbnModXNlQ291bnRlclN0b3JlLCBbJ2luY3JlbWVudCddKSxcbiAgfSxcbn1cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU%2BXG4gIDxkaXY%2BXG4gICAgPGRpdj5IaSB7eyB1c2VyU3RvcmUubmFtZSB9fSwgYWdlOiB7eyB1c2VyU3RvcmUuYWdlIH19PC9kaXY%2BXG4gICAgPGRpdj5Db3VudDoge3sgY291bnQgfX0sIGRvdWJsZToge3sgZG91YmxlIH19PC9kaXY%2BXG4gICAgPGJ1dHRvbiBAY2xpY2s9XCJpbmNyZW1lbnRcIj5pbmNyZW1lbnQ8L2J1dHRvbj5cbiAgPC9kaXY%2BXG48L3RlbXBsYXRlPlxuIiwiY291bnRlclN0b3JlLmpzIjoiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcblxuZXhwb3J0IGNvbnN0IHVzZUNvdW50ZXJTdG9yZSA9IGRlZmluZVN0b3JlKCdjb3VudGVyJywge1xuICBzdGF0ZTogKCkgPT4gKHtcbiAgICBjb3VudDogMCxcbiAgfSksXG4gIGdldHRlcnM6IHtcbiAgICBkb3VibGU6IHN0YXRlID0%2BIHN0YXRlLmNvdW50ICogMixcbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIGluY3JlbWVudCgpIHtcbiAgICAgIHRoaXMuY291bnQrK1xuICAgIH0sXG4gIH0sXG59KVxuIiwidXNlclN0b3JlLmpzIjoiaW1wb3J0IHsgZGVmaW5lU3RvcmUgfSBmcm9tICdwaW5pYSdcblxuZXhwb3J0IGNvbnN0IHVzZVVzZXJTdG9yZSA9IGRlZmluZVN0b3JlKCd1c2VyJywge1xuICBzdGF0ZTogKCkgPT4gKHtcbiAgICBuYW1lOiAnemhhb2JjJyxcbiAgICBhZ2U6IDE4LFxuICAgIGlzTG9naW46IGZhbHNlLFxuICAgIHJvbGVzOiBbXSxcbiAgfSksXG4gIGdldHRlcnM6IHtcbiAgICBpc0FkbWluOiBzdGF0ZSA9PiBzdGF0ZS5yb2xlcy5pbmNsdWRlcygnYWRtaW4nKSxcbiAgfSxcbiAgYWN0aW9uczoge1xuICAgIGxvZ2luKCkge1xuICAgICAgdGhpcy5pc0xvZ2luID0gdHJ1ZVxuICAgIH0sXG4gIH0sXG59KVxuIn0%3D"}),y,n("p",null,[a("For more detailed instructions on how to convert an existing Vuex ≤4 project to use Pinia, see the "),n("a",I,[a("Migration from Vuex Guide"),s(o)]),a(".")])])}const C=c(r,[["render",h],["__file","index.html.vue"]]);export{C as default};
