import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{o as i,c as l,b as n,a as e,e as s,d as t,r as o}from"./app.a46d32cb.js";const u={},r=s(`<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>Pinia (pronounced /pi\u02D0nj\u028C/, like &quot;peenya&quot; in English) is a store library for Vue, it allows you to share a state across components/pages.</p><ul><li>Works for both Vue 2 and Vue 3</li><li>Optional composition API</li><li>The same API for SSR.</li><li>TypeScript support</li><li>Hot module replacement</li><li>Plugins</li></ul><h2 id="basic-example" tabindex="-1"><a class="header-anchor" href="#basic-example" aria-hidden="true">#</a> Basic example</h2><p>Create a store:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// stores/counter.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// could also be defined as</span>
  <span class="token comment">// state: () =&gt; ({ count: 0 })</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And then you use it in a component:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counter&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span>count<span class="token operator">++</span>

    <span class="token comment">// with autocompletion</span>
    counter<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> counter<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// or using a action instead</span>
    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),d=s(`<p>You can even use a function (similar to a component <code>setup()</code>) to define a Store for more advanced use cases:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">.</span>value<span class="token operator">++</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">,</span>
    increment<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),k=s(`<p>If you are still not into <code>setup()</code> and Composition API, don&#39;t worry, Pinia also support a similar set of map helpers like Vuex. You define stores the same way but then use <code>mapStores()</code>, <code>mapState()</code>, or <code>mapActions()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// other computed properties</span>
    <span class="token comment">// ...</span>
    <span class="token comment">// gives access to this.counterStore and this.userStore</span>
    <span class="token operator">...</span><span class="token function">mapStores</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> useUserStore<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// gives read access to this.count and this.double</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;double&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.increment()</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;increment&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),m=s(`<h2 id="a-more-realistic-example" tabindex="-1"><a class="header-anchor" href="#a-more-realistic-example" aria-hidden="true">#</a> A more realistic example</h2><p>Here is a more complete example of the API you will be using with Pinia with types even in JavaScript.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span> text<span class="token operator">:</span> string<span class="token punctuation">,</span> id<span class="token operator">:</span> number<span class="token punctuation">,</span> isFinished<span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> */</span>
    <span class="token literal-property property">todos</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token string">&#39;all&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;finished&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;unfinished&#39;</span><span class="token punctuation">}</span></span> */</span>
    <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// type will be automatically inferred to number</span>
    <span class="token literal-property property">nextId</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">finishedTodos</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// autocompletion</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">unfinishedTodos</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@returns</span>  <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span> text<span class="token operator">:</span> string<span class="token punctuation">,</span> id<span class="token operator">:</span> number<span class="token punctuation">,</span> isFinished<span class="token operator">:</span> boolean <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
     */</span>
    <span class="token function">filteredTodos</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">&#39;finished&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// call other getters with autocompletion</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>finishedTodos
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter <span class="token operator">===</span> <span class="token string">&#39;unfinished&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unfinishedTodos
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// any amount of arguments, return a promise or not</span>
    <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// you can directly mutate the state</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        text<span class="token punctuation">,</span>
        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">,</span>
        <span class="token literal-property property">isFinished</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comparison-with-vuex" tabindex="-1"><a class="header-anchor" href="#comparison-with-vuex" aria-hidden="true">#</a> Comparison with Vuex</h2><p>Compared to Vuex, Pinia provides a simpler API with less ceremony, offers Composition-API-style APIs, and most importantly, has solid type inference support when used with TypeScript.</p><h3 id="comparison-with-vuex-3-x-4-x" tabindex="-1"><a class="header-anchor" href="#comparison-with-vuex-3-x-4-x" aria-hidden="true">#</a> Comparison with Vuex 3.x/4.x</h3><blockquote><p>Vuex 3.x is Vuex for Vue 2 while Vuex 4.x is for Vue 3</p></blockquote><p>Pinia API is very different from Vuex \u22644, namely:</p><ul><li>Mutations no longer exist</li><li>TypeScript support</li><li>No more magic strings to inject</li><li>No need to dynamically add stores, they are all dynamic by default</li><li>No more nested structuring of modules, Pinia offers a flat structuring by design</li><li>No namespaced modules. Given the flat architecture of stores, &quot;namespacing&quot; stores is inherent to how they are defined and you could say all stores are namespaced.</li></ul>`,9),v=t("For more detailed instructions on how to convert an existing Vuex \u22644 project to use Pinia, see the "),C={href:"https://pinia.vuejs.org/cookbook/migration-vuex.html",target:"_blank",rel:"noopener noreferrer"},b=t("Migration from Vuex Guide"),f=t(".");function h(y,g){const a=o("Playground"),p=o("ExternalLinkIcon");return i(),l("div",null,[r,n(a,{key:"playground-2f73cf9c",id:"playground-2f73cf9c",title:"Basic%20example",settings:"%7B%7D",config:"%7B%22App.vue%22%3A%7B%22lang%22%3A%22vue%22%2C%22content%22%3A%22%3Cscript%20setup%3E%5Cnimport%20%7B%20useCounterStore%20%7D%20from%20'.%2FcounterStore.js'%5Cn%5Cnconst%20counter%20%3D%20useCounterStore()%5Cncounter.count%2B%2B%5Cn%5Cncounter.%24patch(%7B%5Cn%20%20count%3A%20counter.count%20%2B%201%2C%5Cn%7D)%5Cncounter.increment()%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%20%20%3Cdiv%3ECount%3A%20%7B%7B%20counter.count%20%7D%7D%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D%2C%22counterStore.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useCounterStore%20%3D%20defineStore('counter'%2C%20%7B%5Cn%20%20state%3A%20()%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20count%3A%200%2C%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20actions%3A%20%7B%5Cn%20%20%20%20increment()%20%7B%5Cn%20%20%20%20%20%20this.count%2B%2B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%2C%5Cn%7D)%5Cn%22%7D%7D"}),d,n(a,{key:"playground-1a66f96c",id:"playground-1a66f96c",title:"setup%20example",settings:"%7B%7D",config:"%7B%22App.vue%22%3A%7B%22lang%22%3A%22vue%22%2C%22content%22%3A%22%3Cscript%20setup%3E%5Cnimport%20%7B%20useCounterStore%20%7D%20from%20'.%2FcounterStore.js'%5Cn%5Cnconst%20counter%20%3D%20useCounterStore()%5Cncounter.count%2B%2B%5Cn%5Cncounter.%24patch(%7B%5Cn%20%20count%3A%20counter.count%20%2B%201%2C%5Cn%7D)%5Cncounter.increment()%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%20%20%3Cdiv%3ECount%3A%20%7B%7B%20counter.count%20%7D%7D%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D%2C%22counterStore.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20ref%20%7D%20from%20'vue'%5Cnimport%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useCounterStore%20%3D%20defineStore('counter'%2C%20()%20%3D%3E%20%7B%5Cn%20%20const%20count%20%3D%20ref(0)%5Cn%20%20function%20increment()%20%7B%5Cn%20%20%20%20count.value%2B%2B%5Cn%20%20%7D%5Cn%5Cn%20%20return%20%7B%5Cn%20%20%20%20count%2C%5Cn%20%20%20%20increment%2C%5Cn%20%20%7D%5Cn%7D)%5Cn%22%7D%7D"}),k,n(a,{key:"playground-718b1cf3",id:"playground-718b1cf3",title:"Option%20API%20example",settings:"%7B%7D",config:"%7B%22App.vue%22%3A%7B%22lang%22%3A%22vue%22%2C%22content%22%3A%22%3Cscript%3E%5Cnimport%20%7B%20mapStores%2C%20mapState%2C%20mapActions%20%7D%20from%20'pinia'%5Cn%5Cnimport%20%7B%20useCounterStore%20%7D%20from%20'.%2FcounterStore.js'%5Cnimport%20%7B%20useUserStore%20%7D%20from%20'.%2FuserStore.js'%5Cn%5Cnexport%20default%20%7B%5Cn%20%20computed%3A%20%7B%5Cn%20%20%20%20...mapStores(useCounterStore%2C%20useUserStore)%2C%5Cn%20%20%20%20...mapState(useCounterStore%2C%20%5B'count'%2C%20'double'%5D)%2C%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20...mapActions(useCounterStore%2C%20%5B'increment'%5D)%2C%5Cn%20%20%7D%2C%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3Cdiv%3EHi%20%7B%7B%20userStore.name%20%7D%7D%2C%20age%3A%20%7B%7B%20userStore.age%20%7D%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cdiv%3ECount%3A%20%7B%7B%20count%20%7D%7D%2C%20double%3A%20%7B%7B%20double%20%7D%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cbutton%20%40click%3D%5C%22increment%5C%22%3Eincrement%3C%2Fbutton%3E%5Cn%20%20%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D%2C%22counterStore.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useCounterStore%20%3D%20defineStore('counter'%2C%20%7B%5Cn%20%20state%3A%20()%20%3D%3E%20(%7B%5Cn%20%20%20%20count%3A%200%2C%5Cn%20%20%7D)%2C%5Cn%20%20getters%3A%20%7B%5Cn%20%20%20%20double%3A%20(state)%20%3D%3E%20state.count%20*%202%2C%5Cn%20%20%7D%2C%5Cn%20%20actions%3A%20%7B%5Cn%20%20%20%20increment()%20%7B%5Cn%20%20%20%20%20%20this.count%2B%2B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%2C%5Cn%7D)%5Cn%22%7D%2C%22userStore.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useUserStore%20%3D%20defineStore('user'%2C%20%7B%5Cn%20%20state%3A%20()%20%3D%3E%20(%7B%5Cn%20%20%20%20name%3A%20'zhaobc'%2C%5Cn%20%20%20%20age%3A%2018%2C%5Cn%20%20%20%20isLogin%3A%20false%2C%5Cn%20%20%20%20roles%3A%20%5B%5D%2C%5Cn%20%20%7D)%2C%5Cn%20%20getters%3A%20%7B%5Cn%20%20%20%20isAdmin%3A%20(state)%20%3D%3E%20state.roles.includes('admin')%2C%5Cn%20%20%7D%2C%5Cn%20%20actions%3A%20%7B%5Cn%20%20%20%20login()%20%7B%5Cn%20%20%20%20%20%20this.isLogin%20%3D%20true%5Cn%20%20%20%20%7D%2C%5Cn%20%20%7D%2C%5Cn%7D)%5Cn%22%7D%7D"}),m,e("p",null,[v,e("a",C,[b,n(p)]),f])])}var x=c(u,[["render",h],["__file","index.html.vue"]]);export{x as default};
