import{_ as n,c as s,o as a,d as e}from"./app-EMofQacS.js";const t={},p=e(`<h1 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins"><span>Plugins</span></a></h1><p>Pinia stores can be fully extended thanks to a low level API. Here is a list of things you can do:</p><ul><li>Add new properties to stores</li><li>Add new options when defining stores</li><li>Add new methods to stores</li><li>Wrap existing methods</li><li>Change or even cancel actions</li><li>Implement side effects like Local Storage</li><li>Apply only to specific stores</li></ul><p>Plugins are added to the pinia instance with <code>pinia.use()</code>.<br> The simplest example is adding a static property to all stores by returning an object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token comment">// add a property named \`secret\` to every store that is created after this plugin is installed</span>
<span class="token comment">// this could be a different file</span>
<span class="token keyword">function</span> <span class="token function">SecretPiniaPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&#39;the cake is a lie&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// give the plugin to pinia</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>SecretPiniaPlugin<span class="token punctuation">)</span>

<span class="token comment">// in another file</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span>secret <span class="token comment">// &#39;the cake is a lie&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is useful to add global objects like the router, modal, or toast managers.</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>A Pinia plugin is a function that optionally returns properties to be added to a store. It takes one optional argument, a context:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myPiniaPlugin</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>pinia <span class="token comment">// the pinia created with \`createPinia\`</span>
  context<span class="token punctuation">.</span>app <span class="token comment">// the current app created with \`createApp\` (Vue3 only)</span>
  context<span class="token punctuation">.</span>store <span class="token comment">// the store the plugin is augmenting</span>
  context<span class="token punctuation">.</span>options <span class="token comment">// the options object defining the store passed to \`defineStore()\`</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myPiniaPlugin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Plugins are only applied to stores <strong>created after</strong> <code>pinia</code> is passed to the app, otherwise they won&#39;t be applied.</p><h2 id="augmenting-扩大-增大-增强-a-store" tabindex="-1"><a class="header-anchor" href="#augmenting-扩大-增大-增强-a-store"><span>Augmenting(扩大，增大，增强) a Store</span></a></h2><p>You can add properties to every store by simply returning an object of them in a plugin:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also set the property directly on the store but if possible <code>use the return version</code> so they can be automatically tracked by devtools:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that every store is wrapped with <code>reactive</code>, <strong>automatically unwrapping</strong> any <code>Ref</code> (<code>ref()</code>, <code>computed()</code>, ...) it contains:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> sharedRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;shared&#39;</span><span class="token punctuation">)</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// each store has its individual \`hello\` property</span>
  store<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;secret&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// it gets automatically unwrapped</span>
  store<span class="token punctuation">.</span>hello <span class="token comment">// &#39;secret&#39;</span>

  <span class="token comment">// all stores are sharing the value \`shared\` property</span>
  store<span class="token punctuation">.</span>shared <span class="token operator">=</span> sharedRef
  store<span class="token punctuation">.</span>shared <span class="token comment">// &#39;shared&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is why you can access all computed properties without .value and why they are reactive.</p><h2 id="adding-new-state" tabindex="-1"><a class="header-anchor" href="#adding-new-state"><span>Adding new state</span></a></h2><p>If you want to add new state properties to a store or properties that are meant to be used during hydration,<br> you will have to add it in two places:</p><ul><li>On the <code>store</code> so you can access it with <code>store.myState</code></li><li>On <code>store.$state</code> so it can be used in devtools and, be serialized during SSR.</li></ul><p>On top of that, you will certainly have to use a <code>ref()</code> (or other reactive API) in order to share the value across different accesses:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toRef<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// to correctlly handle SSR, we need to make sure we are not overriding an existing value</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> <span class="token string">&#39;hasError&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// hasError is defined within the plugin, so each store has their individual state property</span>
    <span class="token keyword">const</span> hasError <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// setting the variable on \`$state\`, allows it be serialized during SSR</span>
    store<span class="token punctuation">.</span>$state<span class="token punctuation">.</span>hasError <span class="token operator">=</span> hasError
  <span class="token punctuation">}</span>

  <span class="token comment">// we need to transfer the ref from the state to the store,</span>
  <span class="token comment">// this way both accesses: store.hasError and store.$state.hasError</span>
  <span class="token comment">// will work and share the same variable</span>
  store<span class="token punctuation">.</span>hasError <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> <span class="token string">&#39;hasError&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// in this case it&#39;s better not to return \`hasError\` since it</span>
  <span class="token comment">// will be displayed in the \`state\` section in the devtools</span>
  <span class="token comment">// anyway and if we return it, devtools will display it twice.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-new-external-properties" tabindex="-1"><a class="header-anchor" href="#adding-new-external-properties"><span>Adding new external properties</span></a></h2><p>When adding external properties, class instances that come from other libraries, or simply things that are not reactive,<br> you should wrap the object with <code>markRaw()</code> before passing it to pinia.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> markRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">store</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>router <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="calling-subscribe-inside-plugins" tabindex="-1"><a class="header-anchor" href="#calling-subscribe-inside-plugins"><span>Calling <code>$subscribe</code> inside plugins</span></a></h2><p>You can use <a href="https://pinia.vuejs.org/core-concepts/state.html#subscribing-to-the-state" target="_blank" rel="noopener noreferrer"><code>store.$subscribe</code></a> and <a href="https://pinia.vuejs.org/core-concepts/actions.html#subscribing-to-actions" target="_blank" rel="noopener noreferrer"><code>store.$onAction</code></a> inside plugins too:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// react to store changes</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  store<span class="token punctuation">.</span><span class="token function">$onAction</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// react to store anctions</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-new-options" tabindex="-1"><a class="header-anchor" href="#adding-new-options"><span>Adding new options</span></a></h2><p>It is possible to create new options when defining stores to later on consume them from plugins.</p><p>For example, you could create a <code>debounce</code> option that allows you to debounce any action:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> useSearchStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">searchContacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// this will be read by a plugin later on</span>
  <span class="token literal-property property">debounce</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// debounce the action searchContacts by 300ms</span>
    <span class="token literal-property property">searchContacts</span><span class="token operator">:</span> <span class="token number">300</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The plugin can then read that option to wrap actions and replace the original ones:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// use any debounce library</span>
<span class="token keyword">import</span> debounce <span class="token keyword">from</span> <span class="token string">&#39;loadash/debounce&#39;</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> options<span class="token punctuation">,</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>debounce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// we are overriding the actions with new ones</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>debounce<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">debounceActions<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      debounceActions<span class="token punctuation">[</span>action<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>
        store<span class="token punctuation">[</span>action<span class="token punctuation">]</span><span class="token punctuation">,</span>
        options<span class="token punctuation">.</span>debounce<span class="token punctuation">[</span>action<span class="token punctuation">]</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that custom options are passed as the 3rd argument when using the setup syntax:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">defineStore</span><span class="token punctuation">(</span>
  <span class="token string">&#39;search&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// this will be read by a plugin later on</span>
    <span class="token literal-property property">debounce</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">searchContacts</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h2><h3 id="a-pinia-plugin-can-be-typed-as-follows" tabindex="-1"><a class="header-anchor" href="#a-pinia-plugin-can-be-typed-as-follows"><span>A Pinia plugin can be typed as follows</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> PiniaPluginContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myPiniaPlugin</span><span class="token punctuation">(</span>context<span class="token operator">:</span> PiniaPluginContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typing-new-store-properties" tabindex="-1"><a class="header-anchor" href="#typing-new-store-properties"><span>Typing new store properties</span></a></h3><p>When adding new properties to stores, you should also extend the <code>PiniaCustomProperties</code> interface.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;pinia&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PiniaCustomProperties</span> <span class="token punctuation">{</span>
    <span class="token comment">// by using a setter we can allow string and refs</span>
    <span class="token keyword">set</span> <span class="token function">hello</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Ref<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
    <span class="token keyword">get</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>

    <span class="token comment">// you can define simpler value too</span>
    simpleNumber<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It can then be written and read safely:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> store <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">&#39;hola&#39;</span>
  store<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;hola&#39;</span><span class="token punctuation">)</span>

  store<span class="token punctuation">.</span>simpleNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// @ts-expect-error: we haven&#39;t typed this correctlly</span>
  sotre<span class="token punctuation">.</span>simpleNumber <span class="token operator">=</span> ref<span class="token operator">&lt;</span>Math<span class="token punctuation">.</span>random<span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PiniaCustomProperties</code> is a generic type that allows you to reference properties of a store.</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> options <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> $options options <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>We can properly type this by using the 4 generic types of <code>PiniaCustomProperties:</code></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;pinia&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PiniaCustomProperties<span class="token operator">&lt;</span>Id<span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">G</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    $options<span class="token operator">:</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> Id<span class="token punctuation">,</span>
      state<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> s
      options<span class="token operator">?</span> <span class="token constant">A</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typing-new-state" tabindex="-1"><a class="header-anchor" href="#typing-new-state"><span>Typing new state</span></a></h3><p>When adding new state properties (to both, the <code>store</code> and <code>store.$state</code>), you need to add the type to <code>PiniaCustomStateProperties</code> instead. Differently from <code>PiniaCustomProperties</code>, it only receives the State generic:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;pinia&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DefineCustomStateProperties<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    hello<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typing-new-creation-options" tabindex="-1"><a class="header-anchor" href="#typing-new-creation-options"><span>Typing new creation options</span></a></h3><p>When creating new options for <code>defineStore()</code>, you should extend the <code>DefineStoreOptionsBase</code>.<br> Differently from <code>PiniaCustomProperties</code>, it only exposes two generics: the State and the Store type, allowing you to limit what can be defined.<br> For example, you can use the names of the actions:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;pinia&#39;</span>

define <span class="token keyword">module</span> <span class="token string">&#39;pinia&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">DefineStoreOptionsBase<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> Store<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// allow defining a number of ms for any of the actions</span>
    debounce<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token keyword">keyof</span> StoreActions<span class="token operator">&lt;</span>Store<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;&gt;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55),o=[p];function i(c,l){return a(),s("div",null,o)}const u=n(t,[["render",i],["__file","plugins.html.vue"]]),d=JSON.parse('{"path":"/notes/frontend/vue/pinia/core-concepts/plugins.html","title":"Plugins","lang":"zh-CN","frontmatter":{"order":50,"category":["笔记","frontend","pinia"],"tag":["pinia"],"description":"Plugins Pinia stores can be fully extended thanks to a low level API. Here is a list of things you can do: Add new properties to stores Add new options when defining stores Add ...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/pinia/core-concepts/plugins.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"Plugins"}],["meta",{"property":"og:description","content":"Plugins Pinia stores can be fully extended thanks to a low level API. Here is a list of things you can do: Add new properties to stores Add new options when defining stores Add ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-04T16:32:46.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"pinia"}],["meta",{"property":"article:modified_time","content":"2023-02-04T16:32:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Plugins\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-04T16:32:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Augmenting(扩大，增大，增强) a Store","slug":"augmenting-扩大-增大-增强-a-store","link":"#augmenting-扩大-增大-增强-a-store","children":[]},{"level":2,"title":"Adding new state","slug":"adding-new-state","link":"#adding-new-state","children":[]},{"level":2,"title":"Adding new external properties","slug":"adding-new-external-properties","link":"#adding-new-external-properties","children":[]},{"level":2,"title":"Calling $subscribe inside plugins","slug":"calling-subscribe-inside-plugins","link":"#calling-subscribe-inside-plugins","children":[]},{"level":2,"title":"Adding new options","slug":"adding-new-options","link":"#adding-new-options","children":[]},{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[{"level":3,"title":"A Pinia plugin can be typed as follows","slug":"a-pinia-plugin-can-be-typed-as-follows","link":"#a-pinia-plugin-can-be-typed-as-follows","children":[]},{"level":3,"title":"Typing new store properties","slug":"typing-new-store-properties","link":"#typing-new-store-properties","children":[]},{"level":3,"title":"Typing new state","slug":"typing-new-state","link":"#typing-new-state","children":[]},{"level":3,"title":"Typing new creation options","slug":"typing-new-creation-options","link":"#typing-new-creation-options","children":[]}]}],"git":{"createdTime":1655346858000,"updatedTime":1675528366000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":6}]},"readingTime":{"minutes":3.77,"words":1132},"filePathRelative":"notes/frontend/vue/pinia/core-concepts/plugins.md","localizedDate":"2022年6月16日","excerpt":"\\n<p>Pinia stores can be fully extended thanks to a low level API. Here is a list of things you can do:</p>\\n<ul>\\n<li>Add new properties to stores</li>\\n<li>Add new options when defining stores</li>\\n<li>Add new methods to stores</li>\\n<li>Wrap existing methods</li>\\n<li>Change or even cancel actions</li>\\n<li>Implement side effects like Local Storage</li>\\n<li>Apply only to specific stores</li>\\n</ul>","autoDesc":true}');export{u as comp,d as data};
