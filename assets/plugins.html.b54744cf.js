import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e}from"./app.e7ec5ddf.js";const t={},o=e(`<h1 id="plugins" tabindex="-1"><a class="header-anchor" href="#plugins" aria-hidden="true">#</a> Plugins</h1><p>Pinia stores can be fully extended thanks to a low level API. Here is a list of things you can do:</p><ul><li>Add new properties to stores</li><li>Add new options when defining stores</li><li>Add new methods to stores</li><li>Wrap existing methods</li><li>Change or even cancel actions</li><li>Implement side effects like Local Storage</li><li>Apply only to specific stores</li></ul><p>Plugins are added to the pinia instance with <code>pinia.use()</code>. The simplest example is adding a static property to all stores by returning an object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token comment">// add a property named \`secret\` to every store that is created after this plugin is installed</span>
<span class="token comment">// this could be a different file</span>
<span class="token keyword">function</span> <span class="token function">SecretPiniaPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token string">&#39;the cake is a lie&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// give the plugin to pinia</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>SecretPiniaPlugin<span class="token punctuation">)</span>

<span class="token comment">// in another file</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span>secret <span class="token comment">// &#39;the cake is a lie&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is useful to add global objects like the router, modal, or toast managers.</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>A Pinia plugin is a function that optionally returns properties to be added to a store. It takes one optional argument, a context:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">myPiniaPlugin</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context<span class="token punctuation">.</span>pinia <span class="token comment">// the pinia created with \`createPinia\`</span>
  context<span class="token punctuation">.</span>app <span class="token comment">// the current app created with \`createApp\` (Vue3 only)</span>
  context<span class="token punctuation">.</span>store <span class="token comment">// the store the plugin is augmenting</span>
  context<span class="token punctuation">.</span>options <span class="token comment">// the options object defining the store passed to \`defineStore()\`</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>myPiniaPlugin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Plugins are only applied to stores <strong>created after</strong> <code>pinia</code> is passed to the app, otherwise they won&#39;t be applied.</p><h2 id="augmenting-\u6269\u5927-\u589E\u5927-\u589E\u5F3A-a-store" tabindex="-1"><a class="header-anchor" href="#augmenting-\u6269\u5927-\u589E\u5927-\u589E\u5F3A-a-store" aria-hidden="true">#</a> Augmenting(\u6269\u5927\uFF0C\u589E\u5927\uFF0C\u589E\u5F3A) a Store</h2><p>You can add properties to every store by simply returning an object of them in a plugin:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also set the property directly on the store but if possible <code>use the return version</code> so they can be automatically tracked by devtools:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that every store is wrapped with <code>reactive</code>, <strong>automatically unwrapping</strong> any <code>Ref</code> (<code>ref()</code>, <code>computed()</code>, ...) it contains:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sharedRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;shared&#39;</span><span class="token punctuation">)</span>
pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// each store has its individual \`hello\` property</span>
  store<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;secret&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// it gets automatically unwrapped</span>
  store<span class="token punctuation">.</span>hello <span class="token comment">// &#39;secret&#39;</span>

  <span class="token comment">// all stores are sharing the value \`shared\` property</span>
  store<span class="token punctuation">.</span>shared <span class="token operator">=</span> sharedRef
  store<span class="token punctuation">.</span>shared <span class="token comment">// &#39;shared&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is why you can access all computed properties without .value and why they are reactive.</p><h2 id="adding-new-state" tabindex="-1"><a class="header-anchor" href="#adding-new-state" aria-hidden="true">#</a> Adding new state</h2><p>If you want to add new state properties to a store or properties that are meant to be used during hydration, you will have to add it in two places:</p><ul><li>On the <code>store</code> so you can access it with <code>store.myState</code></li><li>On <code>store.$state</code> so it can be used in devtools and, be serialized during SSR.</li></ul><p>On top of that, you will certainly have to use a <code>ref()</code> (or other reactive API) in order to share the value across different accesses:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> toRef<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> store <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// to correctlly handle SSR, we need to make sure we are not overriding an existing value</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> <span class="token string">&#39;hasError&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// hasError is defined within the plugin, so each store has their individual state property</span>
    <span class="token keyword">const</span> hasError <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token comment">// setting the variable on \`$state\`, allows it be serialized during SSR</span>
    store<span class="token punctuation">.</span>$state<span class="token punctuation">.</span>hasError <span class="token operator">=</span> hasError
  <span class="token punctuation">}</span>

  <span class="token comment">// we need to transfer the ref from the state to the store,</span>
  <span class="token comment">// this way both accesses: store.hasError and store.$state.hasError</span>
  <span class="token comment">// will work and share the same variable</span>
  store<span class="token punctuation">.</span>hasError <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> <span class="token string">&#39;hasError&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// in this case it&#39;s better not to return \`hasError\` since it</span>
  <span class="token comment">// will be displayed in the \`state\` section in the devtools</span>
  <span class="token comment">// anyway and if we return it, devtools will display it twice.</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="adding-new-external-properties" tabindex="-1"><a class="header-anchor" href="#adding-new-external-properties" aria-hidden="true">#</a> Adding new external properties</h2><p>When adding external properties, class instances that come from other libraries, or simply things that are not reactive, you should wrap the object with <code>markRaw()</code> before passing it to pinia.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> markRaw <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./router&#39;</span>

pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  store<span class="token punctuation">.</span>router <span class="token operator">=</span> <span class="token function">markRaw</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),p=[o];function i(c,l){return s(),a("div",null,p)}var d=n(t,[["render",i],["__file","plugins.html.vue"]]);export{d as default};
