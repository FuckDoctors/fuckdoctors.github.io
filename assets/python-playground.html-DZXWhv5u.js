import{_ as o,c as k,a as r,b as s,h as a,e as n,w as l,f as t,o as d}from"./app-Zmlm17tQ.js";const c={};function g(y,i){const h=t("RouteLink"),e=t("PythonPlayground"),p=t("VPPreview");return d(),k("div",null,[i[10]||(i[10]=r('<h1 id="python-playground" tabindex="-1"><a class="header-anchor" href="#python-playground"><span>Python Playground</span></a></h1><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Python Playground 还处于开发阶段，功能尚未完善，将来陆续完善。</p></div><p>简单记录一下近期抽空做的简单的 <a href="https://play-py.zhaobc.site" target="_blank" rel="noopener noreferrer">Python Playground</a>。</p>',3)),s("p",null,[i[1]||(i[1]=n("Python Playground 主要是为了配合")),a(h,{to:"/notes/backend/python/"},{default:l(()=>i[0]||(i[0]=[n("笔记")])),_:1,__:[0]}),i[2]||(i[2]=n("中的示例，基本保持跟 ")),i[3]||(i[3]=s("a",{href:"https://play.vuejs.org",target:"_blank",rel:"noopener noreferrer"},"Vue Playground",-1)),i[4]||(i[4]=n(" 一样的逻辑。"))]),i[11]||(i[11]=s("p",null,"大概思想是将 markdown 中的示例代码直接转为 Playground 中的代码，并可预览执行结果。",-1)),i[12]||(i[12]=s("h2",{id:"示例",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#示例"},[s("span",null,"示例")])],-1)),i[13]||(i[13]=s("p",null,"以下是一些简单的示例。",-1)),i[14]||(i[14]=s("h3",{id:"hello-world",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#hello-world"},[s("span",null,"Hello world")])],-1)),a(p,{title:"示例"},{content:l(()=>[a(e,{title:"%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fplay-py.zhaobc.site%3FautoRun%3Dtrue%23eyJtYWluLnB5IjoiaW1wb3J0IG9zXG5cbnByaW50KCdIZWxsbyBweXRob24gcGxheWdyb3VuZCEnKVxuXG5wcmludCgnZW52OiAnLCBvcy5lbnZpcm9uKVxuIiwiZW52IjoiYT1iXG5hMT1iMVxuIiwicmVxdWlyZW1lbnRzLnR4dCI6InBhbmRhc1xubnVtcHlcbiJ9",allow:"cross-origin-isolated"})]),code:l(()=>i[5]||(i[5]=[s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,":::playground#python 示例")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file main.py")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```python")]),n(`
`),s("span",{class:"line"},[s("span",null,"import os")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"print('Hello python playground!')")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"print('env: ', os.environ)")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file env")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```shell")]),n(`
`),s("span",{class:"line"},[s("span",null,"a=b")]),n(`
`),s("span",{class:"line"},[s("span",null,"a1=b1")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file requirements.txt")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```txt")]),n(`
`),s("span",{class:"line"},[s("span",null,"pandas")]),n(`
`),s("span",{class:"line"},[s("span",null,"numpy")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@settings")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```json")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,'  "autoRun": true')]),n(`
`),s("span",{class:"line"},[s("span",null,"}")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,":::")])])])],-1)])),_:1}),i[15]||(i[15]=s("p",null,[n("上面的 "),s("code",null,"@settings"),n(" 用来传一些参数，比如 "),s("code",null,"autoRun"),n(" 自动运行。")],-1)),i[16]||(i[16]=s("h3",{id:"matplotlib-绘图",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#matplotlib-绘图"},[s("span",null,"Matplotlib 绘图")])],-1)),i[17]||(i[17]=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,"加载相关依赖较慢，请耐心等待。")],-1)),a(p,{title:"Matplotlib 绘图"},{content:l(()=>[a(e,{title:"Matplotlib",link:"https%3A%2F%2Fplay-py.zhaobc.site%3FautoRun%3Dtrue%26outputMode%3Dpreview%23eyJtYWluLnB5IjoiaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdFxuaW1wb3J0IG51bXB5IGFzIG5wXG5cbnhwb2ludHMgPSBucC5hcnJheShbMCwgNl0pXG55cG9pbnRzID0gbnAuYXJyYXkoWzAsIDEwMF0pXG5cbnBsdC5wbG90KHhwb2ludHMsIHlwb2ludHMpXG5wbHQuc2hvdygpXG4ifQ%3D%3D",allow:"cross-origin-isolated"})]),code:l(()=>i[6]||(i[6]=[s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,":::playground#python Matplotlib")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file main.py")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```python")]),n(`
`),s("span",{class:"line"},[s("span",null,"import matplotlib.pyplot as plt")]),n(`
`),s("span",{class:"line"},[s("span",null,"import numpy as np")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"xpoints = np.array([0, 6])")]),n(`
`),s("span",{class:"line"},[s("span",null,"ypoints = np.array([0, 100])")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"plt.plot(xpoints, ypoints)")]),n(`
`),s("span",{class:"line"},[s("span",null,"plt.show()")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@settings")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```json")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,'  "autoRun": true,')]),n(`
`),s("span",{class:"line"},[s("span",null,'  "outputMode": "preview"')]),n(`
`),s("span",{class:"line"},[s("span",null,"}")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,":::")])])])],-1)])),_:1}),i[18]||(i[18]=s("p",null,[s("code",null,"settings"),n(" 里是自动运行和显示预览。")],-1)),i[19]||(i[19]=s("h3",{id:"plotly-图表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#plotly-图表"},[s("span",null,"Plotly 图表")])],-1)),i[20]||(i[20]=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"提示"),s("p",null,"加载相关依赖较慢，请耐心等待。")],-1)),a(p,{title:"Plotly 图表"},{content:l(()=>[a(e,{title:"Plotly",link:"https%3A%2F%2Fplay-py.zhaobc.site%3FautoRun%3Dtrue%26outputMode%3Dpreview%23eyJtYWluLnB5IjoiaW1wb3J0IHBsb3RseS5ncmFwaF9vYmplY3RzIGFzIGdvXG5cbiMg5Yib5bu656S65L6L5pWw5o2uXG54ID0gWzEsIDIsIDMsIDQsIDVdXG55ID0gWzEwLCAxMSwgMTIsIDEzLCAxNF1cblxuIyDliJvlu7rmipjnur%2Flm75cbmZpZyA9IGdvLkZpZ3VyZSgpXG5cbmZpZy5hZGRfdHJhY2UoZ28uU2NhdHRlcih4PXgsIHk9eSwgbW9kZT0nbGluZXMrbWFya2VycycsIG5hbWU9J%2BaVsOaNrue6vycpKVxuXG4jIOabtOaWsOW4g%2BWxgFxuZmlnLnVwZGF0ZV9sYXlvdXQoXG4gICAgdGl0bGU9J%2BS6kuWKqOaKmOe6v%2BWbvicsXG4gICAgeGF4aXNfdGl0bGU9J1gg6L20JyxcbiAgICB5YXhpc190aXRsZT0nWSDovbQnLFxuICAgIGhvdmVybW9kZT0nY2xvc2VzdCdcbilcblxuIyDmmL7npLrlm77ooahcbmZpZy5zaG93KClcbiJ9",allow:"cross-origin-isolated"})]),code:l(()=>i[7]||(i[7]=[s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,":::playground#python Plotly")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file main.py")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```python")]),n(`
`),s("span",{class:"line"},[s("span",null,"import plotly.graph_objects as go")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"# 创建示例数据")]),n(`
`),s("span",{class:"line"},[s("span",null,"x = [1, 2, 3, 4, 5]")]),n(`
`),s("span",{class:"line"},[s("span",null,"y = [10, 11, 12, 13, 14]")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"# 创建折线图")]),n(`
`),s("span",{class:"line"},[s("span",null,"fig = go.Figure()")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"fig.add_trace(go.Scatter(x=x, y=y, mode='lines+markers', name='数据线'))")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"# 更新布局")]),n(`
`),s("span",{class:"line"},[s("span",null,"fig.update_layout(")]),n(`
`),s("span",{class:"line"},[s("span",null,"    title='互动折线图',")]),n(`
`),s("span",{class:"line"},[s("span",null,"    xaxis_title='X 轴',")]),n(`
`),s("span",{class:"line"},[s("span",null,"    yaxis_title='Y 轴',")]),n(`
`),s("span",{class:"line"},[s("span",null,"    hovermode='closest'")]),n(`
`),s("span",{class:"line"},[s("span",null,")")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"# 显示图表")]),n(`
`),s("span",{class:"line"},[s("span",null,"fig.show()")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@settings")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```json")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,'  "autoRun": true,')]),n(`
`),s("span",{class:"line"},[s("span",null,'  "outputMode": "preview"')]),n(`
`),s("span",{class:"line"},[s("span",null,"}")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,":::")])])])],-1)])),_:1}),i[21]||(i[21]=s("h3",{id:"多文件示例",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#多文件示例"},[s("span",null,"多文件示例")])],-1)),a(p,{title:"多文件示例"},{content:l(()=>[a(e,{title:"%E5%A4%9A%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fplay-py.zhaobc.site%3FautoRun%3Dtrue%23eyJtYWluLnB5IjoiZnJvbSB0ZXN0IGltcG9ydCBwcmludF9mdW5jXG5cbnByaW50KCdIZWxsbyBweXRob24gcGxheWdyb3VuZCEnKVxuXG5wcmludF9mdW5jKCdUaGlzIG1lc3NhZ2UgaXMgZnJvbSB0ZXN0LnB5JylcbiIsInRlc3QucHkiOiJkZWYgcHJpbnRfZnVuYyhhcmdzKTpcbiAgcHJpbnQoYXJncylcbiJ9",allow:"cross-origin-isolated"})]),code:l(()=>i[8]||(i[8]=[s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,":::playground#python 多文件示例")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file main.py")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```python")]),n(`
`),s("span",{class:"line"},[s("span",null,"from test import print_func")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"print('Hello python playground!')")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"print_func('This message is from test.py')")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file test.py")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```python")]),n(`
`),s("span",{class:"line"},[s("span",null,"def print_func(args):")]),n(`
`),s("span",{class:"line"},[s("span",null,"  print(args)")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@settings")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```json")]),n(`
`),s("span",{class:"line"},[s("span",null,"{")]),n(`
`),s("span",{class:"line"},[s("span",null,'  "autoRun": true')]),n(`
`),s("span",{class:"line"},[s("span",null,"}")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,":::")])])])],-1)])),_:1}),i[22]||(i[22]=s("h3",{id:"控制台输入示例",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#控制台输入示例"},[s("span",null,"控制台输入示例")])],-1)),i[23]||(i[23]=s("div",{class:"hint-container warning"},[s("p",{class:"hint-container-title"},"注意"),s("p",null,[n("请注意 "),s("code",null,"CONSOLE"),n(" 标签中光标闪烁的地方！"),s("br"),n(" 按 "),s("code",null,"Enter"),n(" 键，或输入框失去焦点后会自动执行。")])],-1)),a(p,{title:"控制台输入示例"},{content:l(()=>[a(e,{title:"%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fplay-py.zhaobc.site%23eyJtYWluLnB5IjoiaW5wID0gaW5wdXQoJ%2Bivt%2Bi%2Bk%2BWFpeS4gOS6m%2BWGheWuue%2B8micpXG5wcmludCgn6L%2BZ5piv5L2g6L6T5YWl55qE5YaF5a6577yaJywgaW5wKVxuIn0%3D",allow:"cross-origin-isolated"})]),code:l(()=>i[9]||(i[9]=[s("div",{class:"language-","data-highlighter":"shiki","data-ext":"",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",{class:"language-"},[s("span",{class:"line"},[s("span",null,":::playground#python 控制台输入示例")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"@file main.py")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,"```python")]),n(`
`),s("span",{class:"line"},[s("span",null,"inp = input('请输入一些内容：')")]),n(`
`),s("span",{class:"line"},[s("span",null,"print('这是你输入的内容：', inp)")]),n(`
`),s("span",{class:"line"},[s("span",null,"```")]),n(`
`),s("span",{class:"line"},[s("span")]),n(`
`),s("span",{class:"line"},[s("span",null,":::")])])])],-1)])),_:1}),i[24]||(i[24]=r(`<h2 id="开发背景" tabindex="-1"><a class="header-anchor" href="#开发背景"><span>开发背景</span></a></h2><p>为了学习 Python (很遗憾没坚持下来。。) 希望能达到能及时看到代码执行结果的目的，希望加人一个 Python Playground。</p><p>最初调查后，发现 <a href="https://replit.com/" target="_blank" rel="noopener noreferrer">Replit</a> 可达到效果，并且为主题封装了一个简易的 <code>Replit</code> 组件。<br> 但是，好景不长，后续 Replit 不再提过可编辑，可运行的 Python 环境。<br> 所以，换个方向，使用其他方式来达到效果，同时期望使用 Vue Playground 的方式，可传递代码，实用性强。</p><h2 id="开发过程" tabindex="-1"><a class="header-anchor" href="#开发过程"><span>开发过程</span></a></h2><p>开发之前先搜了几个在线 Python 环境，但是不太符合要求，只好自己尝试开发了。</p><ul><li><a href="https://cliprun.com/" target="_blank" rel="noopener noreferrer">cliprun</a> 简洁易用，但是跟我自己的需求不符，不能传入代码。</li><li><a href="https://play-python.asyncmove.com/" target="_blank" rel="noopener noreferrer">Play Python</a> 一个相对完善在线 Python 环境，而且跟 Vue Playground 类似，可以传入代码。<br> 但，遗憾的是，尝试集成到主题时未成功。</li><li><a href="https://github.com/toyai/python-playground" target="_blank" rel="noopener noreferrer">toyai/python-playground</a> 开源，跟 Vue Playground 类似，但是部署需要单独的服务器，而且 Python 版本有点旧。</li></ul><p>鉴于以上种种原因，打算自己开发一个 Python Playground, 需要满足以下要求：</p><ul><li>像 Vue Playground 一样，可以传入代码</li><li>无需单独的服务器部署</li><li>基于 <a href="https://pyodide.org/" target="_blank" rel="noopener noreferrer">Pyodide</a> 开发</li><li>集成 Python LSP, 提高用户体验</li></ul><h3 id="第一步-搭框架" tabindex="-1"><a class="header-anchor" href="#第一步-搭框架"><span>第一步 搭框架</span></a></h3><p>下载 <a href="https://github.com/vuejs/repl" target="_blank" rel="noopener noreferrer">vue-repl</a>，基于它进行魔改。</p><p>工作内容：</p><ul><li>去除 Vue, TypeScript, Import Map 等相关处理</li><li>去除 CodeMirror，仅保留 MonacoEditor</li><li>新增 Python 语言及语法高亮</li></ul><h3 id="第二步-集成-pyodide" tabindex="-1"><a class="header-anchor" href="#第二步-集成-pyodide"><span>第二步 集成 Pyodide</span></a></h3><p>集成 Pyodide, 以便能运行 Python 代码</p><p>工作内容：</p><ul><li>编写 PyodideWorker，完成各种通信</li></ul><p>由于能力水平有限，直接使用了 <a href="https://cliprun.com/" target="_blank" rel="noopener noreferrer">cliprun</a> 的 PyodideWorker，然后稍微修改了一下。<br> 在此感谢 <a href="https://cliprun.com/" target="_blank" rel="noopener noreferrer">cliprun</a> 的出色工作！</p><p>也正是因为使用了 <a href="https://cliprun.com/" target="_blank" rel="noopener noreferrer">cliprun</a> 的代码，所以可能涉及版权问题，不能随意公开代码，分发代码。<br> 当然，自己水平也有限，也不太好意思公开代码。</p><h3 id="第三步-同步文件系统" tabindex="-1"><a class="header-anchor" href="#第三步-同步文件系统"><span>第三步 同步文件系统</span></a></h3><p>Vue Playground 中，可以支持多个 <code>.vue</code>, <code>.js</code> 等文件，这次的 Play Playground 也期望能支持多文件。<br> 为此，需要使用 Pyodide 的文件系统。</p><p>工作内容：</p><ul><li>修改 <code>store.ts</code> 文件，文件增删改时，使用 PyodideWorker，完成 Pyodide 文件系统的同步操作</li></ul><h3 id="第四步-集成-python-lsp" tabindex="-1"><a class="header-anchor" href="#第四步-集成-python-lsp"><span>第四步 集成 Python LSP</span></a></h3><p>通过上面的几步，已经可以完成 Python 代码执行，但是无法像 Vue Playground 那样有代码提示，代码校验。</p><p>为了解决这个问题，需要集成 Python LSP (Language Server Protocol)。<br> LSP Server 又有点犯难，期望直接在浏览器中能用的那种，不需要单独的服务器来部署。</p><p>最终选择了 Pyright 来做 LSP，主要使用了 <a href="https://github.com/erictraut/pyright-playground/" target="_blank" rel="noopener noreferrer">Pyright Playground</a> 的代码。</p><p>工作内容:</p><ul><li>下载 <a href="https://github.com/erictraut/pyright-playground/" target="_blank" rel="noopener noreferrer">Pyright Playground</a> 代码，然后将 server 端作为 LSP Server</li><li>摘取 <a href="https://github.com/erictraut/pyright-playground/" target="_blank" rel="noopener noreferrer">Pyright Playground</a> client 端部分代码，集成到 MonacoEditor 中</li><li>稍微修改 server 端代码，使其适配 Windows 环境</li></ul><p>至此，本地开发中可以使用 Python LSP了，能完成代码提示，代码校验等。</p><h3 id="第五步-部署到-vercel" tabindex="-1"><a class="header-anchor" href="#第五步-部署到-vercel"><span>第五步 部署到 Vercel</span></a></h3><p>由于本人博客主要部署在 Vercel 上，所以本次的 Python Playground 也打算继续部署到 Vercel 上（主要是穷，没钱买服务器 -_-!）。</p><p>由于 <a href="https://github.com/erictraut/pyright-playground/" target="_blank" rel="noopener noreferrer">Pyright Playground</a> 中的 server 端使用 express 作为 Server 来处理 API，本地没问题。</p><p>但是 Vercel 虽然也支持 express，但是试验中发现并不好用，估计是 express + typescript 的问题吧。。。</p><p>为了解决部署到 Vercel 中无法使用 LSP 的问题，打算改写 server 端，使用 Vercel Functions 来处理 API。</p><p>但是 Vercel Functions 的资料感觉很少，没看到怎么处理复杂 API 路径和参数的问题，后来偶然看到了一篇文章介绍了路径和参数的例子才知道怎么处理。<br> 在此表示感谢，但是忘记记录地址了。。。</p><p>大概按以下的逻辑处理:</p><div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>api                                 // vercel 要求，必须放到根目录下的 api 文件夹</span></span>
<span class="line"><span>│  hello.ts</span></span>
<span class="line"><span>│  session.ts                       // 处理 /api/session 请求</span></span>
<span class="line"><span>│  status.ts</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└─session</span></span>
<span class="line"><span>    │  [sid].ts                     // 处理 /api/session/:sid 请求</span></span>
<span class="line"><span>    │</span></span>
<span class="line"><span>    └─[sid]</span></span>
<span class="line"><span>            completion.ts           // 处理 /api/session/:sid/completion 请求</span></span>
<span class="line"><span>            diagnostics.ts</span></span>
<span class="line"><span>            hover.ts</span></span></code></pre></div><p>最后，还需要调整 server 端的 API 处理，原来的 Pyright 中有 session 的管理，<br> 最初创建一个 seesion，后续处理使用其 sessionId 接着处理，已有该 session 的话，直接使用，这样效率高。<br> 但是，Vercel 中，不能执行长时间的请求，也不能使用全局变量，这导致了 session 管理失效，不能正常使用。</p><p>对策，Vercel 环境中，找不到原来的 session 时就新建一个，其实相当于每次都新建 session，这也导致了部署后，代码提示会相对比较慢。</p><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h2><p>开发中不熟悉 Pyodide, 也不熟悉 MonoEditor, Web Worker 所以遇到了不少问题，这里简单记录一下。</p><h3 id="sharedarraybuffer-使用问题" tabindex="-1"><a class="header-anchor" href="#sharedarraybuffer-使用问题"><span>SharedArrayBuffer 使用问题</span></a></h3><ul><li><p>SharedArrayBuffer is not defined<br> 在处理 <code>stdin</code> 中，用到了 SharedArrayBuffer，但是使用上有些限制，需要配置 <code>headers</code>。</p><p>MDN 文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements" target="_blank" rel="noopener noreferrer">安全需求</a></p><p>本地开发时，需要在 <code>vite.config.ts</code> 中配置一下。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="vite.config.ts"><span>vite.config.ts</span></div><div class="language-ts" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // SharedArrayBuffer is not defined</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;Cross-Origin-Embedder-Policy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;require-corp&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;Cross-Origin-Opener-Policy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;same-origin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //&#39;Cross-Origin-Resource-Policy&#39;: &#39;same-site&#39;, // 嵌入方式仅在本站内使用</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;Cross-Origin-Resource-Policy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;cross-origin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 嵌入方式仅在本站内使用</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span></code></pre></div></div><p>服务器端也需要做相应配置。<br> 由于本人使用 vercel 部署，所以需要配置一下 <code>vercel.json</code>。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="vercel.json"><span>vercel.json</span></div><div class="language-json" data-highlighter="shiki" data-ext="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-json"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;headers&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;source&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/(.*)&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      &quot;headers&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;key&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Cross-Origin-Embedder-Policy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;require-corp&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;key&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Cross-Origin-Opener-Policy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;same-origin&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;key&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Cross-Origin-Resource-Policy&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          &quot;value&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;cross-origin&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></div></li><li><p><code>stdin</code> 处理 python <code>input</code><br> 在 python 中处理 <code>input</code> 时用到了两个输入流，一个是用来做控制的，一个是用来处理数据的。<br> 由于 <code>input</code> 会有用户交互，所以用到了 <code>Atomics.wait</code> 来做中断，等待用户输入完后再继续处理。</p><p>Pyodide 文档: <a href="https://pyodide.org/en/stable/usage/keyboard-interrupts.html#setting-up-interrupts" target="_blank" rel="noopener noreferrer">设置中断</a></p><p>python repl 中有以下代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputBuffer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SharedArrayBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputTextBuffer</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SharedArrayBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputView</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Int32Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputTextView</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Uint8Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputTextBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Atomics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Atomics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>前台处理中有以下代码。</p><div class="language-js" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回 Uint8Array</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> encoder</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> TextEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> inputData</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> inputTextBuff</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Uint8Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">buff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// buff 是 repl 创建的 SharedArrayBuffer(1024)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将用户数据放到 inputTextBuff 中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> inputData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  inputTextBuff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> inputData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputTextBuff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">inputData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 Atomics 恢复程序</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> inputView</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Int32Array</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputBuff</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// inputBuff 是 repl 创建的 SharedArrayBuffer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Atomics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Atomics</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">notify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">inputView</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p>repl 和 前台的这两个输入流的类型必须一致。</p></li></ul><h3 id="跨域设置问题" tabindex="-1"><a class="header-anchor" href="#跨域设置问题"><span>跨域设置问题</span></a></h3><p>为了使用 <code>SharedArrayBuffer</code> 主站设置了以下 headers:</p><ul><li><code>Cross-Origin-Opener-Policy</code> (<em>COOP</em>)</li><li><code>Cross-Origin-Embedder-Policy</code> (<em>COEP</em>)</li><li><code>Cross-Origin-Resource-Policy</code> (<em>CORP</em>)</li></ul><div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>Cross-Origin-Opener-Policy: same-origin</span></span>
<span class="line"><span>Cross-Origin-Embedder-Policy: require-corp</span></span>
<span class="line"><span>Cross-Origin-Resource-Policy: same-site</span></span></code></pre></div><p>其中，设置 <code>Cross-Origin-Resource-Policy</code> 是为了嵌入的 <code>iframe</code> 里的 Python Playground，能正常使用。<br> 除此之外，还设置了 <code>iframe</code> 的属性 <code>allow=&quot;cross-origin-isolated&quot;</code>。</p><p>由于设置了上面 header 会导致主站的一些 <code>js</code>, <code>css</code> 等加载有问题，需要加上 <code>crossorigin</code> 属性。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Cross-Origin-Embedder-Policy#%E9%81%BF%E5%85%8D_cors_%E9%98%BB%E5%A1%9E_coep" target="_blank" rel="noopener noreferrer">避免 COEP 阻塞 CORS</a></p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>更新：2022 年 5 月 Cross-Origin-Embedder-Policy: credentialless 已发布，自 Chrome 96 起便可在 Chrome 中使用。</p><p>该值允许浏览器通过发送不包含凭据（例如 Cookie）的请求来加载不使用跨源资源政策 (CORP) 的跨源资源。这有助于开发者更轻松地采用跨源隔离。</p><p><a href="https://developer.chrome.google.cn/blog/coep-credentialless-origin-trial?hl=zh-cn" target="_blank" rel="noopener noreferrer">使用 COEP 无凭据加载不含 CORP 标头的跨源资源</a></p><p>您也可以使用以下两个标头来启用跨源隔离：</p><div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>Cross-Origin-Embedder-Policy: credentialless</span></span>
<span class="line"><span>Cross-Origin-Opener-Policy: same-origin</span></span></code></pre></div><p>您可以在以下演示中尝试各种标头选项：<a href="https://cross-origin-isolation.glitch.me" target="_blank" rel="noopener noreferrer">https://cross-origin-isolation.glitch.me</a></p></div><p>clarity 设置：</p><ul><li><p><code>Content-Security-Policy</code> (<em>CSP</em>)</p></li><li><p><a href="https://learn.microsoft.com/en-us/clarity/setup-and-installation/clarity-csp" target="_blank" rel="noopener noreferrer">Clarity Content Security Policy</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Headers/Content-Security-Policy/default-src#%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener noreferrer">CSP：default-src</a></p></li></ul><div class="language-txt" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-txt"><span class="line"><span>Content-Security-Policy: default-src &#39;self&#39; https://*.clarity.ms https://c.bing.com &#39;unsafe-inline&#39;;</span></span></code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>除了 clarity 外，可能用到了其他的外部资源，比如百度统计, CDN 等，如果设置了 CSP，内容不全的话，反而会阻塞外部资源。</p></div><p>参考：</p><ul><li><a href="https://web.developers.google.cn/articles/cross-origin-isolation-guide?hl=zh-cn" target="_blank" rel="noopener noreferrer">关于启用跨域隔离的指南</a></li><li><a href="https://developer.chrome.google.cn/blog/coep-credentialless-origin-trial?hl=zh-cn" target="_blank" rel="noopener noreferrer">使用 COEP 无凭据加载不含 CORP 标头的跨源资源</a></li></ul><h2 id="类似功能" tabindex="-1"><a class="header-anchor" href="#类似功能"><span>类似功能</span></a></h2><p>其他网站已提供现成的功能，可以直接使用。本次开发中也借鉴了它们，再次表示感谢。</p><ul><li><a href="https://play.vuejs.org" target="_blank" rel="noopener noreferrer">Vue Playground</a></li><li><a href="https://cliprun.com/" target="_blank" rel="noopener noreferrer">cliprun</a> Online Python Compiler, IDE, and Interpreter</li><li><a href="https://play-python.asyncmove.com/" target="_blank" rel="noopener noreferrer">Play Python</a> Run code, collaborate in real-time.</li><li><a href="https://pyodide.org/" target="_blank" rel="noopener noreferrer">Pyodide</a> Python distribution for the browser and Node.js based on WebAssembly</li></ul>`,60))])}const A=o(c,[["render",g]]),B=JSON.parse('{"path":"/posts/dev/python-playground.html","title":"Python Playground","lang":"zh-CN","frontmatter":{"article":true,"isOriginal":true,"sticky":80,"star":94,"date":"2025-07-02T00:00:00.000Z","category":["dev","playground"],"tag":["dev","开发","python"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python Playground\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-02T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-19T14:33:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"],["meta",{"property":"og:url","content":"https://www.zhaobc.site/posts/dev/python-playground.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"Python Playground"}],["meta",{"property":"og:description","content":"Python Playground 注意 Python Playground 还处于开发阶段，功能尚未完善，将来陆续完善。 简单记录一下近期抽空做的简单的 Python Playground。 Python Playground 主要是为了配合中的示例，基本保持跟 Vue Playground 一样的逻辑。 大概思想是将 markdown 中的示例代码..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-19T14:33:26.000Z"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"开发"}],["meta",{"property":"article:tag","content":"dev"}],["meta",{"property":"article:published_time","content":"2025-07-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-19T14:33:26.000Z"}],["meta",{"name":"description","content":"Python Playground, Python 演练场, python repl, python, repl"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://www.zhaobc.site/rss.xml","title":"赵斌的小站 RSS Feed"}]],"description":"Python Playground 注意 Python Playground 还处于开发阶段，功能尚未完善，将来陆续完善。 简单记录一下近期抽空做的简单的 Python Playground。 Python Playground 主要是为了配合中的示例，基本保持跟 Vue Playground 一样的逻辑。 大概思想是将 markdown 中的示例代码..."},"git":{"createdTime":1751511403000,"updatedTime":1752935606000,"contributors":[{"name":"Zhao Bin","username":"","email":"413853119@qq.com","commits":8}]},"readingTime":{"minutes":8.84,"words":2653},"filePathRelative":"posts/dev/python-playground.md","excerpt":"\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>Python Playground 还处于开发阶段，功能尚未完善，将来陆续完善。</p>\\n</div>\\n<p>简单记录一下近期抽空做的简单的 <a href=\\"https://play-py.zhaobc.site\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Python Playground</a>。</p>\\n<p>Python Playground 主要是为了配合<a href=\\"/notes/backend/python/\\" target=\\"_blank\\">笔记</a>中的示例，基本保持跟 <a href=\\"https://play.vuejs.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Vue Playground</a> 一样的逻辑。</p>","autoDesc":true}');export{A as comp,B as data};
