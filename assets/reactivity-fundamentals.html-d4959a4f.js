const e=JSON.parse('{"key":"v-45d3c964","path":"/notes/frontend/vue/vue3/basic/reactivity-fundamentals.html","title":"响应式基础","lang":"zh-CN","frontmatter":{"order":20,"category":["笔记","frontend","vue"],"tag":["vue3"],"description":"响应式基础 声明响应式状态 我们可以使用 reactive() 函数创建一个响应式对象或数组： &lt;script setup&gt; 在 setup() 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用构建工具来简化该操作。 当使用单文件组件（SFC）时，我们可以使用 &lt;script setup&gt; 来大幅度地简化代码。 DOM 更新时机 当你更改响应式状态后，DOM 会自动更新。然而，你得注意 DOM 的更新并不是同步的。 相反，Vue 将缓冲它们直到更新周期的 “下个时机” 以确保无论你进行了多少次状态更改，每个组件都只更新一次。","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/vue3/basic/reactivity-fundamentals.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"响应式基础"}],["meta",{"property":"og:description","content":"响应式基础 声明响应式状态 我们可以使用 reactive() 函数创建一个响应式对象或数组： &lt;script setup&gt; 在 setup() 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用构建工具来简化该操作。 当使用单文件组件（SFC）时，我们可以使用 &lt;script setup&gt; 来大幅度地简化代码。 DOM 更新时机 当你更改响应式状态后，DOM 会自动更新。然而，你得注意 DOM 的更新并不是同步的。 相反，Vue 将缓冲它们直到更新周期的 “下个时机” 以确保无论你进行了多少次状态更改，每个组件都只更新一次。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-25T08:13:51.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2023-06-25T08:13:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"响应式基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-25T08:13:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"https://www.zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"声明响应式状态","slug":"声明响应式状态","link":"#声明响应式状态","children":[{"level":3,"title":"<script setup>","slug":"script-setup","link":"#script-setup","children":[]},{"level":3,"title":"DOM 更新时机","slug":"dom-更新时机","link":"#dom-更新时机","children":[]},{"level":3,"title":"深层响应性","slug":"深层响应性","link":"#深层响应性","children":[]},{"level":3,"title":"reactive() 的局限性","slug":"reactive-的局限性","link":"#reactive-的局限性","children":[]}]},{"level":2,"title":"用 ref() 定义响应式变量","slug":"用-ref-定义响应式变量","link":"#用-ref-定义响应式变量","children":[{"level":3,"title":"ref 在模板中的解包","slug":"ref-在模板中的解包","link":"#ref-在模板中的解包","children":[]},{"level":3,"title":"ref 在响应式对象中的解包","slug":"ref-在响应式对象中的解包","link":"#ref-在响应式对象中的解包","children":[]},{"level":3,"title":"数组和集合类型的 ref 解包","slug":"数组和集合类型的-ref-解包","link":"#数组和集合类型的-ref-解包","children":[]}]}],"git":{"createdTime":1687680831000,"updatedTime":1687680831000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":4.09,"words":1227},"filePathRelative":"notes/frontend/vue/vue3/basic/reactivity-fundamentals.md","localizedDate":"2023年6月25日","excerpt":"<h1> 响应式基础</h1>\\n<h2> 声明响应式状态</h2>\\n<p>我们可以使用 reactive() 函数创建一个响应式对象或数组：</p>\\n\\n<h3> <code>&lt;script setup&gt;</code></h3>\\n<p>在 <code>setup()</code> 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用构建工具来简化该操作。<br>\\n当使用单文件组件（SFC）时，我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码。</p>\\n\\n<h3> DOM 更新时机</h3>\\n<p>当你更改响应式状态后，DOM 会自动更新。然而，你得注意 DOM 的更新并不是同步的。<br>\\n相反，Vue 将缓冲它们直到更新周期的 “下个时机” 以确保无论你进行了多少次状态更改，每个组件都只更新一次。</p>","autoDesc":true}');export{e as data};
