import{_ as c,r as t,o as i,c as l,a as n,b as s,d as e,h as a}from"./app-2I8Udl23.js";const r={},u=a(`<h1 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>State</span></a></h1><p>The state is, most of the time, the central part of your store.<br> In Pinia the state is <strong>defined as a function that returns the initial state</strong>.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// arrow function recommended for full type inference</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// all these properties will have their type inferred automatically</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Eduardo&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={class:"hint-container tip"},k=n("p",{class:"hint-container-title"},"提示",-1),m=n("br",null,null,-1),v=n("code",null,"Vue.set()",-1),h=n("br",null,null,-1),b={href:"https://v2.vuejs.org/v2/api/#data",target:"_blank",rel:"noopener noreferrer"},g=a(`<h2 id="accessing-the-state" tabindex="-1"><a class="header-anchor" href="#accessing-the-state"><span>Accessing the <code>state</code></span></a></h2><p>By default, you can directly read and write to the state by accessing it through the <code>store</code> instance:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span>counter<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resetting-the-state" tabindex="-1"><a class="header-anchor" href="#resetting-the-state"><span>Resetting the state</span></a></h2><p>You can <em>reset</em> the state to its initial value by calling the <code>$reset()</code> method on the store:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usage-with-the-options-api" tabindex="-1"><a class="header-anchor" href="#usage-with-the-options-api"><span>Usage with the Options API</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// src/stores/counterStore.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counterStore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are not using the Composition API, and you are using <code>computed</code>, <code>methods</code>, ...,<br> you can use the <code>mapState()</code> helper to map state properties as readonly computed properties:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counterStore&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.counter inside the component</span>
    <span class="token comment">// same as reading from store.counter</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// same as above but registers is as this.myOwnName</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">myOwnName</span><span class="token operator">:</span> <span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// you can also write a function that gets access to the store</span>
      <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token comment">// it can have access to \`this\` but it won&#39;t be typed correctlly</span>
      <span class="token function">magicValue</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> store<span class="token punctuation">.</span>someGetter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>double
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modifiable-state" tabindex="-1"><a class="header-anchor" href="#modifiable-state"><span>Modifiable state</span></a></h3><p>If you want to be able to write to these state properties (e.g. if you have a form),<br> you can use <code>mapWritableState()</code> instead.<br> Note you cannot pass a function like with <code>mapState()</code>:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapWritableState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../stores/counterStore&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.counter inside the component and allows setting it</span>
    <span class="token comment">// this.counter++</span>
    <span class="token comment">// same as reading from store.counter</span>
    <span class="token operator">...</span><span class="token function">mapWritableState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">// same as above but registers it as this.myOwnName</span>
    <span class="token operator">...</span><span class="token function">mapWritableState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">myOwnName</span><span class="token operator">:</span> <span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>You don&#39;t need <code>mapWritableState()</code> for collections like arrays unless you are replacing the whole array with cartItems = [],<br><code>mapState()</code> still allows you to call methods on your collections.</p></div>`,14),y=a(`<h2 id="mutating-the-state" tabindex="-1"><a class="header-anchor" href="#mutating-the-state"><span>Mutating the state</span></a></h2><p>Apart from directly mutating the store with store.counter++, you can also call the <code>$patch</code> method.<br> It allows you to apply multiple changes at the same time with a partial state object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> store<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhaobc&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, some mutations are really hard or costly to apply with this syntax: any collection modification<br> (e.g. pushing, removing, splicing an element from an array) requires you to create a new collection.<br> Because of this, the <code>$patch</code> method also accepts a function to group this kind of mutations that are difficult to apply with a patch object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>cartStore<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;shoes&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  state<span class="token punctuation">.</span>hasChanged <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="replacing-the-state" tabindex="-1"><a class="header-anchor" href="#replacing-the-state"><span>Replacing the state</span></a></h2><p>You can replace the whole state of a store by setting its <code>$state</code> property to a new object:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhaobc&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also replace the whole state of your application by changing the state of the pinia instance:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="subscribing-to-the-state" tabindex="-1"><a class="header-anchor" href="#subscribing-to-the-state"><span>Subscribing to the state</span></a></h2><p>You can watch the state and its changes through the <code>$subscribe()</code> method of a store, similar to Vuex&#39;s subscribe method.</p><p>The advantage of using <code>$subscribe()</code> over a regular <code>watch()</code> is that subscriptions will trigger only <strong>once</strong> after patches (e.g. when using the function version from above).</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>cartStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// import { MutationType } from &#39;pinia&#39;</span>
  mutation<span class="token punctuation">.</span>type <span class="token comment">// &#39;direct&#39; | &#39;patch object&#39; | &#39;patch function&#39;</span>
  mutation<span class="token punctuation">.</span>storeId <span class="token comment">// cart</span>
  mutation<span class="token punctuation">.</span>payload <span class="token comment">// patch object passed to cartStore.$patch</span>

  <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, state subscriptions are bound to the component where they are added (if the store is inside a component&#39;s <code>setup()</code>).<br> Meaning, they will be automatically removed when the component is unmounted.</p><p>If you want to keep them after the component is unmounted,<br> pass <code>{ detached: true }</code> as the second argument to detach the state subscription from the current component:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> someState <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// this subscription will be kept after the component is unmounted</span>
    someStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">detached</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can watch the whole state on the pinia instance:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  pinia<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
  <span class="token parameter">state</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;piniaState&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function f(w,I){const o=t("ExternalLinkIcon"),p=t("Playground");return i(),l("div",null,[u,n("div",d,[k,n("p",null,[s("If you are using Vue 2, the data you create in state follows the same rules as the data in a Vue instance,"),m,s(" ie the state object must be plain and you need to call "),v,s(" when adding new properties to it."),h,s(" See also: "),n("a",b,[s("Vue#data"),e(o)]),s(".")])]),g,e(p,{title:"Usage%20with%20the%20Options%20API",link:"https%3A%2F%2Fplay.zhaobc.site%23eyJBcHAudnVlIjoiPHNjcmlwdD5cbmltcG9ydCB7IG1hcFN0YXRlLCBtYXBTdG9yZXMsIG1hcEFjdGlvbnMsIG1hcFdyaXRhYmxlU3RhdGUgfSBmcm9tICdwaW5pYSdcbmltcG9ydCB7IHVzZUNvdW50ZXJTdG9yZSB9IGZyb20gJy4vY291bnRlclN0b3JlLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXB1dGVkOiB7XG4gICAgLi4ubWFwU3RvcmVzKHVzZUNvdW50ZXJTdG9yZSksXG4gICAgLi4ubWFwV3JpdGFibGVTdGF0ZSh1c2VDb3VudGVyU3RvcmUsIFsnY291bnQnXSksXG4gICAgLi4ubWFwU3RhdGUodXNlQ291bnRlclN0b3JlLCBbJ2RvdWJsZUNvdW50J10pLFxuICAgIC4uLm1hcFdyaXRhYmxlU3RhdGUodXNlQ291bnRlclN0b3JlLCB7XG4gICAgICBteUNvdW50ZXI6ICdjb3VudCcsXG4gICAgfSksXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICAuLi5tYXBBY3Rpb25zKHVzZUNvdW50ZXJTdG9yZSwgWydpbmNyZW1lbnQnXSksXG4gIH0sXG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2PkNvdW50ZXI6IHt7IGNvdW50IH19PC9kaXY%2BXG4gIDxkaXY%2BTXlDb3VudGVyOiB7eyBteUNvdW50ZXIgfX08L2Rpdj5cbiAgPGRpdj5Eb3VibGUgY291bnQ6IHt7IGRvdWJsZUNvdW50IH19PC9kaXY%2BXG4gIDxkaXY%2BQ2hhbmdlIGNvdW50ZXI6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdi1tb2RlbC5udW1iZXI9XCJjb3VudFwiIC8%2BPC9kaXY%2BXG4gIDxidXR0b24gQGNsaWNrPVwiaW5jcmVtZW50XCI%2BaW5jcmVtZW50PC9idXR0b24%2BXG4gIDxidXR0b24gQGNsaWNrPVwiY291bnRlclN0b3JlLiRyZXNldCgpXCI%2BcmVzZXQ8L2J1dHRvbj5cbjwvdGVtcGxhdGU%2BXG4iLCJjb3VudGVyU3RvcmUuanMiOiJpbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gJ3BpbmlhJ1xuXG5leHBvcnQgY29uc3QgdXNlQ291bnRlclN0b3JlID0gZGVmaW5lU3RvcmUoJ2NvdW50ZXInLCB7XG4gIHN0YXRlOiAoKSA9PiAoe1xuICAgIGNvdW50OiAwLFxuICB9KSxcbiAgZ2V0dGVyczoge1xuICAgIGRvdWJsZUNvdW50OiBzdGF0ZSA9PiBzdGF0ZS5jb3VudCAqIDIsXG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBpbmNyZW1lbnQoKSB7XG4gICAgICB0aGlzLmNvdW50KytcbiAgICB9LFxuICB9LFxufSlcbiJ9"}),y])}const S=c(r,[["render",f],["__file","state.html.vue"]]),G=JSON.parse(`{"path":"/notes/frontend/vue/pinia/core-concepts/state.html","title":"State","lang":"zh-CN","frontmatter":{"order":20,"category":["笔记","frontend","pinia"],"tag":["pinia"],"description":"State The state is, most of the time, the central part of your store. In Pinia the state is defined as a function that returns the initial state. 提示 If you are using Vue 2, the ...","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/pinia/core-concepts/state.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"State"}],["meta",{"property":"og:description","content":"State The state is, most of the time, the central part of your store. In Pinia the state is defined as a function that returns the initial state. 提示 If you are using Vue 2, the ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-28T08:03:43.000Z"}],["meta",{"property":"article:author","content":"Zhao Bin"}],["meta",{"property":"article:tag","content":"pinia"}],["meta",{"property":"article:modified_time","content":"2024-02-28T08:03:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"State\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-28T08:03:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Zhao Bin\\",\\"url\\":\\"zhaobc.site\\",\\"email\\":\\"hi@zhaobc.site\\"}]}"]]},"headers":[{"level":2,"title":"Accessing the state","slug":"accessing-the-state","link":"#accessing-the-state","children":[]},{"level":2,"title":"Resetting the state","slug":"resetting-the-state","link":"#resetting-the-state","children":[]},{"level":2,"title":"Usage with the Options API","slug":"usage-with-the-options-api","link":"#usage-with-the-options-api","children":[{"level":3,"title":"Modifiable state","slug":"modifiable-state","link":"#modifiable-state","children":[]}]},{"level":2,"title":"Mutating the state","slug":"mutating-the-state","link":"#mutating-the-state","children":[]},{"level":2,"title":"Replacing the state","slug":"replacing-the-state","link":"#replacing-the-state","children":[]},{"level":2,"title":"Subscribing to the state","slug":"subscribing-to-the-state","link":"#subscribing-to-the-state","children":[]}],"git":{"createdTime":1709107423000,"updatedTime":1709107423000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":2.97,"words":891},"filePathRelative":"notes/frontend/vue/pinia/core-concepts/state.md","localizedDate":"2024年2月28日","excerpt":"\\n<p>The state is, most of the time, the central part of your store.<br>\\nIn Pinia the state is <strong>defined as a function that returns the initial state</strong>.</p>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> defineStore <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'pinia'</span>\\n\\n<span class=\\"token keyword\\">const</span> useStore <span class=\\"token operator\\">=</span> <span class=\\"token function\\">defineStore</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'storeId'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// arrow function recommended for full type inference</span>\\n  <span class=\\"token function-variable function\\">state</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// all these properties will have their type inferred automatically</span>\\n      <span class=\\"token literal-property property\\">counter</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Eduardo'</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">isAdmin</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre></div>","autoDesc":true}`);export{S as comp,G as data};
