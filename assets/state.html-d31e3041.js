const t=JSON.parse(`{"key":"v-406b0e3f","path":"/notes/frontend/vue/pinia/core-concepts/state.html","title":"State","lang":"zh-CN","frontmatter":{"order":20,"category":["笔记","frontend","pinia"],"tag":["pinia"],"description":"State The state is, most of the time, the central part of your store. In Pinia the state is defined as a function that returns the initial state. import { defineStore } from 'pinia' const useStore = defineStore('storeId', { // arrow function recommended for full type inference state: () =&gt; { return { // all these properties will have their type inferred automatically counter: 0, name: 'Eduardo', isAdmin: true, } }, })","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/pinia/core-concepts/state.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"State"}],["meta",{"property":"og:description","content":"State The state is, most of the time, the central part of your store. In Pinia the state is defined as a function that returns the initial state. import { defineStore } from 'pinia' const useStore = defineStore('storeId', { // arrow function recommended for full type inference state: () =&gt; { return { // all these properties will have their type inferred automatically counter: 0, name: 'Eduardo', isAdmin: true, } }, })"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-27T15:45:34.000Z"}],["meta",{"property":"article:tag","content":"pinia"}],["meta",{"property":"article:modified_time","content":"2023-02-27T15:45:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"State\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-27T15:45:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Accessing the state","slug":"accessing-the-state","link":"#accessing-the-state","children":[]},{"level":2,"title":"Resetting the state","slug":"resetting-the-state","link":"#resetting-the-state","children":[]},{"level":2,"title":"Usage with the Options API","slug":"usage-with-the-options-api","link":"#usage-with-the-options-api","children":[{"level":3,"title":"Modifiable state","slug":"modifiable-state","link":"#modifiable-state","children":[]}]},{"level":2,"title":"Mutating the state","slug":"mutating-the-state","link":"#mutating-the-state","children":[]},{"level":2,"title":"Replacing the state","slug":"replacing-the-state","link":"#replacing-the-state","children":[]},{"level":2,"title":"Subscribing to the state","slug":"subscribing-to-the-state","link":"#subscribing-to-the-state","children":[]}],"git":{"createdTime":1677512734000,"updatedTime":1677512734000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"notes/frontend/vue/pinia/core-concepts/state.md","localizedDate":"2023年2月27日","excerpt":"<h1> State</h1>\\n<p>The state is, most of the time, the central part of your store.\\nIn Pinia the state is <strong>defined as a function that returns the initial state</strong>.</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> defineStore <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'pinia'</span>\\n\\n<span class=\\"token keyword\\">const</span> useStore <span class=\\"token operator\\">=</span> <span class=\\"token function\\">defineStore</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'storeId'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">// arrow function recommended for full type inference</span>\\n  <span class=\\"token function-variable function\\">state</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// all these properties will have their type inferred automatically</span>\\n      <span class=\\"token literal-property property\\">counter</span><span class=\\"token operator\\">:</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">name</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'Eduardo'</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token literal-property property\\">isAdmin</span><span class=\\"token operator\\">:</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{t as data};
