import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";import{r as t,o as i,c as l,a as n,b as e,e as a,d as s}from"./app.1c94cb67.js";const r={},u=a(`<h1 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h1><p>The state is, most of the time, the central part of your store. In Pinia the state is <strong>defined as a function that returns the initial state</strong>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>

<span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;storeId&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// arrow function recommended for full type inference</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// all these properties will have their type inferred automatically</span>
      <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Eduardo&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">isAdmin</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={class:"custom-container tip"},k=n("p",{class:"custom-container-title"},"\u63D0\u793A",-1),m=s("If you are using Vue 2, the data you create in state follows the same rules as the data in a Vue instance, ie the state object must be plain and you need to call "),v=n("code",null,"Vue.set()",-1),h=s(" when adding new properties to it. See also: "),b={href:"https://v2.vuejs.org/v2/api/#data",target:"_blank",rel:"noopener noreferrer"},g=s("Vue#data"),y=s("."),f=a(`<h2 id="accessing-the-state" tabindex="-1"><a class="header-anchor" href="#accessing-the-state" aria-hidden="true">#</a> Accessing the <code>state</code></h2><p>By default, you can directly read and write to the state by accessing it through the <code>store</code> instance:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span>counter<span class="token operator">++</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resetting-the-state" tabindex="-1"><a class="header-anchor" href="#resetting-the-state" aria-hidden="true">#</a> Resetting the state</h2><p>You can <em>reset</em> the state to its initial value by calling the <code>$reset()</code> method on the store:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">$reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usage-with-the-options-api" tabindex="-1"><a class="header-anchor" href="#usage-with-the-options-api" aria-hidden="true">#</a> Usage with the Options API</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// src/stores/counterStore.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> useCounterStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&#39;counterStore&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you are not using the Composition API, and you are using <code>computed</code>, <code>methods</code>, ..., you can use the <code>mapState()</code> helper to map state properties as readonly computed properties:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores/counterStore&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.counter inside the component</span>
    <span class="token comment">// same as reading from store.counter</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// same as above but registers is as this.myOwnName</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">myOwnName</span><span class="token operator">:</span> <span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span>
      <span class="token comment">// you can also write a function that gets access to the store</span>
      <span class="token function-variable function">double</span><span class="token operator">:</span> <span class="token parameter">store</span> <span class="token operator">=&gt;</span> store<span class="token punctuation">.</span>counter <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token comment">// it can have access to \`this\` but it won&#39;t be typed correctlly</span>
      <span class="token function">magicValue</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> store<span class="token punctuation">.</span>someGetter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>double
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modifiable-state" tabindex="-1"><a class="header-anchor" href="#modifiable-state" aria-hidden="true">#</a> Modifiable state</h3><p>If you want to be able to write to these state properties (e.g. if you have a form), you can use <code>mapWritableState()</code> instead. Note you cannot pass a function like with <code>mapState()</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapWritableState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../stores/counterStore&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// gives access to this.counter inside the component and allows setting it</span>
    <span class="token comment">// this.counter++</span>
    <span class="token comment">// same as reading from store.counter</span>
    <span class="token operator">...</span><span class="token function">mapWritableState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment">// same as above but registers it as this.myOwnName</span>
    <span class="token operator">...</span><span class="token function">mapWritableState</span><span class="token punctuation">(</span>useCounterStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">myOwnName</span><span class="token operator">:</span> <span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><p>You don&#39;t need <code>mapWritableState()</code> for collections like arrays unless you are replacing the whole array with cartItems = [], <code>mapState()</code> still allows you to call methods on your collections.</p></div>`,14),C=a(`<h2 id="mutating-the-state" tabindex="-1"><a class="header-anchor" href="#mutating-the-state" aria-hidden="true">#</a> Mutating the state</h2><p>Apart from directly mutating the store with store.counter++, you can also call the <code>$patch</code> method. It allows you to apply multiple changes at the same time with a partial state object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> store<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhaobc&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, some mutations are really hard or costly to apply with this syntax: any collection modification (e.g. pushing, removing, splicing an element from an array) requires you to create a new collection. Because of this, the <code>$patch</code> method also accepts a function to group this kind of mutations that are difficult to apply with a patch object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>cartStore<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;shoes&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  state<span class="token punctuation">.</span>hasChanged <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="replacing-the-state" tabindex="-1"><a class="header-anchor" href="#replacing-the-state" aria-hidden="true">#</a> Replacing the state</h2><p>You can replace the whole state of a store by setting its <code>$state</code> property to a new object:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>store<span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhaobc&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also replace the whole state of your application by changing the state of the pinia instance:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>pinia<span class="token punctuation">.</span>state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="subscribing-to-the-state" tabindex="-1"><a class="header-anchor" href="#subscribing-to-the-state" aria-hidden="true">#</a> Subscribing to the state</h2><p>You can watch the state and its changes through the <code>$subscribe()</code> method of a store, similar to Vuex&#39;s subscribe method.</p><p>The advantage of using <code>$subscribe()</code> over a regular <code>watch()</code> is that subscriptions will trigger only <strong>once</strong> after patches (e.g. when using the function version from above).</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>cartStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mutation<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// import { MutationType } from &#39;pinia&#39;</span>
  mutation<span class="token punctuation">.</span>type <span class="token comment">// &#39;direct&#39; | &#39;patch object&#39; | &#39;patch function&#39;</span>
  mutation<span class="token punctuation">.</span>storeId <span class="token comment">// cart</span>
  mutation<span class="token punctuation">.</span>payload <span class="token comment">// patch object passed to cartStore.$patch</span>

  <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;cart&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>By default, state subscriptions are bound to the component where they are added (if the store is inside a component&#39;s <code>setup()</code>). Meaning, they will be automatically removed when the component is unmounted.</p><p>If you want to keep them after the component is unmounted, pass <code>{ detached: true }</code> as the second argument to detach the state subscription from the current component:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> someState <span class="token operator">=</span> <span class="token function">useSomeStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// this subscription will be kept after the component is unmounted</span>
    someStore<span class="token punctuation">.</span><span class="token function">$subscribe</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">detached</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can watch the whole state on the pinia instance:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>pinia<span class="token punctuation">.</span>state<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// persist the whole state to the local storage whenever it changes</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;piniaState&#39;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function w(S,j){const o=t("ExternalLinkIcon"),p=t("Playground");return i(),l("div",null,[u,n("div",d,[k,n("p",null,[m,v,h,n("a",b,[g,e(o)]),y])]),f,e(p,{key:"playground-061dc7fa",id:"playground-061dc7fa",title:"Usage%20with%20the%20Options%20API",settings:"%7B%7D",config:"%7B%22App.vue%22%3A%7B%22lang%22%3A%22vue%22%2C%22content%22%3A%22%3Cscript%3E%5Cnimport%20%7B%20mapState%2C%20mapStores%2C%20mapActions%2C%20mapWritableState%20%7D%20from%20'pinia'%5Cnimport%20%7B%20useCounterStore%20%7D%20from%20'.%2FcounterStore.js'%5Cn%5Cnexport%20default%20%7B%5Cn%20%20computed%3A%20%7B%5Cn%20%20%20%20...mapStores(useCounterStore)%2C%5Cn%20%20%20%20...mapWritableState(useCounterStore%2C%20%5B'count'%5D)%2C%5Cn%20%20%20%20...mapState(useCounterStore%2C%20%5B'doubleCount'%5D)%2C%5Cn%20%20%20%20...mapWritableState(useCounterStore%2C%20%7B%5Cn%20%20%20%20%20%20myCounter%3A%20'count'%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%2C%5Cn%20%20methods%3A%20%7B%5Cn%20%20%20%20...mapActions(useCounterStore%2C%20%5B'increment'%5D)%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%5Cn%5Cn%3Ctemplate%3E%5Cn%20%20%3Cdiv%3ECounter%3A%20%7B%7B%20count%20%7D%7D%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EMyCounter%3A%20%7B%7B%20myCounter%20%7D%7D%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EDouble%20count%3A%20%7B%7B%20doubleCount%20%7D%7D%3C%2Fdiv%3E%5Cn%20%20%3Cdiv%3EChange%20counter%3A%20%3Cinput%20type%3D%5C%22number%5C%22%20v-model.number%3D%5C%22count%5C%22%20%2F%3E%3C%2Fdiv%3E%5Cn%20%20%3Cbutton%20%40click%3D%5C%22increment%5C%22%3Eincrement%3C%2Fbutton%3E%5Cn%20%20%3Cbutton%20%40click%3D%5C%22counterStore.%24reset()%5C%22%3Ereset%3C%2Fbutton%3E%5Cn%3C%2Ftemplate%3E%5Cn%22%7D%2C%22counterStore.js%22%3A%7B%22lang%22%3A%22js%22%2C%22content%22%3A%22import%20%7B%20defineStore%20%7D%20from%20'pinia'%5Cn%5Cnexport%20const%20useCounterStore%20%3D%20defineStore('counter'%2C%20%7B%5Cn%20%20state%3A%20()%20%3D%3E%20(%7B%5Cn%20%20%20%20count%3A%200%5Cn%20%20%7D)%2C%5Cn%20%20getters%3A%20%7B%5Cn%20%20%20%20doubleCount%3A%20(state)%20%3D%3E%20state.count%20*%202%5Cn%20%20%7D%2C%5Cn%20%20actions%3A%20%7B%5Cn%20%20%20%20increment()%20%7B%5Cn%20%20%20%20%20%20this.count%2B%2B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D)%5Cn%22%7D%7D"}),C])}var B=c(r,[["render",w],["__file","state.html.vue"]]);export{B as default};
