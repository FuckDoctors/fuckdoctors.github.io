import{_ as e,o as a,c as t,h as n}from"./app-44abe3d7.js";const d={},i=n(`<h1 id="模板语法" tabindex="-1"><a class="header-anchor" href="#模板语法" aria-hidden="true">#</a> 模板语法</h1><h2 id="文本插值" tabindex="-1"><a class="header-anchor" href="#文本插值" aria-hidden="true">#</a> 文本插值</h2><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;span&gt;Message: {{ msg }}&lt;/span&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="原始-html" tabindex="-1"><a class="header-anchor" href="#原始-html" aria-hidden="true">#</a> 原始 HTML</h2><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;p&gt;Using v-html directive: &lt;span v-html=&quot;rawHtml&quot;&gt;&lt;/span&gt;&lt;/p&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="attribute-绑定" tabindex="-1"><a class="header-anchor" href="#attribute-绑定" aria-hidden="true">#</a> Attribute 绑定</h2><p>想要响应式地绑定一个 attribute，应该使用 v-bind 指令：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为 v-bind 非常常用，我们提供了特定的简写语法：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>动态绑定多个值:</p><p>如果你有像这样的一个包含多个 attribute 的 JavaScript 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objectOfAttrs <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;wrapper&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;div v-bind=&quot;objectOfAttrs&quot;&gt;&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="指令-directives" tabindex="-1"><a class="header-anchor" href="#指令-directives" aria-hidden="true">#</a> 指令 Directives</h2><p>指令是带有 <code>v-</code> 前缀的特殊 attribute。</p><h3 id="参数-arguments" tabindex="-1"><a class="header-anchor" href="#参数-arguments" aria-hidden="true">#</a> 参数 Arguments</h3><p>某些指令会需要一个“参数”，在指令名后通过一个冒号（<code>:</code>）隔开做标识。<br> 例如用 <code>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>href</code> 就是一个参数，它告诉 <code>v-bind</code> 指令将表达式 <code>url</code> 的值绑定到元素的 <code>href</code> attribute 上。</p><p>另一个例子是 <code>v-on</code> 指令，它将监听 DOM 事件：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="动态参数" tabindex="-1"><a class="header-anchor" href="#动态参数" aria-hidden="true">#</a> 动态参数</h3><p>同样在指令参数上也可以使用一个 JavaScript 表达式，需要包含在一对方括号(<code>[]</code>)内：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a :[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修饰符-modifiers" tabindex="-1"><a class="header-anchor" href="#修饰符-modifiers" aria-hidden="true">#</a> 修饰符 Modifiers</h3><p>修饰符是以点(<code>.</code>)开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。<br> 例如 <code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code>：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt; ... &lt;/form&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),s=[i];function l(r,c){return a(),t("div",null,s)}const u=e(d,[["render",l],["__file","template-syntax.html.vue"]]);export{u as default};
