const t=JSON.parse('{"key":"v-ec516802","path":"/notes/frontend/vue/vue3/built-ins/transition-group.html","title":"TransitionGroup","lang":"zh-CN","frontmatter":{"order":20,"icon":"vue","category":["笔记","frontend","vue"],"tag":["vue3"],"description":"TransitionGroup &lt;TransitionGroup&gt; 是一个内置组件，设计用于呈现一个列表中的元素或组件的插入、移除和顺序改变的动画效果。 和 &lt;Transition&gt; 的区别 &lt;TransitionGroup&gt; 支持和 &lt;Transition&gt; 基本相同的 prop、CSS 过渡 class 和 JavaScript 钩子监听器，但有以下几点区别： 默认情况下，它不会渲染一个包装器元素。但你可以通过传入 tag 属性来指定一个元素作为包装器元素来渲染。 过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换。 其中的元素总是必须有一个独一无二的 key attribute。 CSS 过渡 class 会被应用在其中的每一个元素上，而不是这个组的容器上。","head":[["meta",{"property":"og:url","content":"https://www.zhaobc.site/notes/frontend/vue/vue3/built-ins/transition-group.html"}],["meta",{"property":"og:site_name","content":"赵斌的小站"}],["meta",{"property":"og:title","content":"TransitionGroup"}],["meta",{"property":"og:description","content":"TransitionGroup &lt;TransitionGroup&gt; 是一个内置组件，设计用于呈现一个列表中的元素或组件的插入、移除和顺序改变的动画效果。 和 &lt;Transition&gt; 的区别 &lt;TransitionGroup&gt; 支持和 &lt;Transition&gt; 基本相同的 prop、CSS 过渡 class 和 JavaScript 钩子监听器，但有以下几点区别： 默认情况下，它不会渲染一个包装器元素。但你可以通过传入 tag 属性来指定一个元素作为包装器元素来渲染。 过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换。 其中的元素总是必须有一个独一无二的 key attribute。 CSS 过渡 class 会被应用在其中的每一个元素上，而不是这个组的容器上。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-20T16:10:24.000Z"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2023-02-20T16:10:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TransitionGroup\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-20T16:10:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"和 <Transition> 的区别","slug":"和-transition-的区别","link":"#和-transition-的区别","children":[]},{"level":2,"title":"进入 / 离开过渡","slug":"进入-离开过渡","link":"#进入-离开过渡","children":[]},{"level":2,"title":"交错的列表过渡","slug":"交错的列表过渡","link":"#交错的列表过渡","children":[]}],"git":{"createdTime":1676909424000,"updatedTime":1676909424000,"contributors":[{"name":"Zhao Bin","email":"413853119@qq.com","commits":1}]},"readingTime":{"minutes":2.77,"words":830},"filePathRelative":"notes/frontend/vue/vue3/built-ins/transition-group.md","localizedDate":"2023年2月20日","excerpt":"<h1> TransitionGroup</h1>\\n<p><code>&lt;TransitionGroup&gt;</code> 是一个内置组件，设计用于呈现一个列表中的元素或组件的插入、移除和顺序改变的动画效果。</p>\\n<h2> 和 <code>&lt;Transition&gt;</code> 的区别</h2>\\n<p><code>&lt;TransitionGroup&gt;</code> 支持和 <code>&lt;Transition&gt;</code> 基本相同的 prop、CSS 过渡 class 和 JavaScript 钩子监听器，但有以下几点区别：</p>\\n<ul>\\n<li>默认情况下，它不会渲染一个包装器元素。但你可以通过传入 <code>tag</code> 属性来指定一个元素作为包装器元素来渲染。</li>\\n<li>过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换。</li>\\n<li>其中的元素<strong>总是必须</strong>有一个独一无二的 <code>key</code> attribute。</li>\\n<li>CSS 过渡 class 会被应用在其中的<strong>每一个元素</strong>上，<strong>而不是</strong>这个组的容器上。</li>\\n</ul>","autoDesc":true}');export{t as data};
