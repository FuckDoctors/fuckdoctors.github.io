import{_ as o,r as l,o as p,c as u,d as s,a as n,b as a,h as t}from"./app-4c5aeddb.js";const d={},r=t('<h1 id="transition" tabindex="-1"><a class="header-anchor" href="#transition" aria-hidden="true">#</a> Transition</h1><p>Vue 提供了两个内置组件，可以帮助你制作基于状态变化的过渡和动画：</p><ul><li><code>Transition</code> 会在一个元素或组件进入和离开 DOM 时应用动画。</li><li><code>TransitionGroup</code> 会在一个元素或组件被插入到 <code>v-for</code> 列表中，或是被移动或从其中移除时应用动画。</li></ul><p>除了这两个组件，我们也可以通过其他技术手段来应用动画，比如切换 CSS class 或用状态绑定样式来驱动动画。</p><h2 id="transition-组件" tabindex="-1"><a class="header-anchor" href="#transition-组件" aria-hidden="true">#</a> <code>Transition</code> 组件</h2><p>它可以将进入和离开动画应用到通过默认插槽传递给它的元素或组件上。进入或离开可以由以下的条件之一触发：</p><ul><li>由 <code>v-if</code> 所带来的条件渲染</li><li>由 <code>v-show</code> 所带来的条件显示</li><li>由特殊元素 <code>&lt;component&gt;</code> 切换的动态组件</li></ul><p>最基本的示例：</p>',8),b=t('<div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>&lt;Transition&gt;</code> 仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，这个组件必须仅有一个根元素。</p></div><p>当一个 <code>Transition</code> 组件中的元素被插入或移除时，会发生下面这些事情：</p><ol><li>Vue 会自动检查目标元素是否应用了 CSS 过度或动画。如果是，则一些 CSS 过度 class 会在适当的时机被添加或移除。</li><li>如果有作为监听器的 JavaScript 钩子，这些钩子函数会在适当时机被调用。</li><li>如果没有探测到 CSS 过度或动画，没有提供 JavaScript 钩子，那么 DOM 的插入，删除操作将在浏览器的下一个动画帧上进行。</li></ol><h2 id="基于-css-的过渡" tabindex="-1"><a class="header-anchor" href="#基于-css-的过渡" aria-hidden="true">#</a> 基于 CSS 的过渡</h2><h3 id="css-过渡-class" tabindex="-1"><a class="header-anchor" href="#css-过渡-class" aria-hidden="true">#</a> CSS 过渡 class</h3><p>一共有 6 个应用于进入与离开过渡效果的 CSS class。</p>',6),g=t(`<div class="hint-container tip"><p class="hint-container-title">mermaid escapse</p><p>Numbers given are base 10, so <code>#</code> can be encoded as <code>#35;</code>. It is also supported to use HTML character names.</p><p>Because semicolons can be used instead of line breaks to define the markup, you need to use <code>#59;</code> to include a semicolon in message text.</p><p>冒号 <code>:</code> = <code>#58;</code>, 空格 <code>&amp;nbsp;</code>，换行 <code>&lt;br /&gt;</code>，减号 <code>-</code> = <code>#45;</code></p></div><ol><li><code>v-enter-from</code>：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</li><li><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。 在元素被插入之前添加，在过渡或动画完成之后移除。这个 class 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</li><li><code>v-enter-to</code>：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 <code>v-enter-from</code> 被移除的同时)，在过渡或动画完成之后移除。</li><li><code>v-leave-from</code>：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</li><li><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。 这个 class 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</li><li><code>v-leave-to</code>：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 <code>v-leave-from</code> 被移除的同时)，在过渡或动画完成之后移除。</li></ol><p><code>v-enter-active</code> 和 <code>v-leave-active</code> 给我们提供了为进入和离开动画指定不同速度曲线的能力。</p><h3 id="为过渡命名" tabindex="-1"><a class="header-anchor" href="#为过渡命名" aria-hidden="true">#</a> 为过渡命名</h3><p>可以通过一个 <code>name</code> 属性来声明一种过渡：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;Transition name=&quot;fade&quot;&gt;
...
&lt;/Transition&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于一个已命名的过渡，它的过渡相关 class 会以其名字而不是 <code>v</code> 作为前缀。 比如，上方例子中被应用的 class 将会是 <code>fade-enter-active</code> 而不是 <code>v-enter-active</code>。这个 &quot;fade&quot; 过渡的 class 应该是这样：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.fade-enter-active,
.fade-leave-active</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 0.5s ease<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.fade-enter-from,
.fade-leave-to</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css-的-transition" tabindex="-1"><a class="header-anchor" href="#css-的-transition" aria-hidden="true">#</a> CSS 的 transition</h3>`,9),m=n("code",null,"<Transition>",-1),v={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions",target:"_blank",rel:"noopener noreferrer"},k={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"下面是一个更高级的例子，它使用了不同的持续时间和速度曲线来过渡多个 property：",-1),C=n("h3",{id:"css-的-animation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css-的-animation","aria-hidden":"true"},"#"),a(" CSS 的 animation")],-1),h={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"*-enter-from",-1),A=n("code",null,"animationend",-1),X=n("p",null,[a("对于大多数的 CSS 动画，我们可以简单地在 "),n("code",null,"*-enter-active"),a(" 和 "),n("code",null,"*-leave-active"),a(" class 下声明它们。下面是一个示例：")],-1),Z=t('<h3 id="自定义过渡-class" tabindex="-1"><a class="header-anchor" href="#自定义过渡-class" aria-hidden="true">#</a> 自定义过渡 class</h3><p>你也可以向 <code>&lt;Transition&gt;</code> 传递以下的 props 来指定自定义的过渡 class：</p><ul><li><code>enter-from-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-from-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul>',3),x={href:"https://daneden.github.io/animate.css/",target:"_blank",rel:"noopener noreferrer"},B=t(`<h3 id="同时使用-transition-和-animation" tabindex="-1"><a class="header-anchor" href="#同时使用-transition-和-animation" aria-hidden="true">#</a> 同时使用 transition 和 animation</h3><p>Vue 需要附加事件侦听器，以便知道过渡何时结束。可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于你所应用的 CSS 规则。 如果你仅仅使用二者的其中之一，Vue 可以自动探测到正确的类型。</p><p>然而在某些场景中，你或许想要在同一个元素上同时使用它们两个。 举个例子，Vue 触发了一个 CSS 动画，同时鼠标悬停触发另一个 CSS 过渡。 此时你需要显式地传入 type prop 来声明，告诉 Vue 需要关心哪种类型，传入的值是 <code>animation</code> 或 <code>transition</code>：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;Transition type=&quot;animation&quot;&gt;...&lt;/Transition&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="深层级过渡与显示过渡时间" tabindex="-1"><a class="header-anchor" href="#深层级过渡与显示过渡时间" aria-hidden="true">#</a> 深层级过渡与显示过渡时间</h3><p>尽管过渡 class 仅能应用在 <code>&lt;Transition&gt;</code> 的直接子元素上，我们还是可以使用深层级的 CSS 选择器，使深层级的元素发生过渡。</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;Transition name=&quot;nested&quot;&gt;
  &lt;div v-if=&quot;show&quot; class=&quot;outer&quot;&gt;
    &lt;div class=&quot;inner&quot;&gt;
      Hello
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/Transition&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 应用于嵌套元素的规则 */</span>
<span class="token selector">.nested-enter-active .inner,
.nested-leave-active .inner</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.3s ease-in-out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.nested-enter-from .inner,
.nested-leave-to .inner</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>30px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们甚至可以在嵌套元素上添加一个过渡延迟，这会创建一个交错进入动画序列：</p>`,9),W=n("div",{class:"language-css line-numbers-mode","data-ext":"css"},[n("pre",{css:"",class:"language-css"},[n("code",null,[n("span",{class:"token comment"},"/* 延迟嵌套元素的进入以获得交错效果 */"),a(`
`),n("span",{class:"token selector"},".nested-enter-active .inner"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"transition-delay"),n("span",{class:"token punctuation"},":"),a(" 0.25s"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=t(`<p>然而，这会带来一个小问题。默认情况下，<code>&lt;Transition&gt;</code> 组件会通过监听过渡根元素上的<strong>第一个</strong> <code>transitionend</code> 或者 <code>animationend</code> 事件来尝试自动判断过渡何时结束。 而在嵌套的过渡中，期望的行为应该是等待所有内部元素的过渡完成。</p><p>在这种情况下，你可以通过向 <code>&lt;Transition&gt;</code> 组件传入 <code>duration</code> 属性来显式指定过渡的持续时间 (以毫秒为单位)。总持续时间应该匹配延迟加上内部元素的过渡持续时间：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;Transition :duration=&quot;550&quot;&gt;...&lt;/Transition&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果有必要的话，你也可以用对象的形式传入，分开指定进入和离开所需的时间：</p><div class="language-template line-numbers-mode" data-ext="template"><pre class="language-template"><code>&lt;Transition :duration=&quot;{ enter: 500, leave: 800 }&quot;&gt;...&lt;/Transition&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),Y=t('<h3 id="性能考量" tabindex="-1"><a class="header-anchor" href="#性能考量" aria-hidden="true">#</a> 性能考量</h3><p>你可能注意到我们上面例子中展示的动画所用到的属性大多是 <code>transform</code> 和 <code>opacity</code> 之类的。用这些属性制作动画非常高效，因为：</p><ol><li>他们在动画过程中不会影响到 DOM 结构，因此每一个动画帧都不会触发昂贵的 CSS 布局重新计算。</li><li>大多数的现代浏览器都可以在执行 <code>transform</code> 动画时利用 GPU 进行硬件加速。</li></ol>',3),R=n("code",null,"height",-1),S=n("code",null,"margin",-1),y={href:"https://csstriggers.com/",target:"_blank",rel:"noopener noreferrer"},J=t(`<h3 id="javascript-钩子" tabindex="-1"><a class="header-anchor" href="#javascript-钩子" aria-hidden="true">#</a> JavaScript 钩子</h3><p>你可以通过监听 <code>&lt;Transition&gt;</code> 组件事件的方式在过渡过程中挂上钩子函数：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span>
  <span class="token attr-name">@before-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onBeforeEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@after-enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onAfterEnter<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@enter-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onEnterCancelled<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@before-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onBeforeLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onAfterLeave<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@leave-cancelled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onLeaveCancelled<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在元素被插入到 DOM 之前被调用</span>
<span class="token comment">// 用这个来设置元素的 &quot;enter-from&quot; 状态</span>
<span class="token keyword">function</span> <span class="token function">onBeforeEnter</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment">// 在元素被插入到 DOM 之后的下一帧被调用</span>
<span class="token comment">// 用这个来开始进入动画</span>
<span class="token keyword">function</span> <span class="token function">onEnter</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用回调函数 done 表示过渡结束</span>
  <span class="token comment">// 如果与 CSS 结合使用，则这个回调是可选参数</span>
  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 当进入过渡完成时调用。</span>
<span class="token keyword">function</span> <span class="token function">onAfterEnter</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">onEnterCancelled</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 在 leave 钩子之前调用</span>
<span class="token comment">// 大多数时候，你应该只会用到 leave 钩子</span>
<span class="token keyword">function</span> <span class="token function">onBeforeLeave</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 在离开过渡开始时调用</span>
<span class="token comment">// 用这个来开始离开动画</span>
<span class="token keyword">function</span> <span class="token function">onLeave</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用回调函数 done 表示过渡结束</span>
  <span class="token comment">// 如果与 CSS 结合使用，则这个回调是可选参数</span>
  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在离开过渡完成、</span>
<span class="token comment">// 且元素已从 DOM 中移除时调用</span>
<span class="token keyword">function</span> <span class="token function">onAfterLeave</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 仅在 v-show 过渡中可用</span>
<span class="token keyword">function</span> <span class="token function">leaveCancelled</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些钩子可以与 CSS 过渡或动画结合使用，也可以单独使用。</p><p>在使用仅由 JavaScript 执行的动画时，最好是添加一个 <code>:css=&quot;false&quot;</code> 属性。 这显式地向 Vue 表明跳过对 CSS 过渡的自动探测。除了性能稍好一些之外，还可以防止 CSS 规则意外地干扰过渡。</p>`,6),F=n("div",{class:"language-html line-numbers-mode","data-ext":"html"},[n("pre",{html:"",class:"language-html"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("Transition")]),a(),n("span",{class:"token attr-name"},"..."),a(),n("span",{class:"token attr-name"},":css"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("false"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(" ... "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("Transition")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"highlight-lines"},[n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),w=n("p",null,[a("在有了 "),n("code",null,':css="false"'),a(" 后，我们就自己全权负责控制什么时候过渡结束了。 这种情况下对于 "),n("code",null,"@enter"),a(" 和 "),n("code",null,"@leave"),a(" 钩子来说，回调函数 "),n("code",null,"done"),a(" 就是必须的。否则，钩子将被同步调用，过渡将立即完成。")],-1),H={href:"https://greensock.com/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://animejs.com/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://motion.dev/",target:"_blank",rel:"noopener noreferrer"},j=t(`<h3 id="可重用过渡" tabindex="-1"><a class="header-anchor" href="#可重用过渡" aria-hidden="true">#</a> 可重用过渡</h3><p>得益于 Vue 的组件系统，过渡是可以被重用的。要创建一个可被重用的过渡，我们需要为 <code>&lt;Transition&gt;</code> 组件创建一个包装组件，并向内传入插槽内容:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my-transition<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 <code>MyTransition</code> 可以在导入后像内置组件那样使用了：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyTransition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyTransition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出现时过渡" tabindex="-1"><a class="header-anchor" href="#出现时过渡" aria-hidden="true">#</a> 出现时过渡</h3><p>如果你想在某个节点初次渲染时应用一个过渡效果，你可以添加 <code>appear</code> attribute：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">appear</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元素间过渡" tabindex="-1"><a class="header-anchor" href="#元素间过渡" aria-hidden="true">#</a> 元素间过渡</h3><p>除了通过 <code>v-if</code> / <code>v-show</code> 切换一个元素，我们也可以通过 <code>v-if</code> / <code>v-else</code> / <code>v-else-if</code> 在几个组件间进行切换过：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>docState === &#39;saved&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Edit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>docState === &#39;edited&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Save<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>docState === &#39;editing&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Cancel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过渡模式" tabindex="-1"><a class="header-anchor" href="#过渡模式" aria-hidden="true">#</a> 过渡模式</h3><p>在之前的例子中，进入和离开的元素都是在同时开始动画的，并且我们必须将它们设为 <code>position: absolute</code> 以避免二者同时存在时出现的布局问题。</p><p>然而，在某些场景中这可能不是个好的方案，或者并不能符合行为预期。 我们可能想要先执行离开动画，然后在其完成<strong>之后</strong>再执行元素的进入动画。 手动编排这样的动画是非常复杂的，好在我们可以通过向 <code>&lt;Transition&gt;</code> 传入一个 <code>mode</code> prop 来实现这个行为：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>out-in<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- ... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件间过渡" tabindex="-1"><a class="header-anchor" href="#组件间过渡" aria-hidden="true">#</a> 组件间过渡</h3><p><code>&lt;Transition&gt;</code> 也可以用在动态组件之间：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fade<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>out-in<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>activeComponent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Transition</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function N(z,P){const c=l("Playground"),i=l("Mermaid"),e=l("ExternalLinkIcon");return p(),u("div",null,[r,s(c,{key:"608f4e84",title:"transistion%20%E7%A4%BA%E4%BE%8B",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSdcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93ID0gIXNob3dcIj5Ub2dnbGU8L2J1dHRvbj5cbiAgPFRyYW5zaXRpb24%2BXG4gICAgPHAgdi1pZj1cInNob3dcIj5oZWxsbzwvcD5cbiAgPC9UcmFuc2l0aW9uPlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlPlxuLnYtZW50ZXItYWN0aXZlLFxuLnYtbGVhdmUtYWN0aXZlIHtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjVzIGVhc2U7XG59XG4udi1lbnRlci1mcm9tLFxuLnYtbGVhdmUtdG8ge1xuICBvcGFjaXR5OiAwO1xufVxuPC9zdHlsZT5cbiJ9"}),b,s(i,{id:"mermaid-86",code:"eJwrLkksSXXJTEwvSszVLTPiUlBIySxKTS7JzM9T8AniAvLBKhRc80pSixSqgXw0FSAB/4LE5MySSmVTC2u1vKTiAmsDm6QifTswUaZsYmqdCtINYqQV5ecq6OraYWoxxKWlJF/BSgFVKBFoe1kq0OpahAN9UhPLUol2ILptOSDd+B2I7ie4FoQD4UJIDgQAj1xqaw=="}),g,n("p",null,[m,a(" 一般都会搭配"),n("a",v,[a("原生 CSS 过渡"),s(e)]),a("一起使用，这个 transition CSS 属性是一个简写形式，使我们可以一次定义一个过渡的各个方面，包括需要执行动画的属性、持续时间和"),n("a",k,[a("速度曲线"),s(e)]),a("。")]),I,s(c,{key:"407f32c1",title:"CSS%20Transition",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSdcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93ID0gIXNob3dcIj5Ub2dnbGUgU2xpZGUgKyBGYWRlPC9idXR0b24%2BXG4gIDxUcmFuc2l0aW9uIG5hbWU9XCJzbGlkZS1mYWRlXCI%2BXG4gICAgPHAgdi1pZj1cInNob3dcIj5oZWxsbzwvcD5cbiAgPC9UcmFuc2l0aW9uPlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlIHNjb3BlZD5cbi5zbGlkZS1mYWRlLWVudGVyLWFjdGl2ZSB7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2Utb3V0O1xufVxuLnNsaWRlLWZhZGUtbGVhdmUtYWN0aXZlIHtcbiAgdHJhbnNpdGlvbjogYWxsIDAuOHMgY3ViaWMtYmV6aWVyKDEsIDAuNSwgMC44LCAxKTtcbn1cbi5zbGlkZS1mYWRlLWVudGVyLWZyb20sXG4uc2xpZGUtZmFkZS1sZWF2ZS10byB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgyMHB4KTtcbiAgb3BhY2l0eTogMDtcbn1cbjwvc3R5bGU%2BXG4ifQ%3D%3D"}),C,n("p",null,[n("a",h,[a("原生 CSS 动画"),s(e)]),a("和 CSS trasition 的应用方式基本上是相同的，只有一点不同，那就是 "),G,a(" 不是在元素插入后立即移除，而是在一个 "),A,a(" 事件触发时被移除。")]),X,s(c,{key:"63f05f9b",title:"CSS%20animation",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSdcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93ID0gIXNob3dcIj5Ub2dnbGU8L2J1dHRvbj5cbiAgPFRyYW5zaXRpb24gbmFtZT1cImJvdW5jZVwiPlxuICAgIDxwIHYtaWY9XCJzaG93XCIgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7XCI%2BXG4gICAgICBIZWxsbyBoZXJlIGlzIHNvbWUgYm91bmN5IHRleHQhXG4gICAgPC9wPlxuICA8L1RyYW5zaXRpb24%2BXG48L3RlbXBsYXRlPlxuXG48c3R5bGUgc2NvcGVkPlxuLmJvdW5jZS1lbnRlci1hY3RpdmUge1xuICBhbmltYXRpb246IGJvdW5jZS1pbiAwLjVzO1xufVxuLmJvdW5jZS1sZWF2ZS1hY3RpdmUge1xuICBhbmltYXRpb246IGJvdW5jZS1pbiAwLjVzIHJldmVyc2U7XG59XG5Aa2V5ZnJhbWVzIGJvdW5jZS1pbiB7XG4gIDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICB9XG4gIDUwJSB7XG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjI1KTtcbiAgfVxuICAxMDAlIHtcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICB9XG59XG48L3N0eWxlPlxuIn0%3D"}),Z,n("p",null,[a("你传入的这些 class 会覆盖相应阶段的默认 class 名。这个功能在你想要在 Vue 的动画机制下集成其他的第三方 CSS 动画库时非常有用，比如 "),n("a",x,[a("Animate.css"),s(e)]),a("：")]),s(c,{key:"4611c6be",title:"%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%20class",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSdcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93ID0gIXNob3dcIj5Ub2dnbGU8L2J1dHRvbj5cbiAgPFRyYW5zaXRpb25cbiAgICBuYW1lPVwiY3VzdG9tLWNsYXNzXCJcbiAgICBlbnRlci1hY3RpdmUtY2xhc3M9XCJhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX190YWRhXCJcbiAgICBsZWF2ZS1hY3RpdmUtY2xhc3M9XCJhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX19ib3VuY2VPdXRSaWdodFwiXG4gID5cbiAgICA8cCB2LWlmPVwic2hvd1wiPmhlbGxvPC9wPlxuICA8L1RyYW5zaXRpb24%2BXG48L3RlbXBsYXRlPlxuXG48c3R5bGUgc2NvcGVkPlxuQGltcG9ydCAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYW5pbWF0ZS5jc3MvNC4xLjEvYW5pbWF0ZS5taW4uY3NzJztcbjwvc3R5bGU%2BXG4ifQ%3D%3D"}),B,W,V,s(c,{key:"c3654752",title:"%E6%B7%B1%E5%B1%82%E7%BA%A7%E8%BF%87%E6%B8%A1%E4%B8%8E%E6%98%BE%E5%BC%8F%E8%BF%87%E6%B8%A1%E6%97%B6%E9%97%B4",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSdcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93ID0gIXNob3dcIj5Ub2dnbGU8L2J1dHRvbj5cbiAgPFRyYW5zaXRpb24gOmR1cmF0aW9uPVwiNTUwXCIgbmFtZT1cIm5lc3RlZFwiPlxuICAgIDxkaXYgdi1pZj1cInNob3dcIiBjbGFzcz1cIm91dGVyXCI%2BXG4gICAgICA8ZGl2IGNsYXNzPVwiaW5uZXJcIj5IZWxsbzwvZGl2PlxuICAgIDwvZGl2PlxuICA8L1RyYW5zaXRpb24%2BXG48L3RlbXBsYXRlPlxuXG48c3R5bGUgc2NvcGVkPlxuLm91dGVyLFxuLmlubmVyIHtcbiAgYmFja2dyb3VuZDogI2VlZTtcbiAgcGFkZGluZzogMzBweDtcbiAgbWluLWhlaWdodDogNTBweDtcbn1cblxuLmlubmVyIHtcbiAgYmFja2dyb3VuZDogI2NjYztcbn1cblxuLm5lc3RlZC1lbnRlci1hY3RpdmUsXG4ubmVzdGVkLWxlYXZlLWFjdGl2ZSB7XG4gIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UtaW4tb3V0O1xufVxuXG4vKiBkZWxheSBsZWF2ZSBvZiBwYXJlbnQgZWxlbWVudCAqL1xuLm5lc3RlZC1sZWF2ZS1hY3RpdmUge1xuICB0cmFuc2l0aW9uLWRlbGF5OiAwLjI1cztcbn1cblxuLm5lc3RlZC1lbnRlci1mcm9tLFxuLm5lc3RlZC1sZWF2ZS10byB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzMHB4KTtcbiAgb3BhY2l0eTogMDtcbn1cblxuLyogd2UgY2FuIGFsc28gdHJhbnNpdGlvbiBuZXN0ZWQgZWxlbWVudHMgdXNpbmcgbmVzdGVkIHNlbGVjdG9ycyAqL1xuLm5lc3RlZC1lbnRlci1hY3RpdmUgLmlubmVyLFxuLm5lc3RlZC1sZWF2ZS1hY3RpdmUgLmlubmVyIHtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbi1vdXQ7XG59XG4vKiBkZWxheSBlbnRlciBvZiBuZXN0ZWQgZWxlbWVudCAqL1xuLm5lc3RlZC1lbnRlci1hY3RpdmUgLmlubmVyIHtcbiAgdHJhbnNpdGlvbi1kZWxheTogMC4yNXM7XG59XG5cbi5uZXN0ZWQtZW50ZXItZnJvbSAuaW5uZXIsXG4ubmVzdGVkLWxlYXZlLXRvIC5pbm5lciB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgzMHB4KTtcbiAgLypcbiAgICBIYWNrIGFyb3VuZCBhIENocm9tZSA5NiBidWcgaW4gaGFuZGxpbmcgbmVzdGVkIG9wYWNpdHkgdHJhbnNpdGlvbnMuXG4gICAgVGhpcyBpcyBub3QgbmVlZGVkIGluIG90aGVyIGJyb3dzZXJzIG9yIENocm9tZSA5OSsgd2hlcmUgdGhlIGJ1Z1xuICAgIGhhcyBiZWVuIGZpeGVkLlxuICAqL1xuICBvcGFjaXR5OiAwLjAwMTtcbn1cbjwvc3R5bGU%2BXG4ifQ%3D%3D"}),Y,n("p",null,[a("相比之下，像 "),R,a(" 或者 "),S,a(" 这样的属性会触发 CSS 布局变动，因此执行它们的动画效果更昂贵，需要谨慎使用。 我们可以在 "),n("a",y,[a("CSS-Triggers"),s(e)]),a(" 这类的网站查询哪些属性会在执行动画时触发 CSS 布局变动。")]),J,F,w,n("p",null,[a("可以使用 "),n("a",H,[a("GreenSock"),s(e)]),a(", "),n("a",f,[a("Anime.js"),s(e)]),a(", 或者 "),n("a",L,[a("Motion One"),s(e)]),a(" 等库来执行动画。")]),s(c,{key:"4a1ff30d",title:"JavaScript%20%E9%92%A9%E5%AD%90",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnXG5cbmNvbnN0IHNob3cgPSByZWYodHJ1ZSlcblxuZnVuY3Rpb24gb25CZWZvcmVFbnRlcihlbCkge1xuICBnc2FwLnNldChlbCwge1xuICAgIHNjYWxlWDogMC4yNSxcbiAgICBzY2FsZVk6IDAuMjUsXG4gICAgb3BhY2l0eTogMSxcbiAgfSlcbn1cblxuZnVuY3Rpb24gb25FbnRlcihlbCwgZG9uZSkge1xuICBnc2FwLnRvKGVsLCB7XG4gICAgZHVyYXRpb246IDEsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMSxcbiAgICBvcGFjaXR5OiAxLFxuICAgIGVhc2U6ICdlbGFzdGljLmluT3V0KDIuNSwgMSknLFxuICAgIG9uQ29tcGxldGU6IGRvbmUsXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG9uTGVhdmUoZWwsIGRvbmUpIHtcbiAgZ3NhcC50byhlbCwge1xuICAgIGR1cmF0aW9uOiAwLjcsXG4gICAgc2NhbGVYOiAxLFxuICAgIHNjYWxlWTogMSxcbiAgICB4OiAzMDAsXG4gICAgZWFzZTogJ2VsYXN0aWMuaW5PdXQoMi41LCAxKScsXG4gIH0pXG4gIGdzYXAudG8oZWwsIHtcbiAgICBkdXJhdGlvbjogMC4yLFxuICAgIGRlbGF5OiAwLjUsXG4gICAgb3BhY2l0eTogMCxcbiAgICBvbkNvbXBsZXRlOiBkb25lLFxuICB9KVxufVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93ID0gIXNob3dcIj5Ub2dnbGU8L2J1dHRvbj5cblxuICA8VHJhbnNpdGlvblxuICAgIDpjc3M9XCJmYWxzZVwiXG4gICAgQGJlZm9yZS1lbnRlcj1cIm9uQmVmb3JlRW50ZXJcIlxuICAgIEBlbnRlcj1cIm9uRW50ZXJcIlxuICAgIEBsZWF2ZT1cIm9uTGVhdmVcIlxuICA%2BXG4gICAgPGRpdiB2LWlmPVwic2hvd1wiIGNsYXNzPVwiZ3NhcC1ib3hcIiAvPlxuICA8L1RyYW5zaXRpb24%2BXG48L3RlbXBsYXRlPlxuXG48c3R5bGU%2BXG4uZ3NhcC1ib3gge1xuICBiYWNrZ3JvdW5kOiAjNDJiODgzO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICB3aWR0aDogMzBweDtcbiAgaGVpZ2h0OiAzMHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCIsXG4gICAgXCJnc2FwXCI6IFwiaHR0cHM6Ly91bnBrZy5jb20vZ3NhcD9tb2R1bGVcIlxuICB9XG59In0%3D"}),j,s(c,{key:"0c3a0db8",title:"%E7%BB%84%E4%BB%B6%E9%97%B4%E8%BF%87%E6%B8%A1%20%26%20%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1",link:"https%3A%2F%2Fsfc.vuejs.org%2F%23eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgc2hhbGxvd1JlZiB9IGZyb20gJ3Z1ZSdcblxuaW1wb3J0IENvbXBBIGZyb20gJy4vQ29tcEEudnVlJ1xuaW1wb3J0IENvbXBCIGZyb20gJy4vQ29tcEIudnVlJ1xuXG5jb25zdCBhY3RpdmVDb21wb25lbnQgPSBzaGFsbG93UmVmKENvbXBBKVxuY29uc3QgdHJhbnNpdGlvbk5hbWUgPSByZWYoJ2ZhZGUnKVxuPC9zY3JpcHQ%2BXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8ZGl2IGNsYXNzPVwic2VsZWN0b3JcIj5cbiAgICAgIDxsYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdi1tb2RlbD1cImFjdGl2ZUNvbXBvbmVudFwiXG4gICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICBuYW1lPVwiY29tcFwiXG4gICAgICAgICAgOnZhbHVlPVwiQ29tcEFcIlxuICAgICAgICAvPlxuICAgICAgICBBXG4gICAgICA8L2xhYmVsPlxuICAgICAgPGxhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB2LW1vZGVsPVwiYWN0aXZlQ29tcG9uZW50XCJcbiAgICAgICAgICB0eXBlPVwicmFkaW9cIlxuICAgICAgICAgIG5hbWU9XCJjb21wXCJcbiAgICAgICAgICA6dmFsdWU9XCJDb21wQlwiXG4gICAgICAgIC8%2BXG4gICAgICAgIEJcbiAgICAgIDwvbGFiZWw%2BXG4gICAgPC9kaXY%2BXG4gICAgPGRpdiBjbGFzcz1cImNvbXBzXCI%2BXG4gICAgICA8VHJhbnNpdGlvbiA6bmFtZT1cInRyYW5zaXRpb25OYW1lXCIgbW9kZT1cIm91dC1pblwiPlxuICAgICAgICA8Y29tcG9uZW50IDppcz1cImFjdGl2ZUNvbXBvbmVudFwiIC8%2BXG4gICAgICA8L1RyYW5zaXRpb24%2BXG4gICAgPC9kaXY%2BXG4gICAgPGRpdiBjbGFzcz1cImVmZmVjdFwiPlxuICAgICAgPGxhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB2LW1vZGVsPVwidHJhbnNpdGlvbk5hbWVcIlxuICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgbmFtZT1cInRyYW5zaXRpb25cIlxuICAgICAgICAgIHZhbHVlPVwiZmFkZVwiXG4gICAgICAgIC8%2BXG4gICAgICAgIGZhZGVcbiAgICAgIDwvbGFiZWw%2BXG4gICAgICA8bGFiZWw%2BXG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHYtbW9kZWw9XCJ0cmFuc2l0aW9uTmFtZVwiXG4gICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICBuYW1lPVwidHJhbnNpdGlvblwiXG4gICAgICAgICAgdmFsdWU9XCJzbGlkZVwiXG4gICAgICAgIC8%2BXG4gICAgICAgIHNsaWRlXG4gICAgICA8L2xhYmVsPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU%2BXG5cbjxzdHlsZT5cbi5mYWRlLWVudGVyLWFjdGl2ZSxcbi5mYWRlLWxlYXZlLWFjdGl2ZSB7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC41cyBlYXNlO1xufVxuXG4uZmFkZS1lbnRlci1mcm9tLFxuLmZhZGUtbGVhdmUtdG8ge1xuICBvcGFjaXR5OiAwO1xufVxuXG4uc2xpZGUtZW50ZXItYWN0aXZlLFxuLnNsaWRlLWxlYXZlLWFjdGl2ZSB7XG4gIHRyYW5zaXRpb246IG9wYWNpdHksIHRyYW5zZm9ybSAwLjVzIGVhc2U7XG59XG5cbi5zbGlkZS1lbnRlci1mcm9tIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMHB4KTtcbn1cblxuLnNsaWRlLWxlYXZlLXRvIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMDBweCk7XG59XG5cbi5jb21wcyB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG48L3N0eWxlPlxuIiwiQ29tcEEudnVlIjoiPHRlbXBsYXRlPlxuICA8ZGl2PkNvbXBvbmVudCBBPC9kaXY%2BXG48L3RlbXBsYXRlPlxuIiwiQ29tcEIudnVlIjoiPHRlbXBsYXRlPlxuICA8ZGl2PkNvbXBvbmVudCBCPC9kaXY%2BXG48L3RlbXBsYXRlPlxuIn0%3D"})])}const _=o(d,[["render",N],["__file","transition.html.vue"]]);export{_ as default};
